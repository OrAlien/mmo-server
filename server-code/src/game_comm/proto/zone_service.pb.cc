// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zone_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zone_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SC_LOADMAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LOADMAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LOADMAP_SUCC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LOADMAP_SUCC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_PLAYERINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_PLAYERINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ACTORATTRIB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ACTORATTRIB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_COMMONDATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_COMMONDATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_COMMONDATA_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_COMMONDATA_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DATACOUNT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DATACOUNT_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DATACOUNT_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DATACOUNT_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_COOLDOWN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_COOLDOWN_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_COOLDOWN_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_COOLDOWN_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SYSVAR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SYSVAR_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SYSVAR_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SYSVAR_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ENTERMAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ENTERMAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_AOI_NEW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_AOI_NEW_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_AOI_REMOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_AOI_REMOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_AOI_UPDATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_AOI_UPDATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ATTRIB_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ATTRIB_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ATTRIB_CHANGE_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ATTRIB_CHANGE_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_STATUS_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_STATUS_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_STATUS_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_STATUS_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_STATUS_INFO_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_STATUS_INFO_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_STATUS_ACTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_STATUS_ACTION_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_STATUS_ACTION_ACTION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CS_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_CHANGEMAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_CHANGEMAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_CASTSKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_CASTSKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_CASTSKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_CASTSKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SKILL_DAMAGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SKILL_DAMAGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SKILL_DAMAGE_DamageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SKILL_DAMAGE_DamageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_SKILL_BREAK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_SKILL_BREAK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SKILL_BREAK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SKILL_BREAK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_SKILL_CHGTARGETPOS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_SKILL_CHGTARGETPOS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SKILL_STUN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SKILL_STUN_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SKILL_EFFACT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SKILL_EFFACT_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DAMAGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DAMAGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DEAD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DEAD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_CHANGE_PKMODE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_CHANGE_PKMODE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_CHANGE_PKMODE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_CHANGE_PKMODE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_REBORN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_REBORN_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ITEM_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ITEM_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ITEM_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ITEM_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ITEM_CHANGE_ChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ITEM_CHANGE_ChangeData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_ITEM_CHANGE_ChangeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SC_ITEM_DELETE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ITEM_DELETE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_SWAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_SWAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_SPLIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_SPLIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_COMBINE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_COMBINE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_TIDY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_TIDY_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_USE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_USE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_OPEN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_STORAGE_OPEN_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_CHECKOUT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_STORAGE_CHECKOUT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_CHECKIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ITEM_STORAGE_CHECKIN_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_EQUIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_EQUIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_UNEQUIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_UNEQUIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TALK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TALK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TALK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TALK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TASK_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TASK_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TASK_INFO_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TASK_INFO_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TASK_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TASK_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TASK_SUBMIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TASK_SUBMIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ACTIVE_NPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ACTIVE_NPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DIALOG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DIALOG_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DIALOG_dialog_link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DIALOG_dialog_link_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_DIALOG_CLICK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_DIALOG_CLICK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ACHI_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ACHI_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ACHI_INFO_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ACHI_INFO_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ACHI_TAKE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ACHI_TAKE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMCREATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMCREATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMQUIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMQUIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMKICKMEMBER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMKICKMEMBER_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMINVITEMEMBER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMINVITEMEMBER_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TEAMINVITEMEMBER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TEAMINVITEMEMBER_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMACCEPTINVITE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMACCEPTINVITE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMNEWLEADER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMNEWLEADER_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TEAMMEMBER_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_INFO_MemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TEAMMEMBER_INFO_MemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_ACTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TEAMMEMBER_ACTION_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_TEAMMEMBER_ACTION_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMAPPLYMEMBER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMAPPLYMEMBER_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TEAMAPPLYMEMBER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TEAMAPPLYMEMBER_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TEAMACCEPTAPPLY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TEAMACCEPTAPPLY_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TalkChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zone_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_zone_5fservice_2eproto() {
  protobuf_AddDesc_zone_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zone_service.proto");
  GOOGLE_CHECK(file != NULL);
  SC_LOADMAP_descriptor_ = file->message_type(0);
  static const int SC_LOADMAP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOADMAP, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOADMAP, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOADMAP, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOADMAP, face_),
  };
  SC_LOADMAP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_LOADMAP_descriptor_,
      SC_LOADMAP::internal_default_instance(),
      SC_LOADMAP_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_LOADMAP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOADMAP, _internal_metadata_));
  CS_LOADMAP_SUCC_descriptor_ = file->message_type(1);
  static const int CS_LOADMAP_SUCC_offsets_[1] = {
  };
  CS_LOADMAP_SUCC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_LOADMAP_SUCC_descriptor_,
      CS_LOADMAP_SUCC::internal_default_instance(),
      CS_LOADMAP_SUCC_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_LOADMAP_SUCC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOADMAP_SUCC, _internal_metadata_));
  SC_PLAYERINFO_descriptor_ = file->message_type(2);
  static const int SC_PLAYERINFO_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, baselook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, viplev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, pkval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, money_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, gold_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, bag_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, stroge_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, achi_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, np_),
  };
  SC_PLAYERINFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_PLAYERINFO_descriptor_,
      SC_PLAYERINFO::internal_default_instance(),
      SC_PLAYERINFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_PLAYERINFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PLAYERINFO, _internal_metadata_));
  SC_ACTORATTRIB_descriptor_ = file->message_type(3);
  static const int SC_ACTORATTRIB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORATTRIB, attrib_list_),
  };
  SC_ACTORATTRIB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ACTORATTRIB_descriptor_,
      SC_ACTORATTRIB::internal_default_instance(),
      SC_ACTORATTRIB_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ACTORATTRIB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORATTRIB, _internal_metadata_));
  SC_COMMONDATA_descriptor_ = file->message_type(4);
  static const int SC_COMMONDATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA, datalist_),
  };
  SC_COMMONDATA_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_COMMONDATA_descriptor_,
      SC_COMMONDATA::internal_default_instance(),
      SC_COMMONDATA_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_COMMONDATA),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA, _internal_metadata_));
  SC_COMMONDATA_Data_descriptor_ = SC_COMMONDATA_descriptor_->nested_type(0);
  static const int SC_COMMONDATA_Data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, keyidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, data0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, data3_),
  };
  SC_COMMONDATA_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_COMMONDATA_Data_descriptor_,
      SC_COMMONDATA_Data::internal_default_instance(),
      SC_COMMONDATA_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_COMMONDATA_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COMMONDATA_Data, _internal_metadata_));
  SC_DATACOUNT_descriptor_ = file->message_type(5);
  static const int SC_DATACOUNT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT, datalist_),
  };
  SC_DATACOUNT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DATACOUNT_descriptor_,
      SC_DATACOUNT::internal_default_instance(),
      SC_DATACOUNT_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DATACOUNT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT, _internal_metadata_));
  SC_DATACOUNT_Data_descriptor_ = SC_DATACOUNT_descriptor_->nested_type(0);
  static const int SC_DATACOUNT_Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT_Data, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT_Data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT_Data, last_reset_time_),
  };
  SC_DATACOUNT_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DATACOUNT_Data_descriptor_,
      SC_DATACOUNT_Data::internal_default_instance(),
      SC_DATACOUNT_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DATACOUNT_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DATACOUNT_Data, _internal_metadata_));
  SC_COOLDOWN_descriptor_ = file->message_type(6);
  static const int SC_COOLDOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN, datalist_),
  };
  SC_COOLDOWN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_COOLDOWN_descriptor_,
      SC_COOLDOWN::internal_default_instance(),
      SC_COOLDOWN_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_COOLDOWN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN, _internal_metadata_));
  SC_COOLDOWN_Data_descriptor_ = SC_COOLDOWN_descriptor_->nested_type(0);
  static const int SC_COOLDOWN_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN_Data, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN_Data, expiretime_),
  };
  SC_COOLDOWN_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_COOLDOWN_Data_descriptor_,
      SC_COOLDOWN_Data::internal_default_instance(),
      SC_COOLDOWN_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_COOLDOWN_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_COOLDOWN_Data, _internal_metadata_));
  SC_SYSVAR_descriptor_ = file->message_type(7);
  static const int SC_SYSVAR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR, datalist_),
  };
  SC_SYSVAR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SYSVAR_descriptor_,
      SC_SYSVAR::internal_default_instance(),
      SC_SYSVAR_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SYSVAR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR, _internal_metadata_));
  SC_SYSVAR_Data_descriptor_ = SC_SYSVAR_descriptor_->nested_type(0);
  static const int SC_SYSVAR_Data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, keyidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, data0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, data3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, str0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, str1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, str2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, str3_),
  };
  SC_SYSVAR_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SYSVAR_Data_descriptor_,
      SC_SYSVAR_Data::internal_default_instance(),
      SC_SYSVAR_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SYSVAR_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SYSVAR_Data, _internal_metadata_));
  SC_ENTERMAP_descriptor_ = file->message_type(8);
  static const int SC_ENTERMAP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTERMAP, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTERMAP, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTERMAP, face_),
  };
  SC_ENTERMAP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ENTERMAP_descriptor_,
      SC_ENTERMAP::internal_default_instance(),
      SC_ENTERMAP_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ENTERMAP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ENTERMAP, _internal_metadata_));
  SC_AOI_NEW_descriptor_ = file->message_type(9);
  static const int SC_AOI_NEW_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, actortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, baselook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, movespd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, armorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, guildname_),
  };
  SC_AOI_NEW_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_AOI_NEW_descriptor_,
      SC_AOI_NEW::internal_default_instance(),
      SC_AOI_NEW_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_AOI_NEW),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_NEW, _internal_metadata_));
  SC_AOI_REMOVE_descriptor_ = file->message_type(10);
  static const int SC_AOI_REMOVE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_REMOVE, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_REMOVE, idlist_),
  };
  SC_AOI_REMOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_AOI_REMOVE_descriptor_,
      SC_AOI_REMOVE::internal_default_instance(),
      SC_AOI_REMOVE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_AOI_REMOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_REMOVE, _internal_metadata_));
  SC_AOI_UPDATE_descriptor_ = file->message_type(11);
  static const int SC_AOI_UPDATE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_UPDATE, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_UPDATE, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_UPDATE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_UPDATE, posy_),
  };
  SC_AOI_UPDATE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_AOI_UPDATE_descriptor_,
      SC_AOI_UPDATE::internal_default_instance(),
      SC_AOI_UPDATE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_AOI_UPDATE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AOI_UPDATE, _internal_metadata_));
  SC_ATTRIB_CHANGE_descriptor_ = file->message_type(12);
  static const int SC_ATTRIB_CHANGE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE, datalist_),
  };
  SC_ATTRIB_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ATTRIB_CHANGE_descriptor_,
      SC_ATTRIB_CHANGE::internal_default_instance(),
      SC_ATTRIB_CHANGE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ATTRIB_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE, _internal_metadata_));
  SC_ATTRIB_CHANGE_Data_descriptor_ = SC_ATTRIB_CHANGE_descriptor_->nested_type(0);
  static const int SC_ATTRIB_CHANGE_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE_Data, actype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE_Data, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE_Data, valstr_),
  };
  SC_ATTRIB_CHANGE_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ATTRIB_CHANGE_Data_descriptor_,
      SC_ATTRIB_CHANGE_Data::internal_default_instance(),
      SC_ATTRIB_CHANGE_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ATTRIB_CHANGE_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ATTRIB_CHANGE_Data, _internal_metadata_));
  SC_STATUS_LIST_descriptor_ = file->message_type(13);
  static const int SC_STATUS_LIST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_LIST, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_LIST, status_typeid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_LIST, status_lev_list_),
  };
  SC_STATUS_LIST_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_STATUS_LIST_descriptor_,
      SC_STATUS_LIST::internal_default_instance(),
      SC_STATUS_LIST_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_STATUS_LIST),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_LIST, _internal_metadata_));
  SC_STATUS_INFO_descriptor_ = file->message_type(14);
  static const int SC_STATUS_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO, statuslist_),
  };
  SC_STATUS_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_STATUS_INFO_descriptor_,
      SC_STATUS_INFO::internal_default_instance(),
      SC_STATUS_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_STATUS_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO, _internal_metadata_));
  SC_STATUS_INFO_Data_descriptor_ = SC_STATUS_INFO_descriptor_->nested_type(0);
  static const int SC_STATUS_INFO_Data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, statusid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, statuslev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, laststamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, idcaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, ispause_),
  };
  SC_STATUS_INFO_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_STATUS_INFO_Data_descriptor_,
      SC_STATUS_INFO_Data::internal_default_instance(),
      SC_STATUS_INFO_Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_STATUS_INFO_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_INFO_Data, _internal_metadata_));
  SC_STATUS_ACTION_descriptor_ = file->message_type(15);
  static const int SC_STATUS_ACTION_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_ACTION, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_ACTION, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_ACTION, statusid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_ACTION, statuslev_),
  };
  SC_STATUS_ACTION_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_STATUS_ACTION_descriptor_,
      SC_STATUS_ACTION::internal_default_instance(),
      SC_STATUS_ACTION_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_STATUS_ACTION),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STATUS_ACTION, _internal_metadata_));
  SC_STATUS_ACTION_ACTION_descriptor_ = SC_STATUS_ACTION_descriptor_->enum_type(0);
  CS_MOVE_descriptor_ = file->message_type(16);
  static const int CS_MOVE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE, face_),
  };
  CS_MOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_MOVE_descriptor_,
      CS_MOVE::internal_default_instance(),
      CS_MOVE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_MOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MOVE, _internal_metadata_));
  CS_CHANGEMAP_descriptor_ = file->message_type(17);
  static const int CS_CHANGEMAP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CHANGEMAP, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CHANGEMAP, leavepoint_idx_),
  };
  CS_CHANGEMAP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_CHANGEMAP_descriptor_,
      CS_CHANGEMAP::internal_default_instance(),
      CS_CHANGEMAP_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_CHANGEMAP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CHANGEMAP, _internal_metadata_));
  CS_CASTSKILL_descriptor_ = file->message_type(18);
  static const int CS_CASTSKILL_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, y_),
  };
  CS_CASTSKILL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_CASTSKILL_descriptor_,
      CS_CASTSKILL::internal_default_instance(),
      CS_CASTSKILL_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_CASTSKILL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CASTSKILL, _internal_metadata_));
  SC_CASTSKILL_descriptor_ = file->message_type(19);
  static const int SC_CASTSKILL_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, y_),
  };
  SC_CASTSKILL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_CASTSKILL_descriptor_,
      SC_CASTSKILL::internal_default_instance(),
      SC_CASTSKILL_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_CASTSKILL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CASTSKILL, _internal_metadata_));
  SC_SKILL_DAMAGE_descriptor_ = file->message_type(20);
  static const int SC_SKILL_DAMAGE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE, damagelist_),
  };
  SC_SKILL_DAMAGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SKILL_DAMAGE_descriptor_,
      SC_SKILL_DAMAGE::internal_default_instance(),
      SC_SKILL_DAMAGE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SKILL_DAMAGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE, _internal_metadata_));
  SC_SKILL_DAMAGE_DamageInfo_descriptor_ = SC_SKILL_DAMAGE_descriptor_->nested_type(0);
  static const int SC_SKILL_DAMAGE_DamageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE_DamageInfo, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE_DamageInfo, damage_),
  };
  SC_SKILL_DAMAGE_DamageInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SKILL_DAMAGE_DamageInfo_descriptor_,
      SC_SKILL_DAMAGE_DamageInfo::internal_default_instance(),
      SC_SKILL_DAMAGE_DamageInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SKILL_DAMAGE_DamageInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_DAMAGE_DamageInfo, _internal_metadata_));
  CS_SKILL_BREAK_descriptor_ = file->message_type(21);
  static const int CS_SKILL_BREAK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SKILL_BREAK, mapid_),
  };
  CS_SKILL_BREAK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_SKILL_BREAK_descriptor_,
      CS_SKILL_BREAK::internal_default_instance(),
      CS_SKILL_BREAK_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_SKILL_BREAK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SKILL_BREAK, _internal_metadata_));
  SC_SKILL_BREAK_descriptor_ = file->message_type(22);
  static const int SC_SKILL_BREAK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_BREAK, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_BREAK, actor_id_),
  };
  SC_SKILL_BREAK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SKILL_BREAK_descriptor_,
      SC_SKILL_BREAK::internal_default_instance(),
      SC_SKILL_BREAK_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SKILL_BREAK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_BREAK, _internal_metadata_));
  CS_SKILL_CHGTARGETPOS_descriptor_ = file->message_type(23);
  static const int CS_SKILL_CHGTARGETPOS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SKILL_CHGTARGETPOS, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SKILL_CHGTARGETPOS, y_),
  };
  CS_SKILL_CHGTARGETPOS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_SKILL_CHGTARGETPOS_descriptor_,
      CS_SKILL_CHGTARGETPOS::internal_default_instance(),
      CS_SKILL_CHGTARGETPOS_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_SKILL_CHGTARGETPOS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SKILL_CHGTARGETPOS, _internal_metadata_));
  SC_SKILL_STUN_descriptor_ = file->message_type(24);
  static const int SC_SKILL_STUN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_STUN, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_STUN, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_STUN, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_STUN, stun_ms_),
  };
  SC_SKILL_STUN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SKILL_STUN_descriptor_,
      SC_SKILL_STUN::internal_default_instance(),
      SC_SKILL_STUN_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SKILL_STUN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_STUN, _internal_metadata_));
  SC_SKILL_EFFACT_descriptor_ = file->message_type(25);
  static const int SC_SKILL_EFFACT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_EFFACT, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_EFFACT, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_EFFACT, skill_id_),
  };
  SC_SKILL_EFFACT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SKILL_EFFACT_descriptor_,
      SC_SKILL_EFFACT::internal_default_instance(),
      SC_SKILL_EFFACT_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SKILL_EFFACT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SKILL_EFFACT, _internal_metadata_));
  SC_DAMAGE_descriptor_ = file->message_type(26);
  static const int SC_DAMAGE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, attacker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, hittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, crtical_),
  };
  SC_DAMAGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DAMAGE_descriptor_,
      SC_DAMAGE::internal_default_instance(),
      SC_DAMAGE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DAMAGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DAMAGE, _internal_metadata_));
  SC_DEAD_descriptor_ = file->message_type(27);
  static const int SC_DEAD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DEAD, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DEAD, attacker_id_),
  };
  SC_DEAD_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DEAD_descriptor_,
      SC_DEAD::internal_default_instance(),
      SC_DEAD_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DEAD),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DEAD, _internal_metadata_));
  CS_CHANGE_PKMODE_descriptor_ = file->message_type(28);
  static const int CS_CHANGE_PKMODE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CHANGE_PKMODE, pkmode_),
  };
  CS_CHANGE_PKMODE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_CHANGE_PKMODE_descriptor_,
      CS_CHANGE_PKMODE::internal_default_instance(),
      CS_CHANGE_PKMODE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_CHANGE_PKMODE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CHANGE_PKMODE, _internal_metadata_));
  SC_CHANGE_PKMODE_descriptor_ = file->message_type(29);
  static const int SC_CHANGE_PKMODE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CHANGE_PKMODE, pkmode_),
  };
  SC_CHANGE_PKMODE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_CHANGE_PKMODE_descriptor_,
      SC_CHANGE_PKMODE::internal_default_instance(),
      SC_CHANGE_PKMODE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_CHANGE_PKMODE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CHANGE_PKMODE, _internal_metadata_));
  CS_REBORN_descriptor_ = file->message_type(30);
  static const int CS_REBORN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_REBORN, reborn_type_),
  };
  CS_REBORN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_REBORN_descriptor_,
      CS_REBORN::internal_default_instance(),
      CS_REBORN_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_REBORN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_REBORN, _internal_metadata_));
  SC_ITEM_INFO_descriptor_ = file->message_type(31);
  static const int SC_ITEM_INFO_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, pile_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, dura_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, dura_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, addition_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, flag_),
  };
  SC_ITEM_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ITEM_INFO_descriptor_,
      SC_ITEM_INFO::internal_default_instance(),
      SC_ITEM_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ITEM_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_INFO, _internal_metadata_));
  SC_ITEM_CHANGE_descriptor_ = file->message_type(32);
  static const int SC_ITEM_CHANGE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE, change_list_),
  };
  SC_ITEM_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ITEM_CHANGE_descriptor_,
      SC_ITEM_CHANGE::internal_default_instance(),
      SC_ITEM_CHANGE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ITEM_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE, _internal_metadata_));
  SC_ITEM_CHANGE_ChangeData_descriptor_ = SC_ITEM_CHANGE_descriptor_->nested_type(0);
  static const int SC_ITEM_CHANGE_ChangeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE_ChangeData, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE_ChangeData, value_),
  };
  SC_ITEM_CHANGE_ChangeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ITEM_CHANGE_ChangeData_descriptor_,
      SC_ITEM_CHANGE_ChangeData::internal_default_instance(),
      SC_ITEM_CHANGE_ChangeData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ITEM_CHANGE_ChangeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_CHANGE_ChangeData, _internal_metadata_));
  SC_ITEM_CHANGE_ChangeType_descriptor_ = SC_ITEM_CHANGE_descriptor_->enum_type(0);
  SC_ITEM_DELETE_descriptor_ = file->message_type(33);
  static const int SC_ITEM_DELETE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_DELETE, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_DELETE, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_DELETE, grid_),
  };
  SC_ITEM_DELETE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ITEM_DELETE_descriptor_,
      SC_ITEM_DELETE::internal_default_instance(),
      SC_ITEM_DELETE_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ITEM_DELETE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ITEM_DELETE, _internal_metadata_));
  CS_ITEM_SWAP_descriptor_ = file->message_type(34);
  static const int CS_ITEM_SWAP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SWAP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SWAP, grid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SWAP, grid2_),
  };
  CS_ITEM_SWAP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_SWAP_descriptor_,
      CS_ITEM_SWAP::internal_default_instance(),
      CS_ITEM_SWAP_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_SWAP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SWAP, _internal_metadata_));
  CS_ITEM_SPLIT_descriptor_ = file->message_type(35);
  static const int CS_ITEM_SPLIT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SPLIT, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SPLIT, grid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SPLIT, grid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SPLIT, split_num_),
  };
  CS_ITEM_SPLIT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_SPLIT_descriptor_,
      CS_ITEM_SPLIT::internal_default_instance(),
      CS_ITEM_SPLIT_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_SPLIT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_SPLIT, _internal_metadata_));
  CS_ITEM_COMBINE_descriptor_ = file->message_type(36);
  static const int CS_ITEM_COMBINE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_COMBINE, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_COMBINE, grid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_COMBINE, grid2_),
  };
  CS_ITEM_COMBINE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_COMBINE_descriptor_,
      CS_ITEM_COMBINE::internal_default_instance(),
      CS_ITEM_COMBINE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_COMBINE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_COMBINE, _internal_metadata_));
  CS_ITEM_TIDY_descriptor_ = file->message_type(37);
  static const int CS_ITEM_TIDY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_TIDY, position_),
  };
  CS_ITEM_TIDY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_TIDY_descriptor_,
      CS_ITEM_TIDY::internal_default_instance(),
      CS_ITEM_TIDY_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_TIDY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_TIDY, _internal_metadata_));
  CS_ITEM_USE_descriptor_ = file->message_type(38);
  static const int CS_ITEM_USE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_USE, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_USE, count_),
  };
  CS_ITEM_USE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_USE_descriptor_,
      CS_ITEM_USE::internal_default_instance(),
      CS_ITEM_USE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_USE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_USE, _internal_metadata_));
  CS_ITEM_STORAGE_OPEN_descriptor_ = file->message_type(39);
  static const int CS_ITEM_STORAGE_OPEN_offsets_[1] = {
  };
  CS_ITEM_STORAGE_OPEN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_STORAGE_OPEN_descriptor_,
      CS_ITEM_STORAGE_OPEN::internal_default_instance(),
      CS_ITEM_STORAGE_OPEN_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_STORAGE_OPEN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_STORAGE_OPEN, _internal_metadata_));
  CS_ITEM_STORAGE_CHECKOUT_descriptor_ = file->message_type(40);
  static const int CS_ITEM_STORAGE_CHECKOUT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_STORAGE_CHECKOUT, grid_in_storage_),
  };
  CS_ITEM_STORAGE_CHECKOUT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_STORAGE_CHECKOUT_descriptor_,
      CS_ITEM_STORAGE_CHECKOUT::internal_default_instance(),
      CS_ITEM_STORAGE_CHECKOUT_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_STORAGE_CHECKOUT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_STORAGE_CHECKOUT, _internal_metadata_));
  CS_ITEM_STORAGE_CHECKIN_descriptor_ = file->message_type(41);
  static const int CS_ITEM_STORAGE_CHECKIN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_STORAGE_CHECKIN, grid_in_package_),
  };
  CS_ITEM_STORAGE_CHECKIN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ITEM_STORAGE_CHECKIN_descriptor_,
      CS_ITEM_STORAGE_CHECKIN::internal_default_instance(),
      CS_ITEM_STORAGE_CHECKIN_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ITEM_STORAGE_CHECKIN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ITEM_STORAGE_CHECKIN, _internal_metadata_));
  CS_EQUIP_descriptor_ = file->message_type(42);
  static const int CS_EQUIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EQUIP, grid_in_package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EQUIP, grid_in_equip_),
  };
  CS_EQUIP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_EQUIP_descriptor_,
      CS_EQUIP::internal_default_instance(),
      CS_EQUIP_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_EQUIP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EQUIP, _internal_metadata_));
  CS_UNEQUIP_descriptor_ = file->message_type(43);
  static const int CS_UNEQUIP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_UNEQUIP, grid_in_equip_),
  };
  CS_UNEQUIP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_UNEQUIP_descriptor_,
      CS_UNEQUIP::internal_default_instance(),
      CS_UNEQUIP_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_UNEQUIP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_UNEQUIP, _internal_metadata_));
  CS_TALK_descriptor_ = file->message_type(44);
  static const int CS_TALK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TALK, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TALK, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TALK, reciver_id_),
  };
  CS_TALK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TALK_descriptor_,
      CS_TALK::internal_default_instance(),
      CS_TALK_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TALK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TALK, _internal_metadata_));
  SC_TALK_descriptor_ = file->message_type(45);
  static const int SC_TALK_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, sender_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, sender_viplev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, reciver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, item_list_),
  };
  SC_TALK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TALK_descriptor_,
      SC_TALK::internal_default_instance(),
      SC_TALK_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TALK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TALK, _internal_metadata_));
  SC_TASK_INFO_descriptor_ = file->message_type(46);
  static const int SC_TASK_INFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO, task_info_list_),
  };
  SC_TASK_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TASK_INFO_descriptor_,
      SC_TASK_INFO::internal_default_instance(),
      SC_TASK_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TASK_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO, _internal_metadata_));
  SC_TASK_INFO_Info_descriptor_ = SC_TASK_INFO_descriptor_->nested_type(0);
  static const int SC_TASK_INFO_Info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, accept_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, daycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, daycount_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, num2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, num3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, num4_),
  };
  SC_TASK_INFO_Info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TASK_INFO_Info_descriptor_,
      SC_TASK_INFO_Info::internal_default_instance(),
      SC_TASK_INFO_Info_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TASK_INFO_Info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_INFO_Info, _internal_metadata_));
  SC_TASK_DATA_descriptor_ = file->message_type(47);
  static const int SC_TASK_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_DATA, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_DATA, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_DATA, num_),
  };
  SC_TASK_DATA_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TASK_DATA_descriptor_,
      SC_TASK_DATA::internal_default_instance(),
      SC_TASK_DATA_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TASK_DATA),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TASK_DATA, _internal_metadata_));
  CS_TASK_SUBMIT_descriptor_ = file->message_type(48);
  static const int CS_TASK_SUBMIT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TASK_SUBMIT, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TASK_SUBMIT, submit_multiple_),
  };
  CS_TASK_SUBMIT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TASK_SUBMIT_descriptor_,
      CS_TASK_SUBMIT::internal_default_instance(),
      CS_TASK_SUBMIT_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TASK_SUBMIT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TASK_SUBMIT, _internal_metadata_));
  CS_ACTIVE_NPC_descriptor_ = file->message_type(49);
  static const int CS_ACTIVE_NPC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ACTIVE_NPC, npc_id_),
  };
  CS_ACTIVE_NPC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ACTIVE_NPC_descriptor_,
      CS_ACTIVE_NPC::internal_default_instance(),
      CS_ACTIVE_NPC_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ACTIVE_NPC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ACTIVE_NPC, _internal_metadata_));
  SC_DIALOG_descriptor_ = file->message_type(50);
  static const int SC_DIALOG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, dialog_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, dialog_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, dialog_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, dialog_txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, dialog_link_list_),
  };
  SC_DIALOG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DIALOG_descriptor_,
      SC_DIALOG::internal_default_instance(),
      SC_DIALOG_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DIALOG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG, _internal_metadata_));
  SC_DIALOG_dialog_link_descriptor_ = SC_DIALOG_descriptor_->nested_type(0);
  static const int SC_DIALOG_dialog_link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG_dialog_link, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG_dialog_link, txt_),
  };
  SC_DIALOG_dialog_link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DIALOG_dialog_link_descriptor_,
      SC_DIALOG_dialog_link::internal_default_instance(),
      SC_DIALOG_dialog_link_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_DIALOG_dialog_link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DIALOG_dialog_link, _internal_metadata_));
  CS_DIALOG_CLICK_descriptor_ = file->message_type(51);
  static const int CS_DIALOG_CLICK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DIALOG_CLICK, dialog_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DIALOG_CLICK, dialog_button_idx_),
  };
  CS_DIALOG_CLICK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_DIALOG_CLICK_descriptor_,
      CS_DIALOG_CLICK::internal_default_instance(),
      CS_DIALOG_CLICK_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_DIALOG_CLICK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DIALOG_CLICK, _internal_metadata_));
  SC_ACHI_INFO_descriptor_ = file->message_type(52);
  static const int SC_ACHI_INFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACHI_INFO, finish_list_),
  };
  SC_ACHI_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ACHI_INFO_descriptor_,
      SC_ACHI_INFO::internal_default_instance(),
      SC_ACHI_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ACHI_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACHI_INFO, _internal_metadata_));
  SC_ACHI_INFO_Info_descriptor_ = SC_ACHI_INFO_descriptor_->nested_type(0);
  static const int SC_ACHI_INFO_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACHI_INFO_Info, achi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACHI_INFO_Info, take_),
  };
  SC_ACHI_INFO_Info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ACHI_INFO_Info_descriptor_,
      SC_ACHI_INFO_Info::internal_default_instance(),
      SC_ACHI_INFO_Info_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ACHI_INFO_Info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACHI_INFO_Info, _internal_metadata_));
  CS_ACHI_TAKE_descriptor_ = file->message_type(53);
  static const int CS_ACHI_TAKE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ACHI_TAKE, achi_id_),
  };
  CS_ACHI_TAKE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ACHI_TAKE_descriptor_,
      CS_ACHI_TAKE::internal_default_instance(),
      CS_ACHI_TAKE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_ACHI_TAKE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ACHI_TAKE, _internal_metadata_));
  CS_TEAMCREATE_descriptor_ = file->message_type(54);
  static const int CS_TEAMCREATE_offsets_[1] = {
  };
  CS_TEAMCREATE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMCREATE_descriptor_,
      CS_TEAMCREATE::internal_default_instance(),
      CS_TEAMCREATE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMCREATE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMCREATE, _internal_metadata_));
  CS_TEAMQUIT_descriptor_ = file->message_type(55);
  static const int CS_TEAMQUIT_offsets_[1] = {
  };
  CS_TEAMQUIT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMQUIT_descriptor_,
      CS_TEAMQUIT::internal_default_instance(),
      CS_TEAMQUIT_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMQUIT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMQUIT, _internal_metadata_));
  CS_TEAMKICKMEMBER_descriptor_ = file->message_type(56);
  static const int CS_TEAMKICKMEMBER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMKICKMEMBER, member_id_),
  };
  CS_TEAMKICKMEMBER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMKICKMEMBER_descriptor_,
      CS_TEAMKICKMEMBER::internal_default_instance(),
      CS_TEAMKICKMEMBER_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMKICKMEMBER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMKICKMEMBER, _internal_metadata_));
  CS_TEAMINVITEMEMBER_descriptor_ = file->message_type(57);
  static const int CS_TEAMINVITEMEMBER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMINVITEMEMBER, invitee_id_),
  };
  CS_TEAMINVITEMEMBER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMINVITEMEMBER_descriptor_,
      CS_TEAMINVITEMEMBER::internal_default_instance(),
      CS_TEAMINVITEMEMBER_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMINVITEMEMBER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMINVITEMEMBER, _internal_metadata_));
  SC_TEAMINVITEMEMBER_descriptor_ = file->message_type(58);
  static const int SC_TEAMINVITEMEMBER_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMINVITEMEMBER, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMINVITEMEMBER, inviter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMINVITEMEMBER, inviter_name_),
  };
  SC_TEAMINVITEMEMBER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TEAMINVITEMEMBER_descriptor_,
      SC_TEAMINVITEMEMBER::internal_default_instance(),
      SC_TEAMINVITEMEMBER_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TEAMINVITEMEMBER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMINVITEMEMBER, _internal_metadata_));
  CS_TEAMACCEPTINVITE_descriptor_ = file->message_type(59);
  static const int CS_TEAMACCEPTINVITE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTINVITE, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTINVITE, inviter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTINVITE, result_),
  };
  CS_TEAMACCEPTINVITE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMACCEPTINVITE_descriptor_,
      CS_TEAMACCEPTINVITE::internal_default_instance(),
      CS_TEAMACCEPTINVITE_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMACCEPTINVITE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTINVITE, _internal_metadata_));
  CS_TEAMNEWLEADER_descriptor_ = file->message_type(60);
  static const int CS_TEAMNEWLEADER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMNEWLEADER, new_leader_id_),
  };
  CS_TEAMNEWLEADER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMNEWLEADER_descriptor_,
      CS_TEAMNEWLEADER::internal_default_instance(),
      CS_TEAMNEWLEADER_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMNEWLEADER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMNEWLEADER, _internal_metadata_));
  SC_TEAMMEMBER_INFO_descriptor_ = file->message_type(61);
  static const int SC_TEAMMEMBER_INFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO, member_list_),
  };
  SC_TEAMMEMBER_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TEAMMEMBER_INFO_descriptor_,
      SC_TEAMMEMBER_INFO::internal_default_instance(),
      SC_TEAMMEMBER_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TEAMMEMBER_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO, _internal_metadata_));
  SC_TEAMMEMBER_INFO_MemberInfo_descriptor_ = SC_TEAMMEMBER_INFO_descriptor_->nested_type(0);
  static const int SC_TEAMMEMBER_INFO_MemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO_MemberInfo, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO_MemberInfo, member_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO_MemberInfo, member_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO_MemberInfo, member_name_),
  };
  SC_TEAMMEMBER_INFO_MemberInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TEAMMEMBER_INFO_MemberInfo_descriptor_,
      SC_TEAMMEMBER_INFO_MemberInfo::internal_default_instance(),
      SC_TEAMMEMBER_INFO_MemberInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TEAMMEMBER_INFO_MemberInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_INFO_MemberInfo, _internal_metadata_));
  SC_TEAMMEMBER_ACTION_descriptor_ = file->message_type(62);
  static const int SC_TEAMMEMBER_ACTION_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, member_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, member_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, member_online_),
  };
  SC_TEAMMEMBER_ACTION_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TEAMMEMBER_ACTION_descriptor_,
      SC_TEAMMEMBER_ACTION::internal_default_instance(),
      SC_TEAMMEMBER_ACTION_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TEAMMEMBER_ACTION),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMMEMBER_ACTION, _internal_metadata_));
  SC_TEAMMEMBER_ACTION_Action_descriptor_ = SC_TEAMMEMBER_ACTION_descriptor_->enum_type(0);
  CS_TEAMAPPLYMEMBER_descriptor_ = file->message_type(63);
  static const int CS_TEAMAPPLYMEMBER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMAPPLYMEMBER, respondent_id_),
  };
  CS_TEAMAPPLYMEMBER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMAPPLYMEMBER_descriptor_,
      CS_TEAMAPPLYMEMBER::internal_default_instance(),
      CS_TEAMAPPLYMEMBER_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMAPPLYMEMBER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMAPPLYMEMBER, _internal_metadata_));
  SC_TEAMAPPLYMEMBER_descriptor_ = file->message_type(64);
  static const int SC_TEAMAPPLYMEMBER_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMAPPLYMEMBER, applicant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMAPPLYMEMBER, applicant_name_),
  };
  SC_TEAMAPPLYMEMBER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TEAMAPPLYMEMBER_descriptor_,
      SC_TEAMAPPLYMEMBER::internal_default_instance(),
      SC_TEAMAPPLYMEMBER_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_TEAMAPPLYMEMBER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TEAMAPPLYMEMBER, _internal_metadata_));
  CS_TEAMACCEPTAPPLY_descriptor_ = file->message_type(65);
  static const int CS_TEAMACCEPTAPPLY_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTAPPLY, applicant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTAPPLY, result_),
  };
  CS_TEAMACCEPTAPPLY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TEAMACCEPTAPPLY_descriptor_,
      CS_TEAMACCEPTAPPLY::internal_default_instance(),
      CS_TEAMACCEPTAPPLY_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_TEAMACCEPTAPPLY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TEAMACCEPTAPPLY, _internal_metadata_));
  TalkChannel_descriptor_ = file->enum_type(0);
  TaskState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zone_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_LOADMAP_descriptor_, SC_LOADMAP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_LOADMAP_SUCC_descriptor_, CS_LOADMAP_SUCC::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_PLAYERINFO_descriptor_, SC_PLAYERINFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ACTORATTRIB_descriptor_, SC_ACTORATTRIB::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_COMMONDATA_descriptor_, SC_COMMONDATA::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_COMMONDATA_Data_descriptor_, SC_COMMONDATA_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DATACOUNT_descriptor_, SC_DATACOUNT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DATACOUNT_Data_descriptor_, SC_DATACOUNT_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_COOLDOWN_descriptor_, SC_COOLDOWN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_COOLDOWN_Data_descriptor_, SC_COOLDOWN_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SYSVAR_descriptor_, SC_SYSVAR::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SYSVAR_Data_descriptor_, SC_SYSVAR_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ENTERMAP_descriptor_, SC_ENTERMAP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_AOI_NEW_descriptor_, SC_AOI_NEW::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_AOI_REMOVE_descriptor_, SC_AOI_REMOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_AOI_UPDATE_descriptor_, SC_AOI_UPDATE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ATTRIB_CHANGE_descriptor_, SC_ATTRIB_CHANGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ATTRIB_CHANGE_Data_descriptor_, SC_ATTRIB_CHANGE_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_STATUS_LIST_descriptor_, SC_STATUS_LIST::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_STATUS_INFO_descriptor_, SC_STATUS_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_STATUS_INFO_Data_descriptor_, SC_STATUS_INFO_Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_STATUS_ACTION_descriptor_, SC_STATUS_ACTION::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_MOVE_descriptor_, CS_MOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_CHANGEMAP_descriptor_, CS_CHANGEMAP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_CASTSKILL_descriptor_, CS_CASTSKILL::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_CASTSKILL_descriptor_, SC_CASTSKILL::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SKILL_DAMAGE_descriptor_, SC_SKILL_DAMAGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SKILL_DAMAGE_DamageInfo_descriptor_, SC_SKILL_DAMAGE_DamageInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_SKILL_BREAK_descriptor_, CS_SKILL_BREAK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SKILL_BREAK_descriptor_, SC_SKILL_BREAK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_SKILL_CHGTARGETPOS_descriptor_, CS_SKILL_CHGTARGETPOS::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SKILL_STUN_descriptor_, SC_SKILL_STUN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SKILL_EFFACT_descriptor_, SC_SKILL_EFFACT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DAMAGE_descriptor_, SC_DAMAGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DEAD_descriptor_, SC_DEAD::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_CHANGE_PKMODE_descriptor_, CS_CHANGE_PKMODE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_CHANGE_PKMODE_descriptor_, SC_CHANGE_PKMODE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_REBORN_descriptor_, CS_REBORN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ITEM_INFO_descriptor_, SC_ITEM_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ITEM_CHANGE_descriptor_, SC_ITEM_CHANGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ITEM_CHANGE_ChangeData_descriptor_, SC_ITEM_CHANGE_ChangeData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ITEM_DELETE_descriptor_, SC_ITEM_DELETE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_SWAP_descriptor_, CS_ITEM_SWAP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_SPLIT_descriptor_, CS_ITEM_SPLIT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_COMBINE_descriptor_, CS_ITEM_COMBINE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_TIDY_descriptor_, CS_ITEM_TIDY::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_USE_descriptor_, CS_ITEM_USE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_STORAGE_OPEN_descriptor_, CS_ITEM_STORAGE_OPEN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_STORAGE_CHECKOUT_descriptor_, CS_ITEM_STORAGE_CHECKOUT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ITEM_STORAGE_CHECKIN_descriptor_, CS_ITEM_STORAGE_CHECKIN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_EQUIP_descriptor_, CS_EQUIP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_UNEQUIP_descriptor_, CS_UNEQUIP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TALK_descriptor_, CS_TALK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TALK_descriptor_, SC_TALK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TASK_INFO_descriptor_, SC_TASK_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TASK_INFO_Info_descriptor_, SC_TASK_INFO_Info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TASK_DATA_descriptor_, SC_TASK_DATA::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TASK_SUBMIT_descriptor_, CS_TASK_SUBMIT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ACTIVE_NPC_descriptor_, CS_ACTIVE_NPC::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DIALOG_descriptor_, SC_DIALOG::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DIALOG_dialog_link_descriptor_, SC_DIALOG_dialog_link::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_DIALOG_CLICK_descriptor_, CS_DIALOG_CLICK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ACHI_INFO_descriptor_, SC_ACHI_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ACHI_INFO_Info_descriptor_, SC_ACHI_INFO_Info::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ACHI_TAKE_descriptor_, CS_ACHI_TAKE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMCREATE_descriptor_, CS_TEAMCREATE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMQUIT_descriptor_, CS_TEAMQUIT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMKICKMEMBER_descriptor_, CS_TEAMKICKMEMBER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMINVITEMEMBER_descriptor_, CS_TEAMINVITEMEMBER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TEAMINVITEMEMBER_descriptor_, SC_TEAMINVITEMEMBER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMACCEPTINVITE_descriptor_, CS_TEAMACCEPTINVITE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMNEWLEADER_descriptor_, CS_TEAMNEWLEADER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TEAMMEMBER_INFO_descriptor_, SC_TEAMMEMBER_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TEAMMEMBER_INFO_MemberInfo_descriptor_, SC_TEAMMEMBER_INFO_MemberInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TEAMMEMBER_ACTION_descriptor_, SC_TEAMMEMBER_ACTION::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMAPPLYMEMBER_descriptor_, CS_TEAMAPPLYMEMBER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TEAMAPPLYMEMBER_descriptor_, SC_TEAMAPPLYMEMBER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TEAMACCEPTAPPLY_descriptor_, CS_TEAMACCEPTAPPLY::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zone_5fservice_2eproto() {
  SC_LOADMAP_default_instance_.Shutdown();
  delete SC_LOADMAP_reflection_;
  CS_LOADMAP_SUCC_default_instance_.Shutdown();
  delete CS_LOADMAP_SUCC_reflection_;
  SC_PLAYERINFO_default_instance_.Shutdown();
  delete SC_PLAYERINFO_reflection_;
  SC_ACTORATTRIB_default_instance_.Shutdown();
  delete SC_ACTORATTRIB_reflection_;
  SC_COMMONDATA_default_instance_.Shutdown();
  delete SC_COMMONDATA_reflection_;
  SC_COMMONDATA_Data_default_instance_.Shutdown();
  delete SC_COMMONDATA_Data_reflection_;
  SC_DATACOUNT_default_instance_.Shutdown();
  delete SC_DATACOUNT_reflection_;
  SC_DATACOUNT_Data_default_instance_.Shutdown();
  delete SC_DATACOUNT_Data_reflection_;
  SC_COOLDOWN_default_instance_.Shutdown();
  delete SC_COOLDOWN_reflection_;
  SC_COOLDOWN_Data_default_instance_.Shutdown();
  delete SC_COOLDOWN_Data_reflection_;
  SC_SYSVAR_default_instance_.Shutdown();
  delete SC_SYSVAR_reflection_;
  SC_SYSVAR_Data_default_instance_.Shutdown();
  delete SC_SYSVAR_Data_reflection_;
  SC_ENTERMAP_default_instance_.Shutdown();
  delete SC_ENTERMAP_reflection_;
  SC_AOI_NEW_default_instance_.Shutdown();
  delete SC_AOI_NEW_reflection_;
  SC_AOI_REMOVE_default_instance_.Shutdown();
  delete SC_AOI_REMOVE_reflection_;
  SC_AOI_UPDATE_default_instance_.Shutdown();
  delete SC_AOI_UPDATE_reflection_;
  SC_ATTRIB_CHANGE_default_instance_.Shutdown();
  delete SC_ATTRIB_CHANGE_reflection_;
  SC_ATTRIB_CHANGE_Data_default_instance_.Shutdown();
  delete SC_ATTRIB_CHANGE_Data_reflection_;
  SC_STATUS_LIST_default_instance_.Shutdown();
  delete SC_STATUS_LIST_reflection_;
  SC_STATUS_INFO_default_instance_.Shutdown();
  delete SC_STATUS_INFO_reflection_;
  SC_STATUS_INFO_Data_default_instance_.Shutdown();
  delete SC_STATUS_INFO_Data_reflection_;
  SC_STATUS_ACTION_default_instance_.Shutdown();
  delete SC_STATUS_ACTION_reflection_;
  CS_MOVE_default_instance_.Shutdown();
  delete CS_MOVE_reflection_;
  CS_CHANGEMAP_default_instance_.Shutdown();
  delete CS_CHANGEMAP_reflection_;
  CS_CASTSKILL_default_instance_.Shutdown();
  delete CS_CASTSKILL_reflection_;
  SC_CASTSKILL_default_instance_.Shutdown();
  delete SC_CASTSKILL_reflection_;
  SC_SKILL_DAMAGE_default_instance_.Shutdown();
  delete SC_SKILL_DAMAGE_reflection_;
  SC_SKILL_DAMAGE_DamageInfo_default_instance_.Shutdown();
  delete SC_SKILL_DAMAGE_DamageInfo_reflection_;
  CS_SKILL_BREAK_default_instance_.Shutdown();
  delete CS_SKILL_BREAK_reflection_;
  SC_SKILL_BREAK_default_instance_.Shutdown();
  delete SC_SKILL_BREAK_reflection_;
  CS_SKILL_CHGTARGETPOS_default_instance_.Shutdown();
  delete CS_SKILL_CHGTARGETPOS_reflection_;
  SC_SKILL_STUN_default_instance_.Shutdown();
  delete SC_SKILL_STUN_reflection_;
  SC_SKILL_EFFACT_default_instance_.Shutdown();
  delete SC_SKILL_EFFACT_reflection_;
  SC_DAMAGE_default_instance_.Shutdown();
  delete SC_DAMAGE_reflection_;
  SC_DEAD_default_instance_.Shutdown();
  delete SC_DEAD_reflection_;
  CS_CHANGE_PKMODE_default_instance_.Shutdown();
  delete CS_CHANGE_PKMODE_reflection_;
  SC_CHANGE_PKMODE_default_instance_.Shutdown();
  delete SC_CHANGE_PKMODE_reflection_;
  CS_REBORN_default_instance_.Shutdown();
  delete CS_REBORN_reflection_;
  SC_ITEM_INFO_default_instance_.Shutdown();
  delete SC_ITEM_INFO_reflection_;
  SC_ITEM_CHANGE_default_instance_.Shutdown();
  delete SC_ITEM_CHANGE_reflection_;
  SC_ITEM_CHANGE_ChangeData_default_instance_.Shutdown();
  delete SC_ITEM_CHANGE_ChangeData_reflection_;
  SC_ITEM_DELETE_default_instance_.Shutdown();
  delete SC_ITEM_DELETE_reflection_;
  CS_ITEM_SWAP_default_instance_.Shutdown();
  delete CS_ITEM_SWAP_reflection_;
  CS_ITEM_SPLIT_default_instance_.Shutdown();
  delete CS_ITEM_SPLIT_reflection_;
  CS_ITEM_COMBINE_default_instance_.Shutdown();
  delete CS_ITEM_COMBINE_reflection_;
  CS_ITEM_TIDY_default_instance_.Shutdown();
  delete CS_ITEM_TIDY_reflection_;
  CS_ITEM_USE_default_instance_.Shutdown();
  delete CS_ITEM_USE_reflection_;
  CS_ITEM_STORAGE_OPEN_default_instance_.Shutdown();
  delete CS_ITEM_STORAGE_OPEN_reflection_;
  CS_ITEM_STORAGE_CHECKOUT_default_instance_.Shutdown();
  delete CS_ITEM_STORAGE_CHECKOUT_reflection_;
  CS_ITEM_STORAGE_CHECKIN_default_instance_.Shutdown();
  delete CS_ITEM_STORAGE_CHECKIN_reflection_;
  CS_EQUIP_default_instance_.Shutdown();
  delete CS_EQUIP_reflection_;
  CS_UNEQUIP_default_instance_.Shutdown();
  delete CS_UNEQUIP_reflection_;
  CS_TALK_default_instance_.Shutdown();
  delete CS_TALK_reflection_;
  SC_TALK_default_instance_.Shutdown();
  delete SC_TALK_reflection_;
  SC_TASK_INFO_default_instance_.Shutdown();
  delete SC_TASK_INFO_reflection_;
  SC_TASK_INFO_Info_default_instance_.Shutdown();
  delete SC_TASK_INFO_Info_reflection_;
  SC_TASK_DATA_default_instance_.Shutdown();
  delete SC_TASK_DATA_reflection_;
  CS_TASK_SUBMIT_default_instance_.Shutdown();
  delete CS_TASK_SUBMIT_reflection_;
  CS_ACTIVE_NPC_default_instance_.Shutdown();
  delete CS_ACTIVE_NPC_reflection_;
  SC_DIALOG_default_instance_.Shutdown();
  delete SC_DIALOG_reflection_;
  SC_DIALOG_dialog_link_default_instance_.Shutdown();
  delete SC_DIALOG_dialog_link_reflection_;
  CS_DIALOG_CLICK_default_instance_.Shutdown();
  delete CS_DIALOG_CLICK_reflection_;
  SC_ACHI_INFO_default_instance_.Shutdown();
  delete SC_ACHI_INFO_reflection_;
  SC_ACHI_INFO_Info_default_instance_.Shutdown();
  delete SC_ACHI_INFO_Info_reflection_;
  CS_ACHI_TAKE_default_instance_.Shutdown();
  delete CS_ACHI_TAKE_reflection_;
  CS_TEAMCREATE_default_instance_.Shutdown();
  delete CS_TEAMCREATE_reflection_;
  CS_TEAMQUIT_default_instance_.Shutdown();
  delete CS_TEAMQUIT_reflection_;
  CS_TEAMKICKMEMBER_default_instance_.Shutdown();
  delete CS_TEAMKICKMEMBER_reflection_;
  CS_TEAMINVITEMEMBER_default_instance_.Shutdown();
  delete CS_TEAMINVITEMEMBER_reflection_;
  SC_TEAMINVITEMEMBER_default_instance_.Shutdown();
  delete SC_TEAMINVITEMEMBER_reflection_;
  CS_TEAMACCEPTINVITE_default_instance_.Shutdown();
  delete CS_TEAMACCEPTINVITE_reflection_;
  CS_TEAMNEWLEADER_default_instance_.Shutdown();
  delete CS_TEAMNEWLEADER_reflection_;
  SC_TEAMMEMBER_INFO_default_instance_.Shutdown();
  delete SC_TEAMMEMBER_INFO_reflection_;
  SC_TEAMMEMBER_INFO_MemberInfo_default_instance_.Shutdown();
  delete SC_TEAMMEMBER_INFO_MemberInfo_reflection_;
  SC_TEAMMEMBER_ACTION_default_instance_.Shutdown();
  delete SC_TEAMMEMBER_ACTION_reflection_;
  CS_TEAMAPPLYMEMBER_default_instance_.Shutdown();
  delete CS_TEAMAPPLYMEMBER_reflection_;
  SC_TEAMAPPLYMEMBER_default_instance_.Shutdown();
  delete SC_TEAMAPPLYMEMBER_reflection_;
  CS_TEAMACCEPTAPPLY_default_instance_.Shutdown();
  delete CS_TEAMACCEPTAPPLY_reflection_;
}

void protobuf_InitDefaults_zone_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SC_LOADMAP_default_instance_.DefaultConstruct();
  CS_LOADMAP_SUCC_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_PLAYERINFO_default_instance_.DefaultConstruct();
  SC_ACTORATTRIB_default_instance_.DefaultConstruct();
  SC_COMMONDATA_default_instance_.DefaultConstruct();
  SC_COMMONDATA_Data_default_instance_.DefaultConstruct();
  SC_DATACOUNT_default_instance_.DefaultConstruct();
  SC_DATACOUNT_Data_default_instance_.DefaultConstruct();
  SC_COOLDOWN_default_instance_.DefaultConstruct();
  SC_COOLDOWN_Data_default_instance_.DefaultConstruct();
  SC_SYSVAR_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_SYSVAR_Data_default_instance_.DefaultConstruct();
  SC_ENTERMAP_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_AOI_NEW_default_instance_.DefaultConstruct();
  SC_AOI_REMOVE_default_instance_.DefaultConstruct();
  SC_AOI_UPDATE_default_instance_.DefaultConstruct();
  SC_ATTRIB_CHANGE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_ATTRIB_CHANGE_Data_default_instance_.DefaultConstruct();
  SC_STATUS_LIST_default_instance_.DefaultConstruct();
  SC_STATUS_INFO_default_instance_.DefaultConstruct();
  SC_STATUS_INFO_Data_default_instance_.DefaultConstruct();
  SC_STATUS_ACTION_default_instance_.DefaultConstruct();
  CS_MOVE_default_instance_.DefaultConstruct();
  CS_CHANGEMAP_default_instance_.DefaultConstruct();
  CS_CASTSKILL_default_instance_.DefaultConstruct();
  SC_CASTSKILL_default_instance_.DefaultConstruct();
  SC_SKILL_DAMAGE_default_instance_.DefaultConstruct();
  SC_SKILL_DAMAGE_DamageInfo_default_instance_.DefaultConstruct();
  CS_SKILL_BREAK_default_instance_.DefaultConstruct();
  SC_SKILL_BREAK_default_instance_.DefaultConstruct();
  CS_SKILL_CHGTARGETPOS_default_instance_.DefaultConstruct();
  SC_SKILL_STUN_default_instance_.DefaultConstruct();
  SC_SKILL_EFFACT_default_instance_.DefaultConstruct();
  SC_DAMAGE_default_instance_.DefaultConstruct();
  SC_DEAD_default_instance_.DefaultConstruct();
  CS_CHANGE_PKMODE_default_instance_.DefaultConstruct();
  SC_CHANGE_PKMODE_default_instance_.DefaultConstruct();
  CS_REBORN_default_instance_.DefaultConstruct();
  SC_ITEM_INFO_default_instance_.DefaultConstruct();
  SC_ITEM_CHANGE_default_instance_.DefaultConstruct();
  SC_ITEM_CHANGE_ChangeData_default_instance_.DefaultConstruct();
  SC_ITEM_DELETE_default_instance_.DefaultConstruct();
  CS_ITEM_SWAP_default_instance_.DefaultConstruct();
  CS_ITEM_SPLIT_default_instance_.DefaultConstruct();
  CS_ITEM_COMBINE_default_instance_.DefaultConstruct();
  CS_ITEM_TIDY_default_instance_.DefaultConstruct();
  CS_ITEM_USE_default_instance_.DefaultConstruct();
  CS_ITEM_STORAGE_OPEN_default_instance_.DefaultConstruct();
  CS_ITEM_STORAGE_CHECKOUT_default_instance_.DefaultConstruct();
  CS_ITEM_STORAGE_CHECKIN_default_instance_.DefaultConstruct();
  CS_EQUIP_default_instance_.DefaultConstruct();
  CS_UNEQUIP_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_TALK_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TALK_default_instance_.DefaultConstruct();
  SC_TASK_INFO_default_instance_.DefaultConstruct();
  SC_TASK_INFO_Info_default_instance_.DefaultConstruct();
  SC_TASK_DATA_default_instance_.DefaultConstruct();
  CS_TASK_SUBMIT_default_instance_.DefaultConstruct();
  CS_ACTIVE_NPC_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_DIALOG_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_DIALOG_dialog_link_default_instance_.DefaultConstruct();
  CS_DIALOG_CLICK_default_instance_.DefaultConstruct();
  SC_ACHI_INFO_default_instance_.DefaultConstruct();
  SC_ACHI_INFO_Info_default_instance_.DefaultConstruct();
  CS_ACHI_TAKE_default_instance_.DefaultConstruct();
  CS_TEAMCREATE_default_instance_.DefaultConstruct();
  CS_TEAMQUIT_default_instance_.DefaultConstruct();
  CS_TEAMKICKMEMBER_default_instance_.DefaultConstruct();
  CS_TEAMINVITEMEMBER_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TEAMINVITEMEMBER_default_instance_.DefaultConstruct();
  CS_TEAMACCEPTINVITE_default_instance_.DefaultConstruct();
  CS_TEAMNEWLEADER_default_instance_.DefaultConstruct();
  SC_TEAMMEMBER_INFO_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TEAMMEMBER_INFO_MemberInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TEAMMEMBER_ACTION_default_instance_.DefaultConstruct();
  CS_TEAMAPPLYMEMBER_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TEAMAPPLYMEMBER_default_instance_.DefaultConstruct();
  CS_TEAMACCEPTAPPLY_default_instance_.DefaultConstruct();
  SC_LOADMAP_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_LOADMAP_SUCC_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_PLAYERINFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ACTORATTRIB_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_COMMONDATA_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_COMMONDATA_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DATACOUNT_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DATACOUNT_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_COOLDOWN_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_COOLDOWN_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SYSVAR_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SYSVAR_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ENTERMAP_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_AOI_NEW_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_AOI_REMOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_AOI_UPDATE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ATTRIB_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ATTRIB_CHANGE_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_STATUS_LIST_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_STATUS_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_STATUS_INFO_Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_STATUS_ACTION_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_MOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_CHANGEMAP_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_CASTSKILL_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_CASTSKILL_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SKILL_DAMAGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SKILL_DAMAGE_DamageInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_SKILL_BREAK_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SKILL_BREAK_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_SKILL_CHGTARGETPOS_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SKILL_STUN_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SKILL_EFFACT_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DAMAGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DEAD_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_CHANGE_PKMODE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_CHANGE_PKMODE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_REBORN_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ITEM_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ITEM_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ITEM_CHANGE_ChangeData_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ITEM_DELETE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_SWAP_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_SPLIT_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_COMBINE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_TIDY_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_USE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_STORAGE_OPEN_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_STORAGE_CHECKOUT_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ITEM_STORAGE_CHECKIN_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_EQUIP_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_UNEQUIP_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TALK_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TALK_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TASK_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TASK_INFO_Info_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TASK_DATA_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TASK_SUBMIT_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ACTIVE_NPC_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DIALOG_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DIALOG_dialog_link_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_DIALOG_CLICK_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ACHI_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ACHI_INFO_Info_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ACHI_TAKE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMCREATE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMQUIT_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMKICKMEMBER_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMINVITEMEMBER_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TEAMINVITEMEMBER_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMACCEPTINVITE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMNEWLEADER_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TEAMMEMBER_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TEAMMEMBER_INFO_MemberInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TEAMMEMBER_ACTION_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMAPPLYMEMBER_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TEAMAPPLYMEMBER_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TEAMACCEPTAPPLY_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_zone_5fservice_2eproto_once_);
void protobuf_InitDefaults_zone_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_zone_5fservice_2eproto_once_,
                 &protobuf_InitDefaults_zone_5fservice_2eproto_impl);
}
void protobuf_AddDesc_zone_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_zone_5fservice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022zone_service.proto\"E\n\nSC_LOADMAP\022\r\n\005ma"
    "pid\030\001 \001(\r\022\014\n\004posx\030\003 \001(\002\022\014\n\004posy\030\004 \001(\002\022\014\n"
    "\004face\030\005 \001(\002\"\021\n\017CS_LOADMAP_SUCC\"\351\002\n\rSC_PL"
    "AYERINFO\022\020\n\010playerid\030\001 \001(\004\022\017\n\007worldid\030\002 "
    "\001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004prof\030\004 \001(\r\022\020\n\010basel"
    "ook\030\005 \001(\r\022\013\n\003exp\030\006 \001(\r\022\r\n\005level\030\007 \001(\r\022\016\n"
    "\006viplev\030\010 \001(\r\022\r\n\005pkval\030\t \001(\r\022\r\n\005honor\030\n "
    "\001(\r\022\016\n\006campid\030\013 \001(\r\022\r\n\005money\030\014 \001(\r\022\022\n\nmo"
    "ney_bind\030\r \001(\r\022\014\n\004gold\030\016 \001(\r\022\021\n\tgold_bin"
    "d\030\017 \001(\r\022\020\n\010bag_size\030\020 \001(\r\022\023\n\013stroge_size"
    "\030\021 \001(\r\022\022\n\nachi_point\030\022 \001(\r\022\n\n\002hp\030\036 \001(\r\022\n"
    "\n\002mp\030\037 \001(\r\022\n\n\002fp\030  \001(\r\022\n\n\002np\030! \001(\r\"%\n\016SC"
    "_ACTORATTRIB\022\023\n\013attrib_list\030\001 \003(\r\"\212\001\n\rSC"
    "_COMMONDATA\022%\n\010datalist\030\001 \003(\0132\023.SC_COMMO"
    "NDATA.Data\032R\n\004Data\022\016\n\006keyidx\030\001 \001(\r\022\r\n\005da"
    "ta0\030\002 \001(\004\022\r\n\005data1\030\003 \001(\004\022\r\n\005data2\030\004 \001(\004\022"
    "\r\n\005data3\030\005 \001(\004\"~\n\014SC_DATACOUNT\022$\n\010datali"
    "st\030\001 \003(\0132\022.SC_DATACOUNT.Data\032H\n\004Data\022\014\n\004"
    "type\030\001 \001(\r\022\013\n\003idx\030\002 \001(\r\022\014\n\004data\030\003 \001(\004\022\027\n"
    "\017last_reset_time\030\004 \001(\r\"i\n\013SC_COOLDOWN\022#\n"
    "\010datalist\030\001 \003(\0132\021.SC_COOLDOWN.Data\0325\n\004Da"
    "ta\022\014\n\004type\030\001 \001(\r\022\013\n\003idx\030\002 \001(\r\022\022\n\nexpiret"
    "ime\030\003 \001(\r\"\273\001\n\tSC_SYSVAR\022!\n\010datalist\030\001 \003("
    "\0132\017.SC_SYSVAR.Data\032\212\001\n\004Data\022\016\n\006keyidx\030\001 "
    "\001(\r\022\r\n\005data0\030\002 \001(\004\022\r\n\005data1\030\003 \001(\004\022\r\n\005dat"
    "a2\030\004 \001(\004\022\r\n\005data3\030\005 \001(\004\022\014\n\004str0\030\006 \001(\t\022\014\n"
    "\004str1\030\007 \001(\t\022\014\n\004str2\030\010 \001(\t\022\014\n\004str3\030\t \001(\t\""
    "1\n\013SC_ENTERMAP\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\014\n\004"
    "face\030\003 \001(\002\"\271\002\n\nSC_AOI_NEW\022\r\n\005mapid\030\001 \001(\r"
    "\022\020\n\010actor_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\021\n\tacto"
    "rtype\030\004 \001(\r\022\020\n\010baselook\030\005 \001(\r\022\014\n\004prof\030\006 "
    "\001(\r\022\013\n\003lev\030\007 \001(\r\022\016\n\006campid\030\010 \001(\r\022\n\n\002hp\030\t"
    " \001(\r\022\r\n\005hpmax\030\n \001(\r\022\017\n\007movespd\030\013 \001(\r\022\017\n\007"
    "ownerid\030\014 \001(\004\022\014\n\004posx\030\r \001(\002\022\014\n\004posy\030\016 \001("
    "\002\022\014\n\004face\030\017 \001(\002\022\020\n\010weaponid\030\024 \001(\r\022\017\n\007arm"
    "orid\030\025 \001(\r\022\017\n\007guildid\030\036 \001(\r\022\021\n\tguildname"
    "\030\037 \001(\t\".\n\rSC_AOI_REMOVE\022\r\n\005mapid\030\001 \001(\r\022\016"
    "\n\006idlist\030\002 \003(\004\"L\n\rSC_AOI_UPDATE\022\r\n\005mapid"
    "\030\001 \001(\r\022\020\n\010actor_id\030\002 \001(\004\022\014\n\004posx\030\003 \001(\002\022\014"
    "\n\004posy\030\004 \001(\002\"\203\001\n\020SC_ATTRIB_CHANGE\022\020\n\010act"
    "or_id\030\001 \001(\004\022(\n\010datalist\030\002 \003(\0132\026.SC_ATTRI"
    "B_CHANGE.Data\0323\n\004Data\022\016\n\006actype\030\001 \001(\r\022\013\n"
    "\003val\030\002 \001(\r\022\016\n\006valstr\030\003 \001(\t\"W\n\016SC_STATUS_"
    "LIST\022\020\n\010actor_id\030\001 \001(\004\022\032\n\022status_typeid_"
    "list\030\002 \003(\r\022\027\n\017status_lev_list\030\003 \003(\r\"\333\001\n\016"
    "SC_STATUS_INFO\022\020\n\010actor_id\030\001 \001(\004\022(\n\nstat"
    "uslist\030\002 \003(\0132\024.SC_STATUS_INFO.Data\032\214\001\n\004D"
    "ata\022\020\n\010statusid\030\001 \001(\r\022\021\n\tstatuslev\030\002 \001(\r"
    "\022\r\n\005power\030\003 \001(\005\022\013\n\003sec\030\004 \001(\005\022\r\n\005times\030\005 "
    "\001(\005\022\021\n\tlaststamp\030\006 \001(\r\022\020\n\010idcaster\030\007 \001(\004"
    "\022\017\n\007ispause\030\010 \001(\010\"\266\001\n\020SC_STATUS_ACTION\022\020"
    "\n\010actor_id\030\001 \001(\004\022(\n\006action\030\002 \001(\0162\030.SC_ST"
    "ATUS_ACTION.ACTION\022\020\n\010statusid\030\003 \001(\r\022\021\n\t"
    "statuslev\030\004 \001(\r\"A\n\006ACTION\022\021\n\rSTATUS_ATTA"
    "CH\020\000\022\021\n\rSTATUS_DETACH\020\001\022\021\n\rSTATUS_EFFECT"
    "\020\002\"<\n\007CS_MOVE\022\r\n\005mapid\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022"
    "\t\n\001y\030\003 \001(\002\022\014\n\004face\030\004 \001(\002\"5\n\014CS_CHANGEMAP"
    "\022\r\n\005mapid\030\001 \001(\004\022\026\n\016leavepoint_idx\030\002 \001(\r\""
    "X\n\014CS_CASTSKILL\022\r\n\005mapid\030\001 \001(\004\022\020\n\010skill_"
    "id\030\002 \001(\r\022\021\n\ttarget_id\030\003 \001(\004\022\t\n\001x\030\004 \001(\002\022\t"
    "\n\001y\030\005 \001(\002\"j\n\014SC_CASTSKILL\022\r\n\005mapid\030\001 \001(\004"
    "\022\020\n\010actor_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\022\021\n\t"
    "target_id\030\004 \001(\004\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002\"\246\001"
    "\n\017SC_SKILL_DAMAGE\022\r\n\005mapid\030\001 \001(\004\022\020\n\010acto"
    "r_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\022/\n\ndamageli"
    "st\030\005 \003(\0132\033.SC_SKILL_DAMAGE.DamageInfo\032/\n"
    "\nDamageInfo\022\021\n\ttarget_id\030\001 \001(\004\022\016\n\006damage"
    "\030\002 \001(\005\"\037\n\016CS_SKILL_BREAK\022\r\n\005mapid\030\001 \001(\004\""
    "1\n\016SC_SKILL_BREAK\022\r\n\005mapid\030\001 \001(\004\022\020\n\010acto"
    "r_id\030\002 \001(\004\"-\n\025CS_SKILL_CHGTARGETPOS\022\t\n\001x"
    "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"S\n\rSC_SKILL_STUN\022\r\n\005ma"
    "pid\030\001 \001(\004\022\020\n\010actor_id\030\002 \001(\004\022\020\n\010skill_id\030"
    "\003 \001(\r\022\017\n\007stun_ms\030\004 \001(\r\"D\n\017SC_SKILL_EFFAC"
    "T\022\r\n\005mapid\030\001 \001(\004\022\020\n\010actor_id\030\002 \001(\004\022\020\n\010sk"
    "ill_id\030\003 \001(\r\"d\n\tSC_DAMAGE\022\020\n\010actor_id\030\001 "
    "\001(\004\022\023\n\013attacker_id\030\002 \001(\004\022\016\n\006damage\030\003 \001(\r"
    "\022\017\n\007hittype\030\004 \001(\r\022\017\n\007crtical\030\005 \001(\010\"0\n\007SC"
    "_DEAD\022\020\n\010actor_id\030\001 \001(\004\022\023\n\013attacker_id\030\002"
    " \001(\004\"\"\n\020CS_CHANGE_PKMODE\022\016\n\006pkmode\030\001 \001(\r"
    "\"\"\n\020SC_CHANGE_PKMODE\022\016\n\006pkmode\030\001 \001(\r\" \n\t"
    "CS_REBORN\022\023\n\013reborn_type\030\001 \001(\r\"\276\001\n\014SC_IT"
    "EM_INFO\022\020\n\010actor_id\030\001 \001(\004\022\017\n\007item_id\030\002 \001"
    "(\004\022\020\n\010position\030\003 \001(\r\022\014\n\004grid\030\004 \001(\r\022\020\n\010pi"
    "le_num\030\005 \001(\r\022\014\n\004dura\030\006 \001(\r\022\022\n\ndura_limit"
    "\030\007 \001(\r\022\023\n\013expire_time\030\010 \001(\r\022\024\n\014addition_"
    "lev\030\t \001(\r\022\014\n\004flag\030\n \001(\r\"\236\002\n\016SC_ITEM_CHAN"
    "GE\022\017\n\007item_id\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\022/\n"
    "\013change_list\030\003 \003(\0132\032.SC_ITEM_CHANGE.Chan"
    "geData\032L\n\nChangeData\022/\n\013change_type\030\001 \001("
    "\0162\032.SC_ITEM_CHANGE.ChangeType\022\r\n\005value\030\002"
    " \001(\r\"j\n\nChangeType\022\016\n\nChangeGrid\020\000\022\021\n\rCh"
    "angePileNum\020\001\022\024\n\020ChangeExpireData\020\002\022\016\n\nC"
    "hangeDura\020\003\022\023\n\017ChangeDuraLimit\020\004\"A\n\016SC_I"
    "TEM_DELETE\022\017\n\007item_id\030\001 \001(\004\022\020\n\010position\030"
    "\002 \001(\r\022\014\n\004grid\030\003 \001(\r\">\n\014CS_ITEM_SWAP\022\020\n\010p"
    "osition\030\001 \001(\r\022\r\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003 "
    "\001(\r\"R\n\rCS_ITEM_SPLIT\022\020\n\010position\030\001 \001(\r\022\r"
    "\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003 \001(\r\022\021\n\tsplit_nu"
    "m\030\004 \001(\r\"A\n\017CS_ITEM_COMBINE\022\020\n\010position\030\001"
    " \001(\r\022\r\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003 \001(\r\" \n\014CS"
    "_ITEM_TIDY\022\020\n\010position\030\001 \001(\r\"*\n\013CS_ITEM_"
    "USE\022\014\n\004grid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"\026\n\024CS_I"
    "TEM_STORAGE_OPEN\"3\n\030CS_ITEM_STORAGE_CHEC"
    "KOUT\022\027\n\017grid_in_storage\030\001 \001(\r\"2\n\027CS_ITEM"
    "_STORAGE_CHECKIN\022\027\n\017grid_in_package\030\001 \001("
    "\r\":\n\010CS_EQUIP\022\027\n\017grid_in_package\030\001 \001(\r\022\025"
    "\n\rgrid_in_equip\030\002 \001(\r\"#\n\nCS_UNEQUIP\022\025\n\rg"
    "rid_in_equip\030\001 \001(\r\"K\n\007CS_TALK\022\035\n\007channel"
    "\030\001 \001(\0162\014.TalkChannel\022\r\n\005words\030\002 \001(\t\022\022\n\nr"
    "eciver_id\030\003 \001(\004\"\324\001\n\007SC_TALK\022\035\n\007channel\030\001"
    " \001(\0162\014.TalkChannel\022\r\n\005words\030\002 \001(\t\022\021\n\tsen"
    "der_id\030\004 \001(\004\022\023\n\013sender_name\030\005 \001(\t\022\023\n\013sen"
    "der_sign\030\006 \001(\r\022\025\n\rsender_viplev\030\007 \001(\r\022\021\n"
    "\tsend_time\030\010 \001(\r\022\022\n\nreciver_id\030\t \001(\004\022 \n\t"
    "item_list\030\024 \003(\0132\r.SC_ITEM_INFO\"\202\002\n\014SC_TA"
    "SK_INFO\022*\n\016task_info_list\030\001 \003(\0132\022.SC_TAS"
    "K_INFO.Info\032\305\001\n\004Info\022\017\n\007task_id\030\001 \001(\004\022\023\n"
    "\013accept_time\030\002 \001(\r\022\023\n\013finish_time\030\003 \001(\r\022"
    "\023\n\013expire_time\030\004 \001(\r\022\020\n\010daycount\030\005 \001(\r\022\024"
    "\n\014daycount_max\030\006 \001(\r\022\r\n\005state\030\007 \001(\r\022\014\n\004n"
    "um1\030\n \001(\r\022\014\n\004num2\030\013 \001(\r\022\014\n\004num3\030\014 \001(\r\022\014\n"
    "\004num4\030\r \001(\r\"9\n\014SC_TASK_DATA\022\017\n\007task_id\030\001"
    " \001(\004\022\013\n\003idx\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\":\n\016CS_TAS"
    "K_SUBMIT\022\017\n\007task_id\030\001 \001(\004\022\027\n\017submit_mult"
    "iple\030\002 \001(\r\"\037\n\rCS_ACTIVE_NPC\022\016\n\006npc_id\030\001 "
    "\001(\004\"\272\001\n\tSC_DIALOG\022\021\n\tdialog_id\030\001 \001(\004\022\023\n\013"
    "dialog_type\030\002 \001(\r\022\024\n\014dialog_title\030\003 \001(\t\022"
    "\022\n\ndialog_txt\030\004 \003(\t\0220\n\020dialog_link_list\030"
    "\005 \003(\0132\026.SC_DIALOG.dialog_link\032)\n\013dialog_"
    "link\022\r\n\005style\030\001 \001(\r\022\013\n\003txt\030\002 \001(\t\"\?\n\017CS_D"
    "IALOG_CLICK\022\021\n\tdialog_id\030\001 \001(\004\022\031\n\021dialog"
    "_button_idx\030\002 \001(\r\"^\n\014SC_ACHI_INFO\022\'\n\013fin"
    "ish_list\030\001 \003(\0132\022.SC_ACHI_INFO.Info\032%\n\004In"
    "fo\022\017\n\007achi_id\030\001 \001(\r\022\014\n\004take\030\002 \001(\r\"\037\n\014CS_"
    "ACHI_TAKE\022\017\n\007achi_id\030\001 \001(\r\"\017\n\rCS_TEAMCRE"
    "ATE\"\r\n\013CS_TEAMQUIT\"&\n\021CS_TEAMKICKMEMBER\022"
    "\021\n\tmember_id\030\001 \001(\004\")\n\023CS_TEAMINVITEMEMBE"
    "R\022\022\n\ninvitee_id\030\001 \001(\004\"P\n\023SC_TEAMINVITEME"
    "MBER\022\017\n\007team_id\030\001 \001(\004\022\022\n\ninviter_id\030\002 \001("
    "\004\022\024\n\014inviter_name\030\003 \001(\t\"J\n\023CS_TEAMACCEPT"
    "INVITE\022\017\n\007team_id\030\001 \001(\004\022\022\n\ninviter_id\030\002 "
    "\001(\004\022\016\n\006result\030\003 \001(\010\")\n\020CS_TEAMNEWLEADER\022"
    "\025\n\rnew_leader_id\030\002 \001(\004\"\252\001\n\022SC_TEAMMEMBER"
    "_INFO\0223\n\013member_list\030\001 \003(\0132\036.SC_TEAMMEMB"
    "ER_INFO.MemberInfo\032_\n\nMemberInfo\022\021\n\tmemb"
    "er_id\030\001 \001(\004\022\022\n\nmember_lev\030\002 \001(\r\022\025\n\rmembe"
    "r_online\030\003 \001(\010\022\023\n\013member_name\030\004 \001(\t\"\370\002\n\024"
    "SC_TEAMMEMBER_ACTION\022,\n\006action\030\001 \001(\0162\034.S"
    "C_TEAMMEMBER_ACTION.Action\022\023\n\013operator_i"
    "d\030\002 \001(\004\022\021\n\tmember_id\030\003 \001(\004\022\022\n\nmember_lev"
    "\030\004 \001(\r\022\023\n\013member_name\030\005 \001(\t\022\025\n\rmember_on"
    "line\030\006 \001(\010\"\311\001\n\006Action\022\017\n\013TEAM_CREATE\020\000\022\020"
    "\n\014TEAM_DESTORY\020\001\022\021\n\rTEAM_ADDMEBER\020\002\022\026\n\022T"
    "EAM_CHANGE_LEADER\020\003\022\r\n\tTEAM_QUIT\020\004\022\023\n\017TE"
    "AM_KICKMEMBER\020\005\022\027\n\023TEAM_MEMBER_LEV_CHG\020\006"
    "\022\030\n\024TEAM_MEMBER_NAME_CHG\020\007\022\032\n\026TEAM_MEMBE"
    "R_ONLINE_CHG\020\010\"+\n\022CS_TEAMAPPLYMEMBER\022\025\n\r"
    "respondent_id\030\001 \001(\004\"B\n\022SC_TEAMAPPLYMEMBE"
    "R\022\024\n\014applicant_id\030\001 \001(\004\022\026\n\016applicant_nam"
    "e\030\002 \001(\t\":\n\022CS_TEAMACCEPTAPPLY\022\024\n\014applica"
    "nt_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\010*\321\001\n\013TalkChan"
    "nel\022\022\n\016CHANNEL_NORMAL\020\000\022\021\n\rCHANNEL_SCENE"
    "\020\001\022\023\n\017CHANNEL_PRIVATE\020\002\022\020\n\014CHANNEL_TEAM\020"
    "\003\022\021\n\rCHANNEL_GUILD\020\004\022\021\n\rCHANNEL_WORLD\020\005\022"
    "\023\n\017CHANNEL_TRUMPET\020\006\022\022\n\016CHANNEL_GLOBAL\020\007"
    "\022\022\n\016CHANNEL_SYSTEM\020\010\022\021\n\rCHANNEL_RUMOR\020\t*"
    "j\n\tTaskState\022\027\n\023TASKSTATE_NOTACCEPT\020\000\022\026\n"
    "\022TASKSTATE_ACCEPTED\020\001\022\024\n\020TASKSTATE_GIVEU"
    "P\020\002\022\026\n\022TASKSTATE_FINISHED\020\003b\006proto3", 6755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zone_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zone_5fservice_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_zone_5fservice_2eproto_once_);
void protobuf_AddDesc_zone_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_zone_5fservice_2eproto_once_,
                 &protobuf_AddDesc_zone_5fservice_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zone_5fservice_2eproto {
  StaticDescriptorInitializer_zone_5fservice_2eproto() {
    protobuf_AddDesc_zone_5fservice_2eproto();
  }
} static_descriptor_initializer_zone_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* TalkChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkChannel_descriptor_;
}
bool TalkChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}
bool TaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LOADMAP::kMapidFieldNumber;
const int SC_LOADMAP::kPosxFieldNumber;
const int SC_LOADMAP::kPosyFieldNumber;
const int SC_LOADMAP::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LOADMAP::SC_LOADMAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LOADMAP)
}

void SC_LOADMAP::InitAsDefaultInstance() {
}

SC_LOADMAP::SC_LOADMAP(const SC_LOADMAP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_LOADMAP)
}

void SC_LOADMAP::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(face_));
  _cached_size_ = 0;
}

SC_LOADMAP::~SC_LOADMAP() {
  // @@protoc_insertion_point(destructor:SC_LOADMAP)
  SharedDtor();
}

void SC_LOADMAP::SharedDtor() {
}

void SC_LOADMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LOADMAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LOADMAP_descriptor_;
}

const SC_LOADMAP& SC_LOADMAP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_LOADMAP> SC_LOADMAP_default_instance_;

SC_LOADMAP* SC_LOADMAP::New(::google::protobuf::Arena* arena) const {
  SC_LOADMAP* n = new SC_LOADMAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LOADMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LOADMAP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_LOADMAP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_LOADMAP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, face_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_LOADMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LOADMAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_posx;
        break;
      }

      // optional float posx = 3;
      case 3: {
        if (tag == 29) {
         parse_posx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }

      // optional float posy = 4;
      case 4: {
        if (tag == 37) {
         parse_posy:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_face;
        break;
      }

      // optional float face = 5;
      case 5: {
        if (tag == 45) {
         parse_face:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LOADMAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LOADMAP)
  return false;
#undef DO_
}

void SC_LOADMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LOADMAP)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // optional float face = 5;
  if (this->face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->face(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_LOADMAP)
}

::google::protobuf::uint8* SC_LOADMAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_LOADMAP)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // optional float face = 5;
  if (this->face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->face(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_LOADMAP)
  return target;
}

size_t SC_LOADMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LOADMAP)
  size_t total_size = 0;

  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapid());
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    total_size += 1 + 4;
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    total_size += 1 + 4;
  }

  // optional float face = 5;
  if (this->face() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LOADMAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LOADMAP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_LOADMAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LOADMAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LOADMAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LOADMAP)
    UnsafeMergeFrom(*source);
  }
}

void SC_LOADMAP::MergeFrom(const SC_LOADMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LOADMAP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_LOADMAP::UnsafeMergeFrom(const SC_LOADMAP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.face() != 0) {
    set_face(from.face());
  }
}

void SC_LOADMAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LOADMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOADMAP::CopyFrom(const SC_LOADMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LOADMAP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_LOADMAP::IsInitialized() const {

  return true;
}

void SC_LOADMAP::Swap(SC_LOADMAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LOADMAP::InternalSwap(SC_LOADMAP* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(face_, other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LOADMAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LOADMAP_descriptor_;
  metadata.reflection = SC_LOADMAP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LOADMAP

// optional uint32 mapid = 1;
void SC_LOADMAP::clear_mapid() {
  mapid_ = 0u;
}
::google::protobuf::uint32 SC_LOADMAP::mapid() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.mapid)
  return mapid_;
}
void SC_LOADMAP::set_mapid(::google::protobuf::uint32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_LOADMAP.mapid)
}

// optional float posx = 3;
void SC_LOADMAP::clear_posx() {
  posx_ = 0;
}
float SC_LOADMAP::posx() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.posx)
  return posx_;
}
void SC_LOADMAP::set_posx(float value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:SC_LOADMAP.posx)
}

// optional float posy = 4;
void SC_LOADMAP::clear_posy() {
  posy_ = 0;
}
float SC_LOADMAP::posy() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.posy)
  return posy_;
}
void SC_LOADMAP::set_posy(float value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:SC_LOADMAP.posy)
}

// optional float face = 5;
void SC_LOADMAP::clear_face() {
  face_ = 0;
}
float SC_LOADMAP::face() const {
  // @@protoc_insertion_point(field_get:SC_LOADMAP.face)
  return face_;
}
void SC_LOADMAP::set_face(float value) {
  
  face_ = value;
  // @@protoc_insertion_point(field_set:SC_LOADMAP.face)
}

inline const SC_LOADMAP* SC_LOADMAP::internal_default_instance() {
  return &SC_LOADMAP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LOADMAP_SUCC::CS_LOADMAP_SUCC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LOADMAP_SUCC)
}

void CS_LOADMAP_SUCC::InitAsDefaultInstance() {
}

CS_LOADMAP_SUCC::CS_LOADMAP_SUCC(const CS_LOADMAP_SUCC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_LOADMAP_SUCC)
}

void CS_LOADMAP_SUCC::SharedCtor() {
  _cached_size_ = 0;
}

CS_LOADMAP_SUCC::~CS_LOADMAP_SUCC() {
  // @@protoc_insertion_point(destructor:CS_LOADMAP_SUCC)
  SharedDtor();
}

void CS_LOADMAP_SUCC::SharedDtor() {
}

void CS_LOADMAP_SUCC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LOADMAP_SUCC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LOADMAP_SUCC_descriptor_;
}

const CS_LOADMAP_SUCC& CS_LOADMAP_SUCC::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_LOADMAP_SUCC> CS_LOADMAP_SUCC_default_instance_;

CS_LOADMAP_SUCC* CS_LOADMAP_SUCC::New(::google::protobuf::Arena* arena) const {
  CS_LOADMAP_SUCC* n = new CS_LOADMAP_SUCC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LOADMAP_SUCC::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOADMAP_SUCC)
}

bool CS_LOADMAP_SUCC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LOADMAP_SUCC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LOADMAP_SUCC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LOADMAP_SUCC)
  return false;
#undef DO_
}

void CS_LOADMAP_SUCC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LOADMAP_SUCC)
  // @@protoc_insertion_point(serialize_end:CS_LOADMAP_SUCC)
}

::google::protobuf::uint8* CS_LOADMAP_SUCC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOADMAP_SUCC)
  // @@protoc_insertion_point(serialize_to_array_end:CS_LOADMAP_SUCC)
  return target;
}

size_t CS_LOADMAP_SUCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOADMAP_SUCC)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LOADMAP_SUCC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LOADMAP_SUCC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_LOADMAP_SUCC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LOADMAP_SUCC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LOADMAP_SUCC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LOADMAP_SUCC)
    UnsafeMergeFrom(*source);
  }
}

void CS_LOADMAP_SUCC::MergeFrom(const CS_LOADMAP_SUCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LOADMAP_SUCC)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_LOADMAP_SUCC::UnsafeMergeFrom(const CS_LOADMAP_SUCC& from) {
  GOOGLE_DCHECK(&from != this);
}

void CS_LOADMAP_SUCC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LOADMAP_SUCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOADMAP_SUCC::CopyFrom(const CS_LOADMAP_SUCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOADMAP_SUCC)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_LOADMAP_SUCC::IsInitialized() const {

  return true;
}

void CS_LOADMAP_SUCC::Swap(CS_LOADMAP_SUCC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LOADMAP_SUCC::InternalSwap(CS_LOADMAP_SUCC* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LOADMAP_SUCC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LOADMAP_SUCC_descriptor_;
  metadata.reflection = CS_LOADMAP_SUCC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LOADMAP_SUCC

inline const CS_LOADMAP_SUCC* CS_LOADMAP_SUCC::internal_default_instance() {
  return &CS_LOADMAP_SUCC_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_PLAYERINFO::kPlayeridFieldNumber;
const int SC_PLAYERINFO::kWorldidFieldNumber;
const int SC_PLAYERINFO::kNameFieldNumber;
const int SC_PLAYERINFO::kProfFieldNumber;
const int SC_PLAYERINFO::kBaselookFieldNumber;
const int SC_PLAYERINFO::kExpFieldNumber;
const int SC_PLAYERINFO::kLevelFieldNumber;
const int SC_PLAYERINFO::kViplevFieldNumber;
const int SC_PLAYERINFO::kPkvalFieldNumber;
const int SC_PLAYERINFO::kHonorFieldNumber;
const int SC_PLAYERINFO::kCampidFieldNumber;
const int SC_PLAYERINFO::kMoneyFieldNumber;
const int SC_PLAYERINFO::kMoneyBindFieldNumber;
const int SC_PLAYERINFO::kGoldFieldNumber;
const int SC_PLAYERINFO::kGoldBindFieldNumber;
const int SC_PLAYERINFO::kBagSizeFieldNumber;
const int SC_PLAYERINFO::kStrogeSizeFieldNumber;
const int SC_PLAYERINFO::kAchiPointFieldNumber;
const int SC_PLAYERINFO::kHpFieldNumber;
const int SC_PLAYERINFO::kMpFieldNumber;
const int SC_PLAYERINFO::kFpFieldNumber;
const int SC_PLAYERINFO::kNpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_PLAYERINFO::SC_PLAYERINFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_PLAYERINFO)
}

void SC_PLAYERINFO::InitAsDefaultInstance() {
}

SC_PLAYERINFO::SC_PLAYERINFO(const SC_PLAYERINFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_PLAYERINFO)
}

void SC_PLAYERINFO::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&np_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(np_));
  _cached_size_ = 0;
}

SC_PLAYERINFO::~SC_PLAYERINFO() {
  // @@protoc_insertion_point(destructor:SC_PLAYERINFO)
  SharedDtor();
}

void SC_PLAYERINFO::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_PLAYERINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PLAYERINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_PLAYERINFO_descriptor_;
}

const SC_PLAYERINFO& SC_PLAYERINFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_PLAYERINFO> SC_PLAYERINFO_default_instance_;

SC_PLAYERINFO* SC_PLAYERINFO::New(::google::protobuf::Arena* arena) const {
  SC_PLAYERINFO* n = new SC_PLAYERINFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_PLAYERINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_PLAYERINFO)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_PLAYERINFO, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_PLAYERINFO*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, viplev_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(pkval_, bag_size_);
  ZR_(stroge_size_, np_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_PLAYERINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_PLAYERINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        break;
      }

      // optional uint32 worldid = 2;
      case 2: {
        if (tag == 16) {
         parse_worldid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_PLAYERINFO.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (tag == 32) {
         parse_prof:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baselook;
        break;
      }

      // optional uint32 baselook = 5;
      case 5: {
        if (tag == 40) {
         parse_baselook:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselook_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_viplev;
        break;
      }

      // optional uint32 viplev = 8;
      case 8: {
        if (tag == 64) {
         parse_viplev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pkval;
        break;
      }

      // optional uint32 pkval = 9;
      case 9: {
        if (tag == 72) {
         parse_pkval:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 10;
      case 10: {
        if (tag == 80) {
         parse_honor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_campid;
        break;
      }

      // optional uint32 campid = 11;
      case 11: {
        if (tag == 88) {
         parse_campid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_money;
        break;
      }

      // optional uint32 money = 12;
      case 12: {
        if (tag == 96) {
         parse_money:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_money_bind;
        break;
      }

      // optional uint32 money_bind = 13;
      case 13: {
        if (tag == 104) {
         parse_money_bind:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_bind_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 14;
      case 14: {
        if (tag == 112) {
         parse_gold:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gold_bind;
        break;
      }

      // optional uint32 gold_bind = 15;
      case 15: {
        if (tag == 120) {
         parse_gold_bind:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_bind_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_bag_size;
        break;
      }

      // optional uint32 bag_size = 16;
      case 16: {
        if (tag == 128) {
         parse_bag_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_stroge_size;
        break;
      }

      // optional uint32 stroge_size = 17;
      case 17: {
        if (tag == 136) {
         parse_stroge_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroge_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_achi_point;
        break;
      }

      // optional uint32 achi_point = 18;
      case 18: {
        if (tag == 144) {
         parse_achi_point:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achi_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 30;
      case 30: {
        if (tag == 240) {
         parse_hp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 31;
      case 31: {
        if (tag == 248) {
         parse_mp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_fp;
        break;
      }

      // optional uint32 fp = 32;
      case 32: {
        if (tag == 256) {
         parse_fp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_np;
        break;
      }

      // optional uint32 np = 33;
      case 33: {
        if (tag == 264) {
         parse_np:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &np_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_PLAYERINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_PLAYERINFO)
  return false;
#undef DO_
}

void SC_PLAYERINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_PLAYERINFO)
  // optional uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint32 worldid = 2;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worldid(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_PLAYERINFO.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 prof = 4;
  if (this->prof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->baselook(), output);
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 viplev = 8;
  if (this->viplev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viplev(), output);
  }

  // optional uint32 pkval = 9;
  if (this->pkval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pkval(), output);
  }

  // optional uint32 honor = 10;
  if (this->honor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->honor(), output);
  }

  // optional uint32 campid = 11;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->campid(), output);
  }

  // optional uint32 money = 12;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->money(), output);
  }

  // optional uint32 money_bind = 13;
  if (this->money_bind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->money_bind(), output);
  }

  // optional uint32 gold = 14;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gold(), output);
  }

  // optional uint32 gold_bind = 15;
  if (this->gold_bind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gold_bind(), output);
  }

  // optional uint32 bag_size = 16;
  if (this->bag_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bag_size(), output);
  }

  // optional uint32 stroge_size = 17;
  if (this->stroge_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->stroge_size(), output);
  }

  // optional uint32 achi_point = 18;
  if (this->achi_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->achi_point(), output);
  }

  // optional uint32 hp = 30;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->hp(), output);
  }

  // optional uint32 mp = 31;
  if (this->mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->mp(), output);
  }

  // optional uint32 fp = 32;
  if (this->fp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->fp(), output);
  }

  // optional uint32 np = 33;
  if (this->np() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->np(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_PLAYERINFO)
}

::google::protobuf::uint8* SC_PLAYERINFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_PLAYERINFO)
  // optional uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint32 worldid = 2;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worldid(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_PLAYERINFO.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 prof = 4;
  if (this->prof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->baselook(), target);
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 viplev = 8;
  if (this->viplev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viplev(), target);
  }

  // optional uint32 pkval = 9;
  if (this->pkval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pkval(), target);
  }

  // optional uint32 honor = 10;
  if (this->honor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->honor(), target);
  }

  // optional uint32 campid = 11;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->campid(), target);
  }

  // optional uint32 money = 12;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->money(), target);
  }

  // optional uint32 money_bind = 13;
  if (this->money_bind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->money_bind(), target);
  }

  // optional uint32 gold = 14;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gold(), target);
  }

  // optional uint32 gold_bind = 15;
  if (this->gold_bind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gold_bind(), target);
  }

  // optional uint32 bag_size = 16;
  if (this->bag_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bag_size(), target);
  }

  // optional uint32 stroge_size = 17;
  if (this->stroge_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->stroge_size(), target);
  }

  // optional uint32 achi_point = 18;
  if (this->achi_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->achi_point(), target);
  }

  // optional uint32 hp = 30;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->hp(), target);
  }

  // optional uint32 mp = 31;
  if (this->mp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->mp(), target);
  }

  // optional uint32 fp = 32;
  if (this->fp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->fp(), target);
  }

  // optional uint32 np = 33;
  if (this->np() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->np(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_PLAYERINFO)
  return target;
}

size_t SC_PLAYERINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_PLAYERINFO)
  size_t total_size = 0;

  // optional uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 worldid = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldid());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 prof = 4;
  if (this->prof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prof());
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baselook());
  }

  // optional uint32 exp = 6;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 viplev = 8;
  if (this->viplev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->viplev());
  }

  // optional uint32 pkval = 9;
  if (this->pkval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pkval());
  }

  // optional uint32 honor = 10;
  if (this->honor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->honor());
  }

  // optional uint32 campid = 11;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  // optional uint32 money = 12;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->money());
  }

  // optional uint32 money_bind = 13;
  if (this->money_bind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->money_bind());
  }

  // optional uint32 gold = 14;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gold());
  }

  // optional uint32 gold_bind = 15;
  if (this->gold_bind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gold_bind());
  }

  // optional uint32 bag_size = 16;
  if (this->bag_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bag_size());
  }

  // optional uint32 stroge_size = 17;
  if (this->stroge_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroge_size());
  }

  // optional uint32 achi_point = 18;
  if (this->achi_point() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achi_point());
  }

  // optional uint32 hp = 30;
  if (this->hp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // optional uint32 mp = 31;
  if (this->mp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mp());
  }

  // optional uint32 fp = 32;
  if (this->fp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fp());
  }

  // optional uint32 np = 33;
  if (this->np() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->np());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PLAYERINFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_PLAYERINFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_PLAYERINFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_PLAYERINFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_PLAYERINFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_PLAYERINFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_PLAYERINFO::MergeFrom(const SC_PLAYERINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_PLAYERINFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_PLAYERINFO::UnsafeMergeFrom(const SC_PLAYERINFO& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prof() != 0) {
    set_prof(from.prof());
  }
  if (from.baselook() != 0) {
    set_baselook(from.baselook());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.viplev() != 0) {
    set_viplev(from.viplev());
  }
  if (from.pkval() != 0) {
    set_pkval(from.pkval());
  }
  if (from.honor() != 0) {
    set_honor(from.honor());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.money_bind() != 0) {
    set_money_bind(from.money_bind());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.gold_bind() != 0) {
    set_gold_bind(from.gold_bind());
  }
  if (from.bag_size() != 0) {
    set_bag_size(from.bag_size());
  }
  if (from.stroge_size() != 0) {
    set_stroge_size(from.stroge_size());
  }
  if (from.achi_point() != 0) {
    set_achi_point(from.achi_point());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.mp() != 0) {
    set_mp(from.mp());
  }
  if (from.fp() != 0) {
    set_fp(from.fp());
  }
  if (from.np() != 0) {
    set_np(from.np());
  }
}

void SC_PLAYERINFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_PLAYERINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PLAYERINFO::CopyFrom(const SC_PLAYERINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_PLAYERINFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_PLAYERINFO::IsInitialized() const {

  return true;
}

void SC_PLAYERINFO::Swap(SC_PLAYERINFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_PLAYERINFO::InternalSwap(SC_PLAYERINFO* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(worldid_, other->worldid_);
  name_.Swap(&other->name_);
  std::swap(prof_, other->prof_);
  std::swap(baselook_, other->baselook_);
  std::swap(exp_, other->exp_);
  std::swap(level_, other->level_);
  std::swap(viplev_, other->viplev_);
  std::swap(pkval_, other->pkval_);
  std::swap(honor_, other->honor_);
  std::swap(campid_, other->campid_);
  std::swap(money_, other->money_);
  std::swap(money_bind_, other->money_bind_);
  std::swap(gold_, other->gold_);
  std::swap(gold_bind_, other->gold_bind_);
  std::swap(bag_size_, other->bag_size_);
  std::swap(stroge_size_, other->stroge_size_);
  std::swap(achi_point_, other->achi_point_);
  std::swap(hp_, other->hp_);
  std::swap(mp_, other->mp_);
  std::swap(fp_, other->fp_);
  std::swap(np_, other->np_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_PLAYERINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_PLAYERINFO_descriptor_;
  metadata.reflection = SC_PLAYERINFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_PLAYERINFO

// optional uint64 playerid = 1;
void SC_PLAYERINFO::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_PLAYERINFO::playerid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.playerid)
  return playerid_;
}
void SC_PLAYERINFO::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.playerid)
}

// optional uint32 worldid = 2;
void SC_PLAYERINFO::clear_worldid() {
  worldid_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::worldid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.worldid)
  return worldid_;
}
void SC_PLAYERINFO::set_worldid(::google::protobuf::uint32 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.worldid)
}

// optional string name = 3;
void SC_PLAYERINFO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_PLAYERINFO::name() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_PLAYERINFO::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.name)
}
void SC_PLAYERINFO::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_PLAYERINFO.name)
}
void SC_PLAYERINFO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_PLAYERINFO.name)
}
::std::string* SC_PLAYERINFO::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_PLAYERINFO.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_PLAYERINFO::release_name() {
  // @@protoc_insertion_point(field_release:SC_PLAYERINFO.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_PLAYERINFO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_PLAYERINFO.name)
}

// optional uint32 prof = 4;
void SC_PLAYERINFO::clear_prof() {
  prof_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::prof() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.prof)
  return prof_;
}
void SC_PLAYERINFO::set_prof(::google::protobuf::uint32 value) {
  
  prof_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.prof)
}

// optional uint32 baselook = 5;
void SC_PLAYERINFO::clear_baselook() {
  baselook_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::baselook() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.baselook)
  return baselook_;
}
void SC_PLAYERINFO::set_baselook(::google::protobuf::uint32 value) {
  
  baselook_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.baselook)
}

// optional uint32 exp = 6;
void SC_PLAYERINFO::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::exp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.exp)
  return exp_;
}
void SC_PLAYERINFO::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.exp)
}

// optional uint32 level = 7;
void SC_PLAYERINFO::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::level() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.level)
  return level_;
}
void SC_PLAYERINFO::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.level)
}

// optional uint32 viplev = 8;
void SC_PLAYERINFO::clear_viplev() {
  viplev_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::viplev() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.viplev)
  return viplev_;
}
void SC_PLAYERINFO::set_viplev(::google::protobuf::uint32 value) {
  
  viplev_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.viplev)
}

// optional uint32 pkval = 9;
void SC_PLAYERINFO::clear_pkval() {
  pkval_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::pkval() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.pkval)
  return pkval_;
}
void SC_PLAYERINFO::set_pkval(::google::protobuf::uint32 value) {
  
  pkval_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.pkval)
}

// optional uint32 honor = 10;
void SC_PLAYERINFO::clear_honor() {
  honor_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::honor() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.honor)
  return honor_;
}
void SC_PLAYERINFO::set_honor(::google::protobuf::uint32 value) {
  
  honor_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.honor)
}

// optional uint32 campid = 11;
void SC_PLAYERINFO::clear_campid() {
  campid_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::campid() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.campid)
  return campid_;
}
void SC_PLAYERINFO::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.campid)
}

// optional uint32 money = 12;
void SC_PLAYERINFO::clear_money() {
  money_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::money() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.money)
  return money_;
}
void SC_PLAYERINFO::set_money(::google::protobuf::uint32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.money)
}

// optional uint32 money_bind = 13;
void SC_PLAYERINFO::clear_money_bind() {
  money_bind_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::money_bind() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.money_bind)
  return money_bind_;
}
void SC_PLAYERINFO::set_money_bind(::google::protobuf::uint32 value) {
  
  money_bind_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.money_bind)
}

// optional uint32 gold = 14;
void SC_PLAYERINFO::clear_gold() {
  gold_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::gold() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.gold)
  return gold_;
}
void SC_PLAYERINFO::set_gold(::google::protobuf::uint32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.gold)
}

// optional uint32 gold_bind = 15;
void SC_PLAYERINFO::clear_gold_bind() {
  gold_bind_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::gold_bind() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.gold_bind)
  return gold_bind_;
}
void SC_PLAYERINFO::set_gold_bind(::google::protobuf::uint32 value) {
  
  gold_bind_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.gold_bind)
}

// optional uint32 bag_size = 16;
void SC_PLAYERINFO::clear_bag_size() {
  bag_size_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::bag_size() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.bag_size)
  return bag_size_;
}
void SC_PLAYERINFO::set_bag_size(::google::protobuf::uint32 value) {
  
  bag_size_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.bag_size)
}

// optional uint32 stroge_size = 17;
void SC_PLAYERINFO::clear_stroge_size() {
  stroge_size_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::stroge_size() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.stroge_size)
  return stroge_size_;
}
void SC_PLAYERINFO::set_stroge_size(::google::protobuf::uint32 value) {
  
  stroge_size_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.stroge_size)
}

// optional uint32 achi_point = 18;
void SC_PLAYERINFO::clear_achi_point() {
  achi_point_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::achi_point() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.achi_point)
  return achi_point_;
}
void SC_PLAYERINFO::set_achi_point(::google::protobuf::uint32 value) {
  
  achi_point_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.achi_point)
}

// optional uint32 hp = 30;
void SC_PLAYERINFO::clear_hp() {
  hp_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::hp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.hp)
  return hp_;
}
void SC_PLAYERINFO::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.hp)
}

// optional uint32 mp = 31;
void SC_PLAYERINFO::clear_mp() {
  mp_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::mp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.mp)
  return mp_;
}
void SC_PLAYERINFO::set_mp(::google::protobuf::uint32 value) {
  
  mp_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.mp)
}

// optional uint32 fp = 32;
void SC_PLAYERINFO::clear_fp() {
  fp_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::fp() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.fp)
  return fp_;
}
void SC_PLAYERINFO::set_fp(::google::protobuf::uint32 value) {
  
  fp_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.fp)
}

// optional uint32 np = 33;
void SC_PLAYERINFO::clear_np() {
  np_ = 0u;
}
::google::protobuf::uint32 SC_PLAYERINFO::np() const {
  // @@protoc_insertion_point(field_get:SC_PLAYERINFO.np)
  return np_;
}
void SC_PLAYERINFO::set_np(::google::protobuf::uint32 value) {
  
  np_ = value;
  // @@protoc_insertion_point(field_set:SC_PLAYERINFO.np)
}

inline const SC_PLAYERINFO* SC_PLAYERINFO::internal_default_instance() {
  return &SC_PLAYERINFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ACTORATTRIB::kAttribListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ACTORATTRIB::SC_ACTORATTRIB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORATTRIB)
}

void SC_ACTORATTRIB::InitAsDefaultInstance() {
}

SC_ACTORATTRIB::SC_ACTORATTRIB(const SC_ACTORATTRIB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ACTORATTRIB)
}

void SC_ACTORATTRIB::SharedCtor() {
  _cached_size_ = 0;
}

SC_ACTORATTRIB::~SC_ACTORATTRIB() {
  // @@protoc_insertion_point(destructor:SC_ACTORATTRIB)
  SharedDtor();
}

void SC_ACTORATTRIB::SharedDtor() {
}

void SC_ACTORATTRIB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ACTORATTRIB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ACTORATTRIB_descriptor_;
}

const SC_ACTORATTRIB& SC_ACTORATTRIB::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ACTORATTRIB> SC_ACTORATTRIB_default_instance_;

SC_ACTORATTRIB* SC_ACTORATTRIB::New(::google::protobuf::Arena* arena) const {
  SC_ACTORATTRIB* n = new SC_ACTORATTRIB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ACTORATTRIB::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORATTRIB)
  attrib_list_.Clear();
}

bool SC_ACTORATTRIB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ACTORATTRIB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 attrib_list = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attrib_list())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_attrib_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ACTORATTRIB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ACTORATTRIB)
  return false;
#undef DO_
}

void SC_ACTORATTRIB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ACTORATTRIB)
  // repeated uint32 attrib_list = 1;
  if (this->attrib_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attrib_list_cached_byte_size_);
  }
  for (int i = 0; i < this->attrib_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->attrib_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ACTORATTRIB)
}

::google::protobuf::uint8* SC_ACTORATTRIB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORATTRIB)
  // repeated uint32 attrib_list = 1;
  if (this->attrib_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _attrib_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attrib_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->attrib_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORATTRIB)
  return target;
}

size_t SC_ACTORATTRIB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORATTRIB)
  size_t total_size = 0;

  // repeated uint32 attrib_list = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->attrib_list_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attrib_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attrib_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ACTORATTRIB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORATTRIB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ACTORATTRIB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ACTORATTRIB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORATTRIB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORATTRIB)
    UnsafeMergeFrom(*source);
  }
}

void SC_ACTORATTRIB::MergeFrom(const SC_ACTORATTRIB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORATTRIB)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ACTORATTRIB::UnsafeMergeFrom(const SC_ACTORATTRIB& from) {
  GOOGLE_DCHECK(&from != this);
  attrib_list_.UnsafeMergeFrom(from.attrib_list_);
}

void SC_ACTORATTRIB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORATTRIB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORATTRIB::CopyFrom(const SC_ACTORATTRIB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORATTRIB)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ACTORATTRIB::IsInitialized() const {

  return true;
}

void SC_ACTORATTRIB::Swap(SC_ACTORATTRIB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ACTORATTRIB::InternalSwap(SC_ACTORATTRIB* other) {
  attrib_list_.UnsafeArenaSwap(&other->attrib_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ACTORATTRIB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ACTORATTRIB_descriptor_;
  metadata.reflection = SC_ACTORATTRIB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ACTORATTRIB

// repeated uint32 attrib_list = 1;
int SC_ACTORATTRIB::attrib_list_size() const {
  return attrib_list_.size();
}
void SC_ACTORATTRIB::clear_attrib_list() {
  attrib_list_.Clear();
}
::google::protobuf::uint32 SC_ACTORATTRIB::attrib_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACTORATTRIB.attrib_list)
  return attrib_list_.Get(index);
}
void SC_ACTORATTRIB::set_attrib_list(int index, ::google::protobuf::uint32 value) {
  attrib_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_ACTORATTRIB.attrib_list)
}
void SC_ACTORATTRIB::add_attrib_list(::google::protobuf::uint32 value) {
  attrib_list_.Add(value);
  // @@protoc_insertion_point(field_add:SC_ACTORATTRIB.attrib_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SC_ACTORATTRIB::attrib_list() const {
  // @@protoc_insertion_point(field_list:SC_ACTORATTRIB.attrib_list)
  return attrib_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SC_ACTORATTRIB::mutable_attrib_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACTORATTRIB.attrib_list)
  return &attrib_list_;
}

inline const SC_ACTORATTRIB* SC_ACTORATTRIB::internal_default_instance() {
  return &SC_ACTORATTRIB_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_COMMONDATA_Data::kKeyidxFieldNumber;
const int SC_COMMONDATA_Data::kData0FieldNumber;
const int SC_COMMONDATA_Data::kData1FieldNumber;
const int SC_COMMONDATA_Data::kData2FieldNumber;
const int SC_COMMONDATA_Data::kData3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_COMMONDATA_Data::SC_COMMONDATA_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COMMONDATA.Data)
}

void SC_COMMONDATA_Data::InitAsDefaultInstance() {
}

SC_COMMONDATA_Data::SC_COMMONDATA_Data(const SC_COMMONDATA_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_COMMONDATA.Data)
}

void SC_COMMONDATA_Data::SharedCtor() {
  ::memset(&data0_, 0, reinterpret_cast<char*>(&keyidx_) -
    reinterpret_cast<char*>(&data0_) + sizeof(keyidx_));
  _cached_size_ = 0;
}

SC_COMMONDATA_Data::~SC_COMMONDATA_Data() {
  // @@protoc_insertion_point(destructor:SC_COMMONDATA.Data)
  SharedDtor();
}

void SC_COMMONDATA_Data::SharedDtor() {
}

void SC_COMMONDATA_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_COMMONDATA_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_COMMONDATA_Data_descriptor_;
}

const SC_COMMONDATA_Data& SC_COMMONDATA_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_COMMONDATA_Data> SC_COMMONDATA_Data_default_instance_;

SC_COMMONDATA_Data* SC_COMMONDATA_Data::New(::google::protobuf::Arena* arena) const {
  SC_COMMONDATA_Data* n = new SC_COMMONDATA_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_COMMONDATA_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COMMONDATA.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_COMMONDATA_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_COMMONDATA_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(data0_, keyidx_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_COMMONDATA_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_COMMONDATA.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyidx = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyidx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data0;
        break;
      }

      // optional uint64 data0 = 2;
      case 2: {
        if (tag == 16) {
         parse_data0:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data0_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data1;
        break;
      }

      // optional uint64 data1 = 3;
      case 3: {
        if (tag == 24) {
         parse_data1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data2;
        break;
      }

      // optional uint64 data2 = 4;
      case 4: {
        if (tag == 32) {
         parse_data2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data3;
        break;
      }

      // optional uint64 data3 = 5;
      case 5: {
        if (tag == 40) {
         parse_data3:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_COMMONDATA.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_COMMONDATA.Data)
  return false;
#undef DO_
}

void SC_COMMONDATA_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_COMMONDATA.Data)
  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyidx(), output);
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data0(), output);
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->data1(), output);
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->data2(), output);
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data3(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_COMMONDATA.Data)
}

::google::protobuf::uint8* SC_COMMONDATA_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_COMMONDATA.Data)
  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyidx(), target);
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data0(), target);
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->data1(), target);
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->data2(), target);
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_COMMONDATA.Data)
  return target;
}

size_t SC_COMMONDATA_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COMMONDATA.Data)
  size_t total_size = 0;

  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keyidx());
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data0());
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data1());
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data2());
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data3());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_COMMONDATA_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COMMONDATA.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_COMMONDATA_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_COMMONDATA_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COMMONDATA.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COMMONDATA.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_COMMONDATA_Data::MergeFrom(const SC_COMMONDATA_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COMMONDATA.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_COMMONDATA_Data::UnsafeMergeFrom(const SC_COMMONDATA_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.keyidx() != 0) {
    set_keyidx(from.keyidx());
  }
  if (from.data0() != 0) {
    set_data0(from.data0());
  }
  if (from.data1() != 0) {
    set_data1(from.data1());
  }
  if (from.data2() != 0) {
    set_data2(from.data2());
  }
  if (from.data3() != 0) {
    set_data3(from.data3());
  }
}

void SC_COMMONDATA_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COMMONDATA.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COMMONDATA_Data::CopyFrom(const SC_COMMONDATA_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COMMONDATA.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_COMMONDATA_Data::IsInitialized() const {

  return true;
}

void SC_COMMONDATA_Data::Swap(SC_COMMONDATA_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_COMMONDATA_Data::InternalSwap(SC_COMMONDATA_Data* other) {
  std::swap(keyidx_, other->keyidx_);
  std::swap(data0_, other->data0_);
  std::swap(data1_, other->data1_);
  std::swap(data2_, other->data2_);
  std::swap(data3_, other->data3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_COMMONDATA_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_COMMONDATA_Data_descriptor_;
  metadata.reflection = SC_COMMONDATA_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_COMMONDATA::kDatalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_COMMONDATA::SC_COMMONDATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COMMONDATA)
}

void SC_COMMONDATA::InitAsDefaultInstance() {
}

SC_COMMONDATA::SC_COMMONDATA(const SC_COMMONDATA& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_COMMONDATA)
}

void SC_COMMONDATA::SharedCtor() {
  _cached_size_ = 0;
}

SC_COMMONDATA::~SC_COMMONDATA() {
  // @@protoc_insertion_point(destructor:SC_COMMONDATA)
  SharedDtor();
}

void SC_COMMONDATA::SharedDtor() {
}

void SC_COMMONDATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_COMMONDATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_COMMONDATA_descriptor_;
}

const SC_COMMONDATA& SC_COMMONDATA::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_COMMONDATA> SC_COMMONDATA_default_instance_;

SC_COMMONDATA* SC_COMMONDATA::New(::google::protobuf::Arena* arena) const {
  SC_COMMONDATA* n = new SC_COMMONDATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_COMMONDATA::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COMMONDATA)
  datalist_.Clear();
}

bool SC_COMMONDATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_COMMONDATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_COMMONDATA.Data datalist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datalist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_COMMONDATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_COMMONDATA)
  return false;
#undef DO_
}

void SC_COMMONDATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_COMMONDATA)
  // repeated .SC_COMMONDATA.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_COMMONDATA)
}

::google::protobuf::uint8* SC_COMMONDATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_COMMONDATA)
  // repeated .SC_COMMONDATA.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datalist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_COMMONDATA)
  return target;
}

size_t SC_COMMONDATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COMMONDATA)
  size_t total_size = 0;

  // repeated .SC_COMMONDATA.Data datalist = 1;
  {
    unsigned int count = this->datalist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datalist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_COMMONDATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COMMONDATA)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_COMMONDATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_COMMONDATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COMMONDATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COMMONDATA)
    UnsafeMergeFrom(*source);
  }
}

void SC_COMMONDATA::MergeFrom(const SC_COMMONDATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COMMONDATA)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_COMMONDATA::UnsafeMergeFrom(const SC_COMMONDATA& from) {
  GOOGLE_DCHECK(&from != this);
  datalist_.MergeFrom(from.datalist_);
}

void SC_COMMONDATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COMMONDATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COMMONDATA::CopyFrom(const SC_COMMONDATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COMMONDATA)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_COMMONDATA::IsInitialized() const {

  return true;
}

void SC_COMMONDATA::Swap(SC_COMMONDATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_COMMONDATA::InternalSwap(SC_COMMONDATA* other) {
  datalist_.UnsafeArenaSwap(&other->datalist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_COMMONDATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_COMMONDATA_descriptor_;
  metadata.reflection = SC_COMMONDATA_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_COMMONDATA_Data

// optional uint32 keyidx = 1;
void SC_COMMONDATA_Data::clear_keyidx() {
  keyidx_ = 0u;
}
::google::protobuf::uint32 SC_COMMONDATA_Data::keyidx() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.keyidx)
  return keyidx_;
}
void SC_COMMONDATA_Data::set_keyidx(::google::protobuf::uint32 value) {
  
  keyidx_ = value;
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.keyidx)
}

// optional uint64 data0 = 2;
void SC_COMMONDATA_Data::clear_data0() {
  data0_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_COMMONDATA_Data::data0() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data0)
  return data0_;
}
void SC_COMMONDATA_Data::set_data0(::google::protobuf::uint64 value) {
  
  data0_ = value;
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data0)
}

// optional uint64 data1 = 3;
void SC_COMMONDATA_Data::clear_data1() {
  data1_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_COMMONDATA_Data::data1() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data1)
  return data1_;
}
void SC_COMMONDATA_Data::set_data1(::google::protobuf::uint64 value) {
  
  data1_ = value;
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data1)
}

// optional uint64 data2 = 4;
void SC_COMMONDATA_Data::clear_data2() {
  data2_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_COMMONDATA_Data::data2() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data2)
  return data2_;
}
void SC_COMMONDATA_Data::set_data2(::google::protobuf::uint64 value) {
  
  data2_ = value;
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data2)
}

// optional uint64 data3 = 5;
void SC_COMMONDATA_Data::clear_data3() {
  data3_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_COMMONDATA_Data::data3() const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.Data.data3)
  return data3_;
}
void SC_COMMONDATA_Data::set_data3(::google::protobuf::uint64 value) {
  
  data3_ = value;
  // @@protoc_insertion_point(field_set:SC_COMMONDATA.Data.data3)
}

inline const SC_COMMONDATA_Data* SC_COMMONDATA_Data::internal_default_instance() {
  return &SC_COMMONDATA_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_COMMONDATA

// repeated .SC_COMMONDATA.Data datalist = 1;
int SC_COMMONDATA::datalist_size() const {
  return datalist_.size();
}
void SC_COMMONDATA::clear_datalist() {
  datalist_.Clear();
}
const ::SC_COMMONDATA_Data& SC_COMMONDATA::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_COMMONDATA.datalist)
  return datalist_.Get(index);
}
::SC_COMMONDATA_Data* SC_COMMONDATA::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_COMMONDATA.datalist)
  return datalist_.Mutable(index);
}
::SC_COMMONDATA_Data* SC_COMMONDATA::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_COMMONDATA.datalist)
  return datalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_COMMONDATA_Data >*
SC_COMMONDATA::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_COMMONDATA.datalist)
  return &datalist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_COMMONDATA_Data >&
SC_COMMONDATA::datalist() const {
  // @@protoc_insertion_point(field_list:SC_COMMONDATA.datalist)
  return datalist_;
}

inline const SC_COMMONDATA* SC_COMMONDATA::internal_default_instance() {
  return &SC_COMMONDATA_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DATACOUNT_Data::kTypeFieldNumber;
const int SC_DATACOUNT_Data::kIdxFieldNumber;
const int SC_DATACOUNT_Data::kDataFieldNumber;
const int SC_DATACOUNT_Data::kLastResetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DATACOUNT_Data::SC_DATACOUNT_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DATACOUNT.Data)
}

void SC_DATACOUNT_Data::InitAsDefaultInstance() {
}

SC_DATACOUNT_Data::SC_DATACOUNT_Data(const SC_DATACOUNT_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DATACOUNT.Data)
}

void SC_DATACOUNT_Data::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&last_reset_time_) -
    reinterpret_cast<char*>(&type_) + sizeof(last_reset_time_));
  _cached_size_ = 0;
}

SC_DATACOUNT_Data::~SC_DATACOUNT_Data() {
  // @@protoc_insertion_point(destructor:SC_DATACOUNT.Data)
  SharedDtor();
}

void SC_DATACOUNT_Data::SharedDtor() {
}

void SC_DATACOUNT_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DATACOUNT_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DATACOUNT_Data_descriptor_;
}

const SC_DATACOUNT_Data& SC_DATACOUNT_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DATACOUNT_Data> SC_DATACOUNT_Data_default_instance_;

SC_DATACOUNT_Data* SC_DATACOUNT_Data::New(::google::protobuf::Arena* arena) const {
  SC_DATACOUNT_Data* n = new SC_DATACOUNT_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DATACOUNT_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DATACOUNT.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_DATACOUNT_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_DATACOUNT_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, last_reset_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_DATACOUNT_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DATACOUNT.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // optional uint64 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_reset_time;
        break;
      }

      // optional uint32 last_reset_time = 4;
      case 4: {
        if (tag == 32) {
         parse_last_reset_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DATACOUNT.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DATACOUNT.Data)
  return false;
#undef DO_
}

void SC_DATACOUNT_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DATACOUNT.Data)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint64 data = 3;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->data(), output);
  }

  // optional uint32 last_reset_time = 4;
  if (this->last_reset_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_reset_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DATACOUNT.Data)
}

::google::protobuf::uint8* SC_DATACOUNT_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DATACOUNT.Data)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint64 data = 3;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->data(), target);
  }

  // optional uint32 last_reset_time = 4;
  if (this->last_reset_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_reset_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DATACOUNT.Data)
  return target;
}

size_t SC_DATACOUNT_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DATACOUNT.Data)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  // optional uint64 data = 3;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data());
  }

  // optional uint32 last_reset_time = 4;
  if (this->last_reset_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_reset_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DATACOUNT_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DATACOUNT.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DATACOUNT_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DATACOUNT_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DATACOUNT.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DATACOUNT.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_DATACOUNT_Data::MergeFrom(const SC_DATACOUNT_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DATACOUNT.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DATACOUNT_Data::UnsafeMergeFrom(const SC_DATACOUNT_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.last_reset_time() != 0) {
    set_last_reset_time(from.last_reset_time());
  }
}

void SC_DATACOUNT_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DATACOUNT.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DATACOUNT_Data::CopyFrom(const SC_DATACOUNT_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DATACOUNT.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DATACOUNT_Data::IsInitialized() const {

  return true;
}

void SC_DATACOUNT_Data::Swap(SC_DATACOUNT_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DATACOUNT_Data::InternalSwap(SC_DATACOUNT_Data* other) {
  std::swap(type_, other->type_);
  std::swap(idx_, other->idx_);
  std::swap(data_, other->data_);
  std::swap(last_reset_time_, other->last_reset_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DATACOUNT_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DATACOUNT_Data_descriptor_;
  metadata.reflection = SC_DATACOUNT_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DATACOUNT::kDatalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DATACOUNT::SC_DATACOUNT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DATACOUNT)
}

void SC_DATACOUNT::InitAsDefaultInstance() {
}

SC_DATACOUNT::SC_DATACOUNT(const SC_DATACOUNT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DATACOUNT)
}

void SC_DATACOUNT::SharedCtor() {
  _cached_size_ = 0;
}

SC_DATACOUNT::~SC_DATACOUNT() {
  // @@protoc_insertion_point(destructor:SC_DATACOUNT)
  SharedDtor();
}

void SC_DATACOUNT::SharedDtor() {
}

void SC_DATACOUNT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DATACOUNT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DATACOUNT_descriptor_;
}

const SC_DATACOUNT& SC_DATACOUNT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DATACOUNT> SC_DATACOUNT_default_instance_;

SC_DATACOUNT* SC_DATACOUNT::New(::google::protobuf::Arena* arena) const {
  SC_DATACOUNT* n = new SC_DATACOUNT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DATACOUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DATACOUNT)
  datalist_.Clear();
}

bool SC_DATACOUNT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DATACOUNT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_DATACOUNT.Data datalist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datalist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DATACOUNT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DATACOUNT)
  return false;
#undef DO_
}

void SC_DATACOUNT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DATACOUNT)
  // repeated .SC_DATACOUNT.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DATACOUNT)
}

::google::protobuf::uint8* SC_DATACOUNT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DATACOUNT)
  // repeated .SC_DATACOUNT.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datalist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DATACOUNT)
  return target;
}

size_t SC_DATACOUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DATACOUNT)
  size_t total_size = 0;

  // repeated .SC_DATACOUNT.Data datalist = 1;
  {
    unsigned int count = this->datalist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datalist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DATACOUNT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DATACOUNT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DATACOUNT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DATACOUNT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DATACOUNT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DATACOUNT)
    UnsafeMergeFrom(*source);
  }
}

void SC_DATACOUNT::MergeFrom(const SC_DATACOUNT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DATACOUNT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DATACOUNT::UnsafeMergeFrom(const SC_DATACOUNT& from) {
  GOOGLE_DCHECK(&from != this);
  datalist_.MergeFrom(from.datalist_);
}

void SC_DATACOUNT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DATACOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DATACOUNT::CopyFrom(const SC_DATACOUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DATACOUNT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DATACOUNT::IsInitialized() const {

  return true;
}

void SC_DATACOUNT::Swap(SC_DATACOUNT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DATACOUNT::InternalSwap(SC_DATACOUNT* other) {
  datalist_.UnsafeArenaSwap(&other->datalist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DATACOUNT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DATACOUNT_descriptor_;
  metadata.reflection = SC_DATACOUNT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_DATACOUNT_Data

// optional uint32 type = 1;
void SC_DATACOUNT_Data::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 SC_DATACOUNT_Data::type() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.type)
  return type_;
}
void SC_DATACOUNT_Data::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.type)
}

// optional uint32 idx = 2;
void SC_DATACOUNT_Data::clear_idx() {
  idx_ = 0u;
}
::google::protobuf::uint32 SC_DATACOUNT_Data::idx() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.idx)
  return idx_;
}
void SC_DATACOUNT_Data::set_idx(::google::protobuf::uint32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.idx)
}

// optional uint64 data = 3;
void SC_DATACOUNT_Data::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DATACOUNT_Data::data() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.data)
  return data_;
}
void SC_DATACOUNT_Data::set_data(::google::protobuf::uint64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.data)
}

// optional uint32 last_reset_time = 4;
void SC_DATACOUNT_Data::clear_last_reset_time() {
  last_reset_time_ = 0u;
}
::google::protobuf::uint32 SC_DATACOUNT_Data::last_reset_time() const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.Data.last_reset_time)
  return last_reset_time_;
}
void SC_DATACOUNT_Data::set_last_reset_time(::google::protobuf::uint32 value) {
  
  last_reset_time_ = value;
  // @@protoc_insertion_point(field_set:SC_DATACOUNT.Data.last_reset_time)
}

inline const SC_DATACOUNT_Data* SC_DATACOUNT_Data::internal_default_instance() {
  return &SC_DATACOUNT_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_DATACOUNT

// repeated .SC_DATACOUNT.Data datalist = 1;
int SC_DATACOUNT::datalist_size() const {
  return datalist_.size();
}
void SC_DATACOUNT::clear_datalist() {
  datalist_.Clear();
}
const ::SC_DATACOUNT_Data& SC_DATACOUNT::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_DATACOUNT.datalist)
  return datalist_.Get(index);
}
::SC_DATACOUNT_Data* SC_DATACOUNT::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DATACOUNT.datalist)
  return datalist_.Mutable(index);
}
::SC_DATACOUNT_Data* SC_DATACOUNT::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_DATACOUNT.datalist)
  return datalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_DATACOUNT_Data >*
SC_DATACOUNT::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_DATACOUNT.datalist)
  return &datalist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_DATACOUNT_Data >&
SC_DATACOUNT::datalist() const {
  // @@protoc_insertion_point(field_list:SC_DATACOUNT.datalist)
  return datalist_;
}

inline const SC_DATACOUNT* SC_DATACOUNT::internal_default_instance() {
  return &SC_DATACOUNT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_COOLDOWN_Data::kTypeFieldNumber;
const int SC_COOLDOWN_Data::kIdxFieldNumber;
const int SC_COOLDOWN_Data::kExpiretimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_COOLDOWN_Data::SC_COOLDOWN_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COOLDOWN.Data)
}

void SC_COOLDOWN_Data::InitAsDefaultInstance() {
}

SC_COOLDOWN_Data::SC_COOLDOWN_Data(const SC_COOLDOWN_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_COOLDOWN.Data)
}

void SC_COOLDOWN_Data::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&type_) + sizeof(expiretime_));
  _cached_size_ = 0;
}

SC_COOLDOWN_Data::~SC_COOLDOWN_Data() {
  // @@protoc_insertion_point(destructor:SC_COOLDOWN.Data)
  SharedDtor();
}

void SC_COOLDOWN_Data::SharedDtor() {
}

void SC_COOLDOWN_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_COOLDOWN_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_COOLDOWN_Data_descriptor_;
}

const SC_COOLDOWN_Data& SC_COOLDOWN_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_COOLDOWN_Data> SC_COOLDOWN_Data_default_instance_;

SC_COOLDOWN_Data* SC_COOLDOWN_Data::New(::google::protobuf::Arena* arena) const {
  SC_COOLDOWN_Data* n = new SC_COOLDOWN_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_COOLDOWN_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COOLDOWN.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_COOLDOWN_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_COOLDOWN_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, expiretime_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_COOLDOWN_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_COOLDOWN.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 3;
      case 3: {
        if (tag == 24) {
         parse_expiretime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_COOLDOWN.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_COOLDOWN.Data)
  return false;
#undef DO_
}

void SC_COOLDOWN_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_COOLDOWN.Data)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint32 expiretime = 3;
  if (this->expiretime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiretime(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_COOLDOWN.Data)
}

::google::protobuf::uint8* SC_COOLDOWN_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_COOLDOWN.Data)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint32 expiretime = 3;
  if (this->expiretime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiretime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_COOLDOWN.Data)
  return target;
}

size_t SC_COOLDOWN_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COOLDOWN.Data)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  // optional uint32 expiretime = 3;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiretime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_COOLDOWN_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COOLDOWN.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_COOLDOWN_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_COOLDOWN_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COOLDOWN.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COOLDOWN.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_COOLDOWN_Data::MergeFrom(const SC_COOLDOWN_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COOLDOWN.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_COOLDOWN_Data::UnsafeMergeFrom(const SC_COOLDOWN_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (from.expiretime() != 0) {
    set_expiretime(from.expiretime());
  }
}

void SC_COOLDOWN_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COOLDOWN.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COOLDOWN_Data::CopyFrom(const SC_COOLDOWN_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COOLDOWN.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_COOLDOWN_Data::IsInitialized() const {

  return true;
}

void SC_COOLDOWN_Data::Swap(SC_COOLDOWN_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_COOLDOWN_Data::InternalSwap(SC_COOLDOWN_Data* other) {
  std::swap(type_, other->type_);
  std::swap(idx_, other->idx_);
  std::swap(expiretime_, other->expiretime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_COOLDOWN_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_COOLDOWN_Data_descriptor_;
  metadata.reflection = SC_COOLDOWN_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_COOLDOWN::kDatalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_COOLDOWN::SC_COOLDOWN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COOLDOWN)
}

void SC_COOLDOWN::InitAsDefaultInstance() {
}

SC_COOLDOWN::SC_COOLDOWN(const SC_COOLDOWN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_COOLDOWN)
}

void SC_COOLDOWN::SharedCtor() {
  _cached_size_ = 0;
}

SC_COOLDOWN::~SC_COOLDOWN() {
  // @@protoc_insertion_point(destructor:SC_COOLDOWN)
  SharedDtor();
}

void SC_COOLDOWN::SharedDtor() {
}

void SC_COOLDOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_COOLDOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_COOLDOWN_descriptor_;
}

const SC_COOLDOWN& SC_COOLDOWN::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_COOLDOWN> SC_COOLDOWN_default_instance_;

SC_COOLDOWN* SC_COOLDOWN::New(::google::protobuf::Arena* arena) const {
  SC_COOLDOWN* n = new SC_COOLDOWN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_COOLDOWN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COOLDOWN)
  datalist_.Clear();
}

bool SC_COOLDOWN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_COOLDOWN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_COOLDOWN.Data datalist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datalist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_COOLDOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_COOLDOWN)
  return false;
#undef DO_
}

void SC_COOLDOWN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_COOLDOWN)
  // repeated .SC_COOLDOWN.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_COOLDOWN)
}

::google::protobuf::uint8* SC_COOLDOWN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_COOLDOWN)
  // repeated .SC_COOLDOWN.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datalist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_COOLDOWN)
  return target;
}

size_t SC_COOLDOWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COOLDOWN)
  size_t total_size = 0;

  // repeated .SC_COOLDOWN.Data datalist = 1;
  {
    unsigned int count = this->datalist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datalist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_COOLDOWN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COOLDOWN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_COOLDOWN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_COOLDOWN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COOLDOWN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COOLDOWN)
    UnsafeMergeFrom(*source);
  }
}

void SC_COOLDOWN::MergeFrom(const SC_COOLDOWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COOLDOWN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_COOLDOWN::UnsafeMergeFrom(const SC_COOLDOWN& from) {
  GOOGLE_DCHECK(&from != this);
  datalist_.MergeFrom(from.datalist_);
}

void SC_COOLDOWN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COOLDOWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COOLDOWN::CopyFrom(const SC_COOLDOWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COOLDOWN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_COOLDOWN::IsInitialized() const {

  return true;
}

void SC_COOLDOWN::Swap(SC_COOLDOWN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_COOLDOWN::InternalSwap(SC_COOLDOWN* other) {
  datalist_.UnsafeArenaSwap(&other->datalist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_COOLDOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_COOLDOWN_descriptor_;
  metadata.reflection = SC_COOLDOWN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_COOLDOWN_Data

// optional uint32 type = 1;
void SC_COOLDOWN_Data::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 SC_COOLDOWN_Data::type() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.type)
  return type_;
}
void SC_COOLDOWN_Data::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.type)
}

// optional uint32 idx = 2;
void SC_COOLDOWN_Data::clear_idx() {
  idx_ = 0u;
}
::google::protobuf::uint32 SC_COOLDOWN_Data::idx() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.idx)
  return idx_;
}
void SC_COOLDOWN_Data::set_idx(::google::protobuf::uint32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.idx)
}

// optional uint32 expiretime = 3;
void SC_COOLDOWN_Data::clear_expiretime() {
  expiretime_ = 0u;
}
::google::protobuf::uint32 SC_COOLDOWN_Data::expiretime() const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.Data.expiretime)
  return expiretime_;
}
void SC_COOLDOWN_Data::set_expiretime(::google::protobuf::uint32 value) {
  
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:SC_COOLDOWN.Data.expiretime)
}

inline const SC_COOLDOWN_Data* SC_COOLDOWN_Data::internal_default_instance() {
  return &SC_COOLDOWN_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_COOLDOWN

// repeated .SC_COOLDOWN.Data datalist = 1;
int SC_COOLDOWN::datalist_size() const {
  return datalist_.size();
}
void SC_COOLDOWN::clear_datalist() {
  datalist_.Clear();
}
const ::SC_COOLDOWN_Data& SC_COOLDOWN::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_COOLDOWN.datalist)
  return datalist_.Get(index);
}
::SC_COOLDOWN_Data* SC_COOLDOWN::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_COOLDOWN.datalist)
  return datalist_.Mutable(index);
}
::SC_COOLDOWN_Data* SC_COOLDOWN::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_COOLDOWN.datalist)
  return datalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_COOLDOWN_Data >*
SC_COOLDOWN::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_COOLDOWN.datalist)
  return &datalist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_COOLDOWN_Data >&
SC_COOLDOWN::datalist() const {
  // @@protoc_insertion_point(field_list:SC_COOLDOWN.datalist)
  return datalist_;
}

inline const SC_COOLDOWN* SC_COOLDOWN::internal_default_instance() {
  return &SC_COOLDOWN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SYSVAR_Data::kKeyidxFieldNumber;
const int SC_SYSVAR_Data::kData0FieldNumber;
const int SC_SYSVAR_Data::kData1FieldNumber;
const int SC_SYSVAR_Data::kData2FieldNumber;
const int SC_SYSVAR_Data::kData3FieldNumber;
const int SC_SYSVAR_Data::kStr0FieldNumber;
const int SC_SYSVAR_Data::kStr1FieldNumber;
const int SC_SYSVAR_Data::kStr2FieldNumber;
const int SC_SYSVAR_Data::kStr3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SYSVAR_Data::SC_SYSVAR_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SYSVAR.Data)
}

void SC_SYSVAR_Data::InitAsDefaultInstance() {
}

SC_SYSVAR_Data::SC_SYSVAR_Data(const SC_SYSVAR_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SYSVAR.Data)
}

void SC_SYSVAR_Data::SharedCtor() {
  str0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data0_, 0, reinterpret_cast<char*>(&keyidx_) -
    reinterpret_cast<char*>(&data0_) + sizeof(keyidx_));
  _cached_size_ = 0;
}

SC_SYSVAR_Data::~SC_SYSVAR_Data() {
  // @@protoc_insertion_point(destructor:SC_SYSVAR.Data)
  SharedDtor();
}

void SC_SYSVAR_Data::SharedDtor() {
  str0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_SYSVAR_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SYSVAR_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SYSVAR_Data_descriptor_;
}

const SC_SYSVAR_Data& SC_SYSVAR_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SYSVAR_Data> SC_SYSVAR_Data_default_instance_;

SC_SYSVAR_Data* SC_SYSVAR_Data::New(::google::protobuf::Arena* arena) const {
  SC_SYSVAR_Data* n = new SC_SYSVAR_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SYSVAR_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SYSVAR.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SYSVAR_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SYSVAR_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(data0_, keyidx_);
  str0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_SYSVAR_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SYSVAR.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyidx = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyidx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data0;
        break;
      }

      // optional uint64 data0 = 2;
      case 2: {
        if (tag == 16) {
         parse_data0:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data0_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data1;
        break;
      }

      // optional uint64 data1 = 3;
      case 3: {
        if (tag == 24) {
         parse_data1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data2;
        break;
      }

      // optional uint64 data2 = 4;
      case 4: {
        if (tag == 32) {
         parse_data2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data3;
        break;
      }

      // optional uint64 data3 = 5;
      case 5: {
        if (tag == 40) {
         parse_data3:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_str0;
        break;
      }

      // optional string str0 = 6;
      case 6: {
        if (tag == 50) {
         parse_str0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str0()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str0().data(), this->str0().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_SYSVAR.Data.str0"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_str1;
        break;
      }

      // optional string str1 = 7;
      case 7: {
        if (tag == 58) {
         parse_str1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_SYSVAR.Data.str1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_str2;
        break;
      }

      // optional string str2 = 8;
      case 8: {
        if (tag == 66) {
         parse_str2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str2().data(), this->str2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_SYSVAR.Data.str2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_str3;
        break;
      }

      // optional string str3 = 9;
      case 9: {
        if (tag == 74) {
         parse_str3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str3().data(), this->str3().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_SYSVAR.Data.str3"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SYSVAR.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SYSVAR.Data)
  return false;
#undef DO_
}

void SC_SYSVAR_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SYSVAR.Data)
  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyidx(), output);
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data0(), output);
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->data1(), output);
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->data2(), output);
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data3(), output);
  }

  // optional string str0 = 6;
  if (this->str0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str0().data(), this->str0().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->str0(), output);
  }

  // optional string str1 = 7;
  if (this->str1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->str1(), output);
  }

  // optional string str2 = 8;
  if (this->str2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->str2(), output);
  }

  // optional string str3 = 9;
  if (this->str3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->str3(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SYSVAR.Data)
}

::google::protobuf::uint8* SC_SYSVAR_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SYSVAR.Data)
  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyidx(), target);
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data0(), target);
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->data1(), target);
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->data2(), target);
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data3(), target);
  }

  // optional string str0 = 6;
  if (this->str0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str0().data(), this->str0().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->str0(), target);
  }

  // optional string str1 = 7;
  if (this->str1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str1(), target);
  }

  // optional string str2 = 8;
  if (this->str2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str2(), target);
  }

  // optional string str3 = 9;
  if (this->str3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SYSVAR.Data)
  return target;
}

size_t SC_SYSVAR_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SYSVAR.Data)
  size_t total_size = 0;

  // optional uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keyidx());
  }

  // optional uint64 data0 = 2;
  if (this->data0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data0());
  }

  // optional uint64 data1 = 3;
  if (this->data1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data1());
  }

  // optional uint64 data2 = 4;
  if (this->data2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data2());
  }

  // optional uint64 data3 = 5;
  if (this->data3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data3());
  }

  // optional string str0 = 6;
  if (this->str0().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str0());
  }

  // optional string str1 = 7;
  if (this->str1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str1());
  }

  // optional string str2 = 8;
  if (this->str2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str2());
  }

  // optional string str3 = 9;
  if (this->str3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str3());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SYSVAR_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SYSVAR.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SYSVAR_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SYSVAR_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SYSVAR.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SYSVAR.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_SYSVAR_Data::MergeFrom(const SC_SYSVAR_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SYSVAR.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SYSVAR_Data::UnsafeMergeFrom(const SC_SYSVAR_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.keyidx() != 0) {
    set_keyidx(from.keyidx());
  }
  if (from.data0() != 0) {
    set_data0(from.data0());
  }
  if (from.data1() != 0) {
    set_data1(from.data1());
  }
  if (from.data2() != 0) {
    set_data2(from.data2());
  }
  if (from.data3() != 0) {
    set_data3(from.data3());
  }
  if (from.str0().size() > 0) {

    str0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str0_);
  }
  if (from.str1().size() > 0) {

    str1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
  if (from.str2().size() > 0) {

    str2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  if (from.str3().size() > 0) {

    str3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str3_);
  }
}

void SC_SYSVAR_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SYSVAR.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SYSVAR_Data::CopyFrom(const SC_SYSVAR_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SYSVAR.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SYSVAR_Data::IsInitialized() const {

  return true;
}

void SC_SYSVAR_Data::Swap(SC_SYSVAR_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SYSVAR_Data::InternalSwap(SC_SYSVAR_Data* other) {
  std::swap(keyidx_, other->keyidx_);
  std::swap(data0_, other->data0_);
  std::swap(data1_, other->data1_);
  std::swap(data2_, other->data2_);
  std::swap(data3_, other->data3_);
  str0_.Swap(&other->str0_);
  str1_.Swap(&other->str1_);
  str2_.Swap(&other->str2_);
  str3_.Swap(&other->str3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SYSVAR_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SYSVAR_Data_descriptor_;
  metadata.reflection = SC_SYSVAR_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SYSVAR::kDatalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SYSVAR::SC_SYSVAR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SYSVAR)
}

void SC_SYSVAR::InitAsDefaultInstance() {
}

SC_SYSVAR::SC_SYSVAR(const SC_SYSVAR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SYSVAR)
}

void SC_SYSVAR::SharedCtor() {
  _cached_size_ = 0;
}

SC_SYSVAR::~SC_SYSVAR() {
  // @@protoc_insertion_point(destructor:SC_SYSVAR)
  SharedDtor();
}

void SC_SYSVAR::SharedDtor() {
}

void SC_SYSVAR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SYSVAR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SYSVAR_descriptor_;
}

const SC_SYSVAR& SC_SYSVAR::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SYSVAR> SC_SYSVAR_default_instance_;

SC_SYSVAR* SC_SYSVAR::New(::google::protobuf::Arena* arena) const {
  SC_SYSVAR* n = new SC_SYSVAR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SYSVAR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SYSVAR)
  datalist_.Clear();
}

bool SC_SYSVAR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SYSVAR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_SYSVAR.Data datalist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datalist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SYSVAR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SYSVAR)
  return false;
#undef DO_
}

void SC_SYSVAR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SYSVAR)
  // repeated .SC_SYSVAR.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SYSVAR)
}

::google::protobuf::uint8* SC_SYSVAR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SYSVAR)
  // repeated .SC_SYSVAR.Data datalist = 1;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datalist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SYSVAR)
  return target;
}

size_t SC_SYSVAR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SYSVAR)
  size_t total_size = 0;

  // repeated .SC_SYSVAR.Data datalist = 1;
  {
    unsigned int count = this->datalist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datalist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SYSVAR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SYSVAR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SYSVAR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SYSVAR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SYSVAR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SYSVAR)
    UnsafeMergeFrom(*source);
  }
}

void SC_SYSVAR::MergeFrom(const SC_SYSVAR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SYSVAR)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SYSVAR::UnsafeMergeFrom(const SC_SYSVAR& from) {
  GOOGLE_DCHECK(&from != this);
  datalist_.MergeFrom(from.datalist_);
}

void SC_SYSVAR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SYSVAR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SYSVAR::CopyFrom(const SC_SYSVAR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SYSVAR)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SYSVAR::IsInitialized() const {

  return true;
}

void SC_SYSVAR::Swap(SC_SYSVAR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SYSVAR::InternalSwap(SC_SYSVAR* other) {
  datalist_.UnsafeArenaSwap(&other->datalist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SYSVAR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SYSVAR_descriptor_;
  metadata.reflection = SC_SYSVAR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SYSVAR_Data

// optional uint32 keyidx = 1;
void SC_SYSVAR_Data::clear_keyidx() {
  keyidx_ = 0u;
}
::google::protobuf::uint32 SC_SYSVAR_Data::keyidx() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.keyidx)
  return keyidx_;
}
void SC_SYSVAR_Data::set_keyidx(::google::protobuf::uint32 value) {
  
  keyidx_ = value;
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.keyidx)
}

// optional uint64 data0 = 2;
void SC_SYSVAR_Data::clear_data0() {
  data0_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SYSVAR_Data::data0() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data0)
  return data0_;
}
void SC_SYSVAR_Data::set_data0(::google::protobuf::uint64 value) {
  
  data0_ = value;
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data0)
}

// optional uint64 data1 = 3;
void SC_SYSVAR_Data::clear_data1() {
  data1_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SYSVAR_Data::data1() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data1)
  return data1_;
}
void SC_SYSVAR_Data::set_data1(::google::protobuf::uint64 value) {
  
  data1_ = value;
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data1)
}

// optional uint64 data2 = 4;
void SC_SYSVAR_Data::clear_data2() {
  data2_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SYSVAR_Data::data2() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data2)
  return data2_;
}
void SC_SYSVAR_Data::set_data2(::google::protobuf::uint64 value) {
  
  data2_ = value;
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data2)
}

// optional uint64 data3 = 5;
void SC_SYSVAR_Data::clear_data3() {
  data3_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SYSVAR_Data::data3() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.data3)
  return data3_;
}
void SC_SYSVAR_Data::set_data3(::google::protobuf::uint64 value) {
  
  data3_ = value;
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.data3)
}

// optional string str0 = 6;
void SC_SYSVAR_Data::clear_str0() {
  str0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_SYSVAR_Data::str0() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str0)
  return str0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_str0(const ::std::string& value) {
  
  str0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str0)
}
void SC_SYSVAR_Data::set_str0(const char* value) {
  
  str0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str0)
}
void SC_SYSVAR_Data::set_str0(const char* value, size_t size) {
  
  str0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str0)
}
::std::string* SC_SYSVAR_Data::mutable_str0() {
  
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str0)
  return str0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_SYSVAR_Data::release_str0() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str0)
  
  return str0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_allocated_str0(::std::string* str0) {
  if (str0 != NULL) {
    
  } else {
    
  }
  str0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str0);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str0)
}

// optional string str1 = 7;
void SC_SYSVAR_Data::clear_str1() {
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_SYSVAR_Data::str1() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str1)
  return str1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_str1(const ::std::string& value) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str1)
}
void SC_SYSVAR_Data::set_str1(const char* value) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str1)
}
void SC_SYSVAR_Data::set_str1(const char* value, size_t size) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str1)
}
::std::string* SC_SYSVAR_Data::mutable_str1() {
  
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str1)
  return str1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_SYSVAR_Data::release_str1() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str1)
  
  return str1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_allocated_str1(::std::string* str1) {
  if (str1 != NULL) {
    
  } else {
    
  }
  str1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str1)
}

// optional string str2 = 8;
void SC_SYSVAR_Data::clear_str2() {
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_SYSVAR_Data::str2() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str2)
  return str2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_str2(const ::std::string& value) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str2)
}
void SC_SYSVAR_Data::set_str2(const char* value) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str2)
}
void SC_SYSVAR_Data::set_str2(const char* value, size_t size) {
  
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str2)
}
::std::string* SC_SYSVAR_Data::mutable_str2() {
  
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str2)
  return str2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_SYSVAR_Data::release_str2() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str2)
  
  return str2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_allocated_str2(::std::string* str2) {
  if (str2 != NULL) {
    
  } else {
    
  }
  str2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str2)
}

// optional string str3 = 9;
void SC_SYSVAR_Data::clear_str3() {
  str3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_SYSVAR_Data::str3() const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.Data.str3)
  return str3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_str3(const ::std::string& value) {
  
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SYSVAR.Data.str3)
}
void SC_SYSVAR_Data::set_str3(const char* value) {
  
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SYSVAR.Data.str3)
}
void SC_SYSVAR_Data::set_str3(const char* value, size_t size) {
  
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SYSVAR.Data.str3)
}
::std::string* SC_SYSVAR_Data::mutable_str3() {
  
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.Data.str3)
  return str3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_SYSVAR_Data::release_str3() {
  // @@protoc_insertion_point(field_release:SC_SYSVAR.Data.str3)
  
  return str3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SYSVAR_Data::set_allocated_str3(::std::string* str3) {
  if (str3 != NULL) {
    
  } else {
    
  }
  str3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str3);
  // @@protoc_insertion_point(field_set_allocated:SC_SYSVAR.Data.str3)
}

inline const SC_SYSVAR_Data* SC_SYSVAR_Data::internal_default_instance() {
  return &SC_SYSVAR_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_SYSVAR

// repeated .SC_SYSVAR.Data datalist = 1;
int SC_SYSVAR::datalist_size() const {
  return datalist_.size();
}
void SC_SYSVAR::clear_datalist() {
  datalist_.Clear();
}
const ::SC_SYSVAR_Data& SC_SYSVAR::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_SYSVAR.datalist)
  return datalist_.Get(index);
}
::SC_SYSVAR_Data* SC_SYSVAR::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SYSVAR.datalist)
  return datalist_.Mutable(index);
}
::SC_SYSVAR_Data* SC_SYSVAR::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_SYSVAR.datalist)
  return datalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_SYSVAR_Data >*
SC_SYSVAR::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_SYSVAR.datalist)
  return &datalist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_SYSVAR_Data >&
SC_SYSVAR::datalist() const {
  // @@protoc_insertion_point(field_list:SC_SYSVAR.datalist)
  return datalist_;
}

inline const SC_SYSVAR* SC_SYSVAR::internal_default_instance() {
  return &SC_SYSVAR_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ENTERMAP::kXFieldNumber;
const int SC_ENTERMAP::kYFieldNumber;
const int SC_ENTERMAP::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ENTERMAP::SC_ENTERMAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ENTERMAP)
}

void SC_ENTERMAP::InitAsDefaultInstance() {
}

SC_ENTERMAP::SC_ENTERMAP(const SC_ENTERMAP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ENTERMAP)
}

void SC_ENTERMAP::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&x_) + sizeof(face_));
  _cached_size_ = 0;
}

SC_ENTERMAP::~SC_ENTERMAP() {
  // @@protoc_insertion_point(destructor:SC_ENTERMAP)
  SharedDtor();
}

void SC_ENTERMAP::SharedDtor() {
}

void SC_ENTERMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ENTERMAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ENTERMAP_descriptor_;
}

const SC_ENTERMAP& SC_ENTERMAP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ENTERMAP> SC_ENTERMAP_default_instance_;

SC_ENTERMAP* SC_ENTERMAP::New(::google::protobuf::Arena* arena) const {
  SC_ENTERMAP* n = new SC_ENTERMAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ENTERMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ENTERMAP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ENTERMAP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ENTERMAP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, face_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ENTERMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ENTERMAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_face;
        break;
      }

      // optional float face = 3;
      case 3: {
        if (tag == 29) {
         parse_face:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ENTERMAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ENTERMAP)
  return false;
#undef DO_
}

void SC_ENTERMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ENTERMAP)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float face = 3;
  if (this->face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->face(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ENTERMAP)
}

::google::protobuf::uint8* SC_ENTERMAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ENTERMAP)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float face = 3;
  if (this->face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->face(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ENTERMAP)
  return target;
}

size_t SC_ENTERMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ENTERMAP)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float face = 3;
  if (this->face() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ENTERMAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ENTERMAP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ENTERMAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ENTERMAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ENTERMAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ENTERMAP)
    UnsafeMergeFrom(*source);
  }
}

void SC_ENTERMAP::MergeFrom(const SC_ENTERMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ENTERMAP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ENTERMAP::UnsafeMergeFrom(const SC_ENTERMAP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.face() != 0) {
    set_face(from.face());
  }
}

void SC_ENTERMAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ENTERMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ENTERMAP::CopyFrom(const SC_ENTERMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ENTERMAP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ENTERMAP::IsInitialized() const {

  return true;
}

void SC_ENTERMAP::Swap(SC_ENTERMAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ENTERMAP::InternalSwap(SC_ENTERMAP* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(face_, other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ENTERMAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ENTERMAP_descriptor_;
  metadata.reflection = SC_ENTERMAP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ENTERMAP

// optional float x = 1;
void SC_ENTERMAP::clear_x() {
  x_ = 0;
}
float SC_ENTERMAP::x() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.x)
  return x_;
}
void SC_ENTERMAP::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.x)
}

// optional float y = 2;
void SC_ENTERMAP::clear_y() {
  y_ = 0;
}
float SC_ENTERMAP::y() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.y)
  return y_;
}
void SC_ENTERMAP::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.y)
}

// optional float face = 3;
void SC_ENTERMAP::clear_face() {
  face_ = 0;
}
float SC_ENTERMAP::face() const {
  // @@protoc_insertion_point(field_get:SC_ENTERMAP.face)
  return face_;
}
void SC_ENTERMAP::set_face(float value) {
  
  face_ = value;
  // @@protoc_insertion_point(field_set:SC_ENTERMAP.face)
}

inline const SC_ENTERMAP* SC_ENTERMAP::internal_default_instance() {
  return &SC_ENTERMAP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_AOI_NEW::kMapidFieldNumber;
const int SC_AOI_NEW::kActorIdFieldNumber;
const int SC_AOI_NEW::kNameFieldNumber;
const int SC_AOI_NEW::kActortypeFieldNumber;
const int SC_AOI_NEW::kBaselookFieldNumber;
const int SC_AOI_NEW::kProfFieldNumber;
const int SC_AOI_NEW::kLevFieldNumber;
const int SC_AOI_NEW::kCampidFieldNumber;
const int SC_AOI_NEW::kHpFieldNumber;
const int SC_AOI_NEW::kHpmaxFieldNumber;
const int SC_AOI_NEW::kMovespdFieldNumber;
const int SC_AOI_NEW::kOwneridFieldNumber;
const int SC_AOI_NEW::kPosxFieldNumber;
const int SC_AOI_NEW::kPosyFieldNumber;
const int SC_AOI_NEW::kFaceFieldNumber;
const int SC_AOI_NEW::kWeaponidFieldNumber;
const int SC_AOI_NEW::kArmoridFieldNumber;
const int SC_AOI_NEW::kGuildidFieldNumber;
const int SC_AOI_NEW::kGuildnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_AOI_NEW::SC_AOI_NEW()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_NEW)
}

void SC_AOI_NEW::InitAsDefaultInstance() {
}

SC_AOI_NEW::SC_AOI_NEW(const SC_AOI_NEW& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_AOI_NEW)
}

void SC_AOI_NEW::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&guildid_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(guildid_));
  _cached_size_ = 0;
}

SC_AOI_NEW::~SC_AOI_NEW() {
  // @@protoc_insertion_point(destructor:SC_AOI_NEW)
  SharedDtor();
}

void SC_AOI_NEW::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_AOI_NEW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AOI_NEW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_AOI_NEW_descriptor_;
}

const SC_AOI_NEW& SC_AOI_NEW::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_AOI_NEW> SC_AOI_NEW_default_instance_;

SC_AOI_NEW* SC_AOI_NEW::New(::google::protobuf::Arena* arena) const {
  SC_AOI_NEW* n = new SC_AOI_NEW;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_AOI_NEW::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_NEW)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_AOI_NEW, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_AOI_NEW*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, campid_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(hp_, weaponid_);
  ZR_(armorid_, guildid_);
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_AOI_NEW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_AOI_NEW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_AOI_NEW.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actortype;
        break;
      }

      // optional uint32 actortype = 4;
      case 4: {
        if (tag == 32) {
         parse_actortype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actortype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baselook;
        break;
      }

      // optional uint32 baselook = 5;
      case 5: {
        if (tag == 40) {
         parse_baselook:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselook_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 6;
      case 6: {
        if (tag == 48) {
         parse_prof:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lev;
        break;
      }

      // optional uint32 lev = 7;
      case 7: {
        if (tag == 56) {
         parse_lev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_campid;
        break;
      }

      // optional uint32 campid = 8;
      case 8: {
        if (tag == 64) {
         parse_campid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 9;
      case 9: {
        if (tag == 72) {
         parse_hp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hpmax;
        break;
      }

      // optional uint32 hpmax = 10;
      case 10: {
        if (tag == 80) {
         parse_hpmax:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpmax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_movespd;
        break;
      }

      // optional uint32 movespd = 11;
      case 11: {
        if (tag == 88) {
         parse_movespd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 12;
      case 12: {
        if (tag == 96) {
         parse_ownerid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_posx;
        break;
      }

      // optional float posx = 13;
      case 13: {
        if (tag == 109) {
         parse_posx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_posy;
        break;
      }

      // optional float posy = 14;
      case 14: {
        if (tag == 117) {
         parse_posy:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_face;
        break;
      }

      // optional float face = 15;
      case 15: {
        if (tag == 125) {
         parse_face:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_weaponid;
        break;
      }

      // optional uint32 weaponid = 20;
      case 20: {
        if (tag == 160) {
         parse_weaponid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_armorid;
        break;
      }

      // optional uint32 armorid = 21;
      case 21: {
        if (tag == 168) {
         parse_armorid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armorid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_guildid;
        break;
      }

      // optional uint32 guildid = 30;
      case 30: {
        if (tag == 240) {
         parse_guildid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_guildname;
        break;
      }

      // optional string guildname = 31;
      case 31: {
        if (tag == 250) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_AOI_NEW.guildname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_AOI_NEW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_AOI_NEW)
  return false;
#undef DO_
}

void SC_AOI_NEW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_AOI_NEW)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 actortype = 4;
  if (this->actortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actortype(), output);
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->baselook(), output);
  }

  // optional uint32 prof = 6;
  if (this->prof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prof(), output);
  }

  // optional uint32 lev = 7;
  if (this->lev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lev(), output);
  }

  // optional uint32 campid = 8;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->campid(), output);
  }

  // optional uint32 hp = 9;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hp(), output);
  }

  // optional uint32 hpmax = 10;
  if (this->hpmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hpmax(), output);
  }

  // optional uint32 movespd = 11;
  if (this->movespd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->movespd(), output);
  }

  // optional uint64 ownerid = 12;
  if (this->ownerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ownerid(), output);
  }

  // optional float posx = 13;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->posx(), output);
  }

  // optional float posy = 14;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->posy(), output);
  }

  // optional float face = 15;
  if (this->face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->face(), output);
  }

  // optional uint32 weaponid = 20;
  if (this->weaponid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->weaponid(), output);
  }

  // optional uint32 armorid = 21;
  if (this->armorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->armorid(), output);
  }

  // optional uint32 guildid = 30;
  if (this->guildid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->guildid(), output);
  }

  // optional string guildname = 31;
  if (this->guildname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->guildname(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_AOI_NEW)
}

::google::protobuf::uint8* SC_AOI_NEW::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_NEW)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 actortype = 4;
  if (this->actortype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actortype(), target);
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->baselook(), target);
  }

  // optional uint32 prof = 6;
  if (this->prof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prof(), target);
  }

  // optional uint32 lev = 7;
  if (this->lev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lev(), target);
  }

  // optional uint32 campid = 8;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->campid(), target);
  }

  // optional uint32 hp = 9;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hp(), target);
  }

  // optional uint32 hpmax = 10;
  if (this->hpmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hpmax(), target);
  }

  // optional uint32 movespd = 11;
  if (this->movespd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->movespd(), target);
  }

  // optional uint64 ownerid = 12;
  if (this->ownerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ownerid(), target);
  }

  // optional float posx = 13;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->posx(), target);
  }

  // optional float posy = 14;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->posy(), target);
  }

  // optional float face = 15;
  if (this->face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->face(), target);
  }

  // optional uint32 weaponid = 20;
  if (this->weaponid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->weaponid(), target);
  }

  // optional uint32 armorid = 21;
  if (this->armorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->armorid(), target);
  }

  // optional uint32 guildid = 30;
  if (this->guildid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->guildid(), target);
  }

  // optional string guildname = 31;
  if (this->guildname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->guildname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_NEW)
  return target;
}

size_t SC_AOI_NEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_NEW)
  size_t total_size = 0;

  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 actortype = 4;
  if (this->actortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actortype());
  }

  // optional uint32 baselook = 5;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baselook());
  }

  // optional uint32 prof = 6;
  if (this->prof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prof());
  }

  // optional uint32 lev = 7;
  if (this->lev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lev());
  }

  // optional uint32 campid = 8;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  // optional uint32 hp = 9;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // optional uint32 hpmax = 10;
  if (this->hpmax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hpmax());
  }

  // optional uint32 movespd = 11;
  if (this->movespd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->movespd());
  }

  // optional uint64 ownerid = 12;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ownerid());
  }

  // optional float posx = 13;
  if (this->posx() != 0) {
    total_size += 1 + 4;
  }

  // optional float posy = 14;
  if (this->posy() != 0) {
    total_size += 1 + 4;
  }

  // optional float face = 15;
  if (this->face() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 weaponid = 20;
  if (this->weaponid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weaponid());
  }

  // optional uint32 armorid = 21;
  if (this->armorid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->armorid());
  }

  // optional uint32 guildid = 30;
  if (this->guildid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guildid());
  }

  // optional string guildname = 31;
  if (this->guildname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guildname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AOI_NEW::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_NEW)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_AOI_NEW* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_AOI_NEW>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_NEW)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_NEW)
    UnsafeMergeFrom(*source);
  }
}

void SC_AOI_NEW::MergeFrom(const SC_AOI_NEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_NEW)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_AOI_NEW::UnsafeMergeFrom(const SC_AOI_NEW& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.actortype() != 0) {
    set_actortype(from.actortype());
  }
  if (from.baselook() != 0) {
    set_baselook(from.baselook());
  }
  if (from.prof() != 0) {
    set_prof(from.prof());
  }
  if (from.lev() != 0) {
    set_lev(from.lev());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.hpmax() != 0) {
    set_hpmax(from.hpmax());
  }
  if (from.movespd() != 0) {
    set_movespd(from.movespd());
  }
  if (from.ownerid() != 0) {
    set_ownerid(from.ownerid());
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.face() != 0) {
    set_face(from.face());
  }
  if (from.weaponid() != 0) {
    set_weaponid(from.weaponid());
  }
  if (from.armorid() != 0) {
    set_armorid(from.armorid());
  }
  if (from.guildid() != 0) {
    set_guildid(from.guildid());
  }
  if (from.guildname().size() > 0) {

    guildname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
}

void SC_AOI_NEW::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_NEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_NEW::CopyFrom(const SC_AOI_NEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_NEW)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_AOI_NEW::IsInitialized() const {

  return true;
}

void SC_AOI_NEW::Swap(SC_AOI_NEW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_AOI_NEW::InternalSwap(SC_AOI_NEW* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  name_.Swap(&other->name_);
  std::swap(actortype_, other->actortype_);
  std::swap(baselook_, other->baselook_);
  std::swap(prof_, other->prof_);
  std::swap(lev_, other->lev_);
  std::swap(campid_, other->campid_);
  std::swap(hp_, other->hp_);
  std::swap(hpmax_, other->hpmax_);
  std::swap(movespd_, other->movespd_);
  std::swap(ownerid_, other->ownerid_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(face_, other->face_);
  std::swap(weaponid_, other->weaponid_);
  std::swap(armorid_, other->armorid_);
  std::swap(guildid_, other->guildid_);
  guildname_.Swap(&other->guildname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_AOI_NEW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_AOI_NEW_descriptor_;
  metadata.reflection = SC_AOI_NEW_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_AOI_NEW

// optional uint32 mapid = 1;
void SC_AOI_NEW::clear_mapid() {
  mapid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.mapid)
  return mapid_;
}
void SC_AOI_NEW::set_mapid(::google::protobuf::uint32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.mapid)
}

// optional uint64 actor_id = 2;
void SC_AOI_NEW::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_AOI_NEW::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.actor_id)
  return actor_id_;
}
void SC_AOI_NEW::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.actor_id)
}

// optional string name = 3;
void SC_AOI_NEW::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_AOI_NEW::name() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_AOI_NEW::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.name)
}
void SC_AOI_NEW::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_AOI_NEW.name)
}
void SC_AOI_NEW::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_AOI_NEW.name)
}
::std::string* SC_AOI_NEW::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_AOI_NEW.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_AOI_NEW::release_name() {
  // @@protoc_insertion_point(field_release:SC_AOI_NEW.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_AOI_NEW::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_AOI_NEW.name)
}

// optional uint32 actortype = 4;
void SC_AOI_NEW::clear_actortype() {
  actortype_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::actortype() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.actortype)
  return actortype_;
}
void SC_AOI_NEW::set_actortype(::google::protobuf::uint32 value) {
  
  actortype_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.actortype)
}

// optional uint32 baselook = 5;
void SC_AOI_NEW::clear_baselook() {
  baselook_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::baselook() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.baselook)
  return baselook_;
}
void SC_AOI_NEW::set_baselook(::google::protobuf::uint32 value) {
  
  baselook_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.baselook)
}

// optional uint32 prof = 6;
void SC_AOI_NEW::clear_prof() {
  prof_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::prof() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.prof)
  return prof_;
}
void SC_AOI_NEW::set_prof(::google::protobuf::uint32 value) {
  
  prof_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.prof)
}

// optional uint32 lev = 7;
void SC_AOI_NEW::clear_lev() {
  lev_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::lev() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.lev)
  return lev_;
}
void SC_AOI_NEW::set_lev(::google::protobuf::uint32 value) {
  
  lev_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.lev)
}

// optional uint32 campid = 8;
void SC_AOI_NEW::clear_campid() {
  campid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::campid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.campid)
  return campid_;
}
void SC_AOI_NEW::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.campid)
}

// optional uint32 hp = 9;
void SC_AOI_NEW::clear_hp() {
  hp_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::hp() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.hp)
  return hp_;
}
void SC_AOI_NEW::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.hp)
}

// optional uint32 hpmax = 10;
void SC_AOI_NEW::clear_hpmax() {
  hpmax_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::hpmax() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.hpmax)
  return hpmax_;
}
void SC_AOI_NEW::set_hpmax(::google::protobuf::uint32 value) {
  
  hpmax_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.hpmax)
}

// optional uint32 movespd = 11;
void SC_AOI_NEW::clear_movespd() {
  movespd_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::movespd() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.movespd)
  return movespd_;
}
void SC_AOI_NEW::set_movespd(::google::protobuf::uint32 value) {
  
  movespd_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.movespd)
}

// optional uint64 ownerid = 12;
void SC_AOI_NEW::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_AOI_NEW::ownerid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.ownerid)
  return ownerid_;
}
void SC_AOI_NEW::set_ownerid(::google::protobuf::uint64 value) {
  
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.ownerid)
}

// optional float posx = 13;
void SC_AOI_NEW::clear_posx() {
  posx_ = 0;
}
float SC_AOI_NEW::posx() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.posx)
  return posx_;
}
void SC_AOI_NEW::set_posx(float value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.posx)
}

// optional float posy = 14;
void SC_AOI_NEW::clear_posy() {
  posy_ = 0;
}
float SC_AOI_NEW::posy() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.posy)
  return posy_;
}
void SC_AOI_NEW::set_posy(float value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.posy)
}

// optional float face = 15;
void SC_AOI_NEW::clear_face() {
  face_ = 0;
}
float SC_AOI_NEW::face() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.face)
  return face_;
}
void SC_AOI_NEW::set_face(float value) {
  
  face_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.face)
}

// optional uint32 weaponid = 20;
void SC_AOI_NEW::clear_weaponid() {
  weaponid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::weaponid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.weaponid)
  return weaponid_;
}
void SC_AOI_NEW::set_weaponid(::google::protobuf::uint32 value) {
  
  weaponid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.weaponid)
}

// optional uint32 armorid = 21;
void SC_AOI_NEW::clear_armorid() {
  armorid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::armorid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.armorid)
  return armorid_;
}
void SC_AOI_NEW::set_armorid(::google::protobuf::uint32 value) {
  
  armorid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.armorid)
}

// optional uint32 guildid = 30;
void SC_AOI_NEW::clear_guildid() {
  guildid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_NEW::guildid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.guildid)
  return guildid_;
}
void SC_AOI_NEW::set_guildid(::google::protobuf::uint32 value) {
  
  guildid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.guildid)
}

// optional string guildname = 31;
void SC_AOI_NEW::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_AOI_NEW::guildname() const {
  // @@protoc_insertion_point(field_get:SC_AOI_NEW.guildname)
  return guildname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_AOI_NEW::set_guildname(const ::std::string& value) {
  
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_AOI_NEW.guildname)
}
void SC_AOI_NEW::set_guildname(const char* value) {
  
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_AOI_NEW.guildname)
}
void SC_AOI_NEW::set_guildname(const char* value, size_t size) {
  
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_AOI_NEW.guildname)
}
::std::string* SC_AOI_NEW::mutable_guildname() {
  
  // @@protoc_insertion_point(field_mutable:SC_AOI_NEW.guildname)
  return guildname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_AOI_NEW::release_guildname() {
  // @@protoc_insertion_point(field_release:SC_AOI_NEW.guildname)
  
  return guildname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_AOI_NEW::set_allocated_guildname(::std::string* guildname) {
  if (guildname != NULL) {
    
  } else {
    
  }
  guildname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:SC_AOI_NEW.guildname)
}

inline const SC_AOI_NEW* SC_AOI_NEW::internal_default_instance() {
  return &SC_AOI_NEW_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_AOI_REMOVE::kMapidFieldNumber;
const int SC_AOI_REMOVE::kIdlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_AOI_REMOVE::SC_AOI_REMOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_REMOVE)
}

void SC_AOI_REMOVE::InitAsDefaultInstance() {
}

SC_AOI_REMOVE::SC_AOI_REMOVE(const SC_AOI_REMOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_AOI_REMOVE)
}

void SC_AOI_REMOVE::SharedCtor() {
  mapid_ = 0u;
  _cached_size_ = 0;
}

SC_AOI_REMOVE::~SC_AOI_REMOVE() {
  // @@protoc_insertion_point(destructor:SC_AOI_REMOVE)
  SharedDtor();
}

void SC_AOI_REMOVE::SharedDtor() {
}

void SC_AOI_REMOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AOI_REMOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_AOI_REMOVE_descriptor_;
}

const SC_AOI_REMOVE& SC_AOI_REMOVE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_AOI_REMOVE> SC_AOI_REMOVE_default_instance_;

SC_AOI_REMOVE* SC_AOI_REMOVE::New(::google::protobuf::Arena* arena) const {
  SC_AOI_REMOVE* n = new SC_AOI_REMOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_AOI_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_REMOVE)
  mapid_ = 0u;
  idlist_.Clear();
}

bool SC_AOI_REMOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_AOI_REMOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_idlist;
        break;
      }

      // repeated uint64 idlist = 2;
      case 2: {
        if (tag == 18) {
         parse_idlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_idlist())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_idlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_AOI_REMOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_AOI_REMOVE)
  return false;
#undef DO_
}

void SC_AOI_REMOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_AOI_REMOVE)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated uint64 idlist = 2;
  if (this->idlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_idlist_cached_byte_size_);
  }
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->idlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_AOI_REMOVE)
}

::google::protobuf::uint8* SC_AOI_REMOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_REMOVE)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated uint64 idlist = 2;
  if (this->idlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _idlist_cached_byte_size_, target);
  }
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->idlist(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_REMOVE)
  return target;
}

size_t SC_AOI_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_REMOVE)
  size_t total_size = 0;

  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapid());
  }

  // repeated uint64 idlist = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->idlist_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->idlist(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _idlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AOI_REMOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_REMOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_AOI_REMOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_AOI_REMOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_REMOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_REMOVE)
    UnsafeMergeFrom(*source);
  }
}

void SC_AOI_REMOVE::MergeFrom(const SC_AOI_REMOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_REMOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_AOI_REMOVE::UnsafeMergeFrom(const SC_AOI_REMOVE& from) {
  GOOGLE_DCHECK(&from != this);
  idlist_.UnsafeMergeFrom(from.idlist_);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
}

void SC_AOI_REMOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_REMOVE::CopyFrom(const SC_AOI_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_REMOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_AOI_REMOVE::IsInitialized() const {

  return true;
}

void SC_AOI_REMOVE::Swap(SC_AOI_REMOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_AOI_REMOVE::InternalSwap(SC_AOI_REMOVE* other) {
  std::swap(mapid_, other->mapid_);
  idlist_.UnsafeArenaSwap(&other->idlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_AOI_REMOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_AOI_REMOVE_descriptor_;
  metadata.reflection = SC_AOI_REMOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_AOI_REMOVE

// optional uint32 mapid = 1;
void SC_AOI_REMOVE::clear_mapid() {
  mapid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_REMOVE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_REMOVE.mapid)
  return mapid_;
}
void SC_AOI_REMOVE::set_mapid(::google::protobuf::uint32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_REMOVE.mapid)
}

// repeated uint64 idlist = 2;
int SC_AOI_REMOVE::idlist_size() const {
  return idlist_.size();
}
void SC_AOI_REMOVE::clear_idlist() {
  idlist_.Clear();
}
::google::protobuf::uint64 SC_AOI_REMOVE::idlist(int index) const {
  // @@protoc_insertion_point(field_get:SC_AOI_REMOVE.idlist)
  return idlist_.Get(index);
}
void SC_AOI_REMOVE::set_idlist(int index, ::google::protobuf::uint64 value) {
  idlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_AOI_REMOVE.idlist)
}
void SC_AOI_REMOVE::add_idlist(::google::protobuf::uint64 value) {
  idlist_.Add(value);
  // @@protoc_insertion_point(field_add:SC_AOI_REMOVE.idlist)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SC_AOI_REMOVE::idlist() const {
  // @@protoc_insertion_point(field_list:SC_AOI_REMOVE.idlist)
  return idlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SC_AOI_REMOVE::mutable_idlist() {
  // @@protoc_insertion_point(field_mutable_list:SC_AOI_REMOVE.idlist)
  return &idlist_;
}

inline const SC_AOI_REMOVE* SC_AOI_REMOVE::internal_default_instance() {
  return &SC_AOI_REMOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_AOI_UPDATE::kMapidFieldNumber;
const int SC_AOI_UPDATE::kActorIdFieldNumber;
const int SC_AOI_UPDATE::kPosxFieldNumber;
const int SC_AOI_UPDATE::kPosyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_AOI_UPDATE::SC_AOI_UPDATE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_UPDATE)
}

void SC_AOI_UPDATE::InitAsDefaultInstance() {
}

SC_AOI_UPDATE::SC_AOI_UPDATE(const SC_AOI_UPDATE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_AOI_UPDATE)
}

void SC_AOI_UPDATE::SharedCtor() {
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(posy_));
  _cached_size_ = 0;
}

SC_AOI_UPDATE::~SC_AOI_UPDATE() {
  // @@protoc_insertion_point(destructor:SC_AOI_UPDATE)
  SharedDtor();
}

void SC_AOI_UPDATE::SharedDtor() {
}

void SC_AOI_UPDATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AOI_UPDATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_AOI_UPDATE_descriptor_;
}

const SC_AOI_UPDATE& SC_AOI_UPDATE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_AOI_UPDATE> SC_AOI_UPDATE_default_instance_;

SC_AOI_UPDATE* SC_AOI_UPDATE::New(::google::protobuf::Arena* arena) const {
  SC_AOI_UPDATE* n = new SC_AOI_UPDATE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_AOI_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_UPDATE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_AOI_UPDATE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_AOI_UPDATE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, posy_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_AOI_UPDATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_AOI_UPDATE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_posx;
        break;
      }

      // optional float posx = 3;
      case 3: {
        if (tag == 29) {
         parse_posx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }

      // optional float posy = 4;
      case 4: {
        if (tag == 37) {
         parse_posy:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_AOI_UPDATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_AOI_UPDATE)
  return false;
#undef DO_
}

void SC_AOI_UPDATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_AOI_UPDATE)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_AOI_UPDATE)
}

::google::protobuf::uint8* SC_AOI_UPDATE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_UPDATE)
  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_UPDATE)
  return target;
}

size_t SC_AOI_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_UPDATE)
  size_t total_size = 0;

  // optional uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional float posx = 3;
  if (this->posx() != 0) {
    total_size += 1 + 4;
  }

  // optional float posy = 4;
  if (this->posy() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AOI_UPDATE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_UPDATE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_AOI_UPDATE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_AOI_UPDATE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_UPDATE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_UPDATE)
    UnsafeMergeFrom(*source);
  }
}

void SC_AOI_UPDATE::MergeFrom(const SC_AOI_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_UPDATE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_AOI_UPDATE::UnsafeMergeFrom(const SC_AOI_UPDATE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
}

void SC_AOI_UPDATE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_UPDATE::CopyFrom(const SC_AOI_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_UPDATE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_AOI_UPDATE::IsInitialized() const {

  return true;
}

void SC_AOI_UPDATE::Swap(SC_AOI_UPDATE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_AOI_UPDATE::InternalSwap(SC_AOI_UPDATE* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_AOI_UPDATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_AOI_UPDATE_descriptor_;
  metadata.reflection = SC_AOI_UPDATE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_AOI_UPDATE

// optional uint32 mapid = 1;
void SC_AOI_UPDATE::clear_mapid() {
  mapid_ = 0u;
}
::google::protobuf::uint32 SC_AOI_UPDATE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.mapid)
  return mapid_;
}
void SC_AOI_UPDATE::set_mapid(::google::protobuf::uint32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.mapid)
}

// optional uint64 actor_id = 2;
void SC_AOI_UPDATE::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_AOI_UPDATE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.actor_id)
  return actor_id_;
}
void SC_AOI_UPDATE::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.actor_id)
}

// optional float posx = 3;
void SC_AOI_UPDATE::clear_posx() {
  posx_ = 0;
}
float SC_AOI_UPDATE::posx() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.posx)
  return posx_;
}
void SC_AOI_UPDATE::set_posx(float value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.posx)
}

// optional float posy = 4;
void SC_AOI_UPDATE::clear_posy() {
  posy_ = 0;
}
float SC_AOI_UPDATE::posy() const {
  // @@protoc_insertion_point(field_get:SC_AOI_UPDATE.posy)
  return posy_;
}
void SC_AOI_UPDATE::set_posy(float value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:SC_AOI_UPDATE.posy)
}

inline const SC_AOI_UPDATE* SC_AOI_UPDATE::internal_default_instance() {
  return &SC_AOI_UPDATE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ATTRIB_CHANGE_Data::kActypeFieldNumber;
const int SC_ATTRIB_CHANGE_Data::kValFieldNumber;
const int SC_ATTRIB_CHANGE_Data::kValstrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ATTRIB_CHANGE_Data::SC_ATTRIB_CHANGE_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ATTRIB_CHANGE.Data)
}

void SC_ATTRIB_CHANGE_Data::InitAsDefaultInstance() {
}

SC_ATTRIB_CHANGE_Data::SC_ATTRIB_CHANGE_Data(const SC_ATTRIB_CHANGE_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ATTRIB_CHANGE.Data)
}

void SC_ATTRIB_CHANGE_Data::SharedCtor() {
  valstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actype_, 0, reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&actype_) + sizeof(val_));
  _cached_size_ = 0;
}

SC_ATTRIB_CHANGE_Data::~SC_ATTRIB_CHANGE_Data() {
  // @@protoc_insertion_point(destructor:SC_ATTRIB_CHANGE.Data)
  SharedDtor();
}

void SC_ATTRIB_CHANGE_Data::SharedDtor() {
  valstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_ATTRIB_CHANGE_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ATTRIB_CHANGE_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ATTRIB_CHANGE_Data_descriptor_;
}

const SC_ATTRIB_CHANGE_Data& SC_ATTRIB_CHANGE_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ATTRIB_CHANGE_Data> SC_ATTRIB_CHANGE_Data_default_instance_;

SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE_Data::New(::google::protobuf::Arena* arena) const {
  SC_ATTRIB_CHANGE_Data* n = new SC_ATTRIB_CHANGE_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ATTRIB_CHANGE_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ATTRIB_CHANGE.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ATTRIB_CHANGE_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ATTRIB_CHANGE_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actype_, val_);
  valstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ATTRIB_CHANGE_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ATTRIB_CHANGE.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actype = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_valstr;
        break;
      }

      // optional string valstr = 3;
      case 3: {
        if (tag == 26) {
         parse_valstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valstr().data(), this->valstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_ATTRIB_CHANGE.Data.valstr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ATTRIB_CHANGE.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ATTRIB_CHANGE.Data)
  return false;
#undef DO_
}

void SC_ATTRIB_CHANGE_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ATTRIB_CHANGE.Data)
  // optional uint32 actype = 1;
  if (this->actype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actype(), output);
  }

  // optional uint32 val = 2;
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  // optional string valstr = 3;
  if (this->valstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valstr().data(), this->valstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_ATTRIB_CHANGE.Data.valstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->valstr(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ATTRIB_CHANGE.Data)
}

::google::protobuf::uint8* SC_ATTRIB_CHANGE_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ATTRIB_CHANGE.Data)
  // optional uint32 actype = 1;
  if (this->actype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actype(), target);
  }

  // optional uint32 val = 2;
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  // optional string valstr = 3;
  if (this->valstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valstr().data(), this->valstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_ATTRIB_CHANGE.Data.valstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->valstr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ATTRIB_CHANGE.Data)
  return target;
}

size_t SC_ATTRIB_CHANGE_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ATTRIB_CHANGE.Data)
  size_t total_size = 0;

  // optional uint32 actype = 1;
  if (this->actype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actype());
  }

  // optional uint32 val = 2;
  if (this->val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->val());
  }

  // optional string valstr = 3;
  if (this->valstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valstr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ATTRIB_CHANGE_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ATTRIB_CHANGE.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ATTRIB_CHANGE_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ATTRIB_CHANGE_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ATTRIB_CHANGE.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ATTRIB_CHANGE.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_ATTRIB_CHANGE_Data::MergeFrom(const SC_ATTRIB_CHANGE_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ATTRIB_CHANGE.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ATTRIB_CHANGE_Data::UnsafeMergeFrom(const SC_ATTRIB_CHANGE_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actype() != 0) {
    set_actype(from.actype());
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
  if (from.valstr().size() > 0) {

    valstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valstr_);
  }
}

void SC_ATTRIB_CHANGE_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ATTRIB_CHANGE.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ATTRIB_CHANGE_Data::CopyFrom(const SC_ATTRIB_CHANGE_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ATTRIB_CHANGE.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ATTRIB_CHANGE_Data::IsInitialized() const {

  return true;
}

void SC_ATTRIB_CHANGE_Data::Swap(SC_ATTRIB_CHANGE_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ATTRIB_CHANGE_Data::InternalSwap(SC_ATTRIB_CHANGE_Data* other) {
  std::swap(actype_, other->actype_);
  std::swap(val_, other->val_);
  valstr_.Swap(&other->valstr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ATTRIB_CHANGE_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ATTRIB_CHANGE_Data_descriptor_;
  metadata.reflection = SC_ATTRIB_CHANGE_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ATTRIB_CHANGE::kActorIdFieldNumber;
const int SC_ATTRIB_CHANGE::kDatalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ATTRIB_CHANGE::SC_ATTRIB_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ATTRIB_CHANGE)
}

void SC_ATTRIB_CHANGE::InitAsDefaultInstance() {
}

SC_ATTRIB_CHANGE::SC_ATTRIB_CHANGE(const SC_ATTRIB_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ATTRIB_CHANGE)
}

void SC_ATTRIB_CHANGE::SharedCtor() {
  actor_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SC_ATTRIB_CHANGE::~SC_ATTRIB_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_ATTRIB_CHANGE)
  SharedDtor();
}

void SC_ATTRIB_CHANGE::SharedDtor() {
}

void SC_ATTRIB_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ATTRIB_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ATTRIB_CHANGE_descriptor_;
}

const SC_ATTRIB_CHANGE& SC_ATTRIB_CHANGE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ATTRIB_CHANGE> SC_ATTRIB_CHANGE_default_instance_;

SC_ATTRIB_CHANGE* SC_ATTRIB_CHANGE::New(::google::protobuf::Arena* arena) const {
  SC_ATTRIB_CHANGE* n = new SC_ATTRIB_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ATTRIB_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ATTRIB_CHANGE)
  actor_id_ = GOOGLE_ULONGLONG(0);
  datalist_.Clear();
}

bool SC_ATTRIB_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ATTRIB_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datalist;
        break;
      }

      // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
      case 2: {
        if (tag == 18) {
         parse_datalist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_datalist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ATTRIB_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ATTRIB_CHANGE)
  return false;
#undef DO_
}

void SC_ATTRIB_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ATTRIB_CHANGE)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datalist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ATTRIB_CHANGE)
}

::google::protobuf::uint8* SC_ATTRIB_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ATTRIB_CHANGE)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  for (unsigned int i = 0, n = this->datalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->datalist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ATTRIB_CHANGE)
  return target;
}

size_t SC_ATTRIB_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ATTRIB_CHANGE)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  {
    unsigned int count = this->datalist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datalist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ATTRIB_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ATTRIB_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ATTRIB_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ATTRIB_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ATTRIB_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ATTRIB_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_ATTRIB_CHANGE::MergeFrom(const SC_ATTRIB_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ATTRIB_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ATTRIB_CHANGE::UnsafeMergeFrom(const SC_ATTRIB_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  datalist_.MergeFrom(from.datalist_);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
}

void SC_ATTRIB_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ATTRIB_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ATTRIB_CHANGE::CopyFrom(const SC_ATTRIB_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ATTRIB_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ATTRIB_CHANGE::IsInitialized() const {

  return true;
}

void SC_ATTRIB_CHANGE::Swap(SC_ATTRIB_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ATTRIB_CHANGE::InternalSwap(SC_ATTRIB_CHANGE* other) {
  std::swap(actor_id_, other->actor_id_);
  datalist_.UnsafeArenaSwap(&other->datalist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ATTRIB_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ATTRIB_CHANGE_descriptor_;
  metadata.reflection = SC_ATTRIB_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ATTRIB_CHANGE_Data

// optional uint32 actype = 1;
void SC_ATTRIB_CHANGE_Data::clear_actype() {
  actype_ = 0u;
}
::google::protobuf::uint32 SC_ATTRIB_CHANGE_Data::actype() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.actype)
  return actype_;
}
void SC_ATTRIB_CHANGE_Data::set_actype(::google::protobuf::uint32 value) {
  
  actype_ = value;
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.actype)
}

// optional uint32 val = 2;
void SC_ATTRIB_CHANGE_Data::clear_val() {
  val_ = 0u;
}
::google::protobuf::uint32 SC_ATTRIB_CHANGE_Data::val() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.val)
  return val_;
}
void SC_ATTRIB_CHANGE_Data::set_val(::google::protobuf::uint32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.val)
}

// optional string valstr = 3;
void SC_ATTRIB_CHANGE_Data::clear_valstr() {
  valstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_ATTRIB_CHANGE_Data::valstr() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.Data.valstr)
  return valstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ATTRIB_CHANGE_Data::set_valstr(const ::std::string& value) {
  
  valstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.Data.valstr)
}
void SC_ATTRIB_CHANGE_Data::set_valstr(const char* value) {
  
  valstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_ATTRIB_CHANGE.Data.valstr)
}
void SC_ATTRIB_CHANGE_Data::set_valstr(const char* value, size_t size) {
  
  valstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_ATTRIB_CHANGE.Data.valstr)
}
::std::string* SC_ATTRIB_CHANGE_Data::mutable_valstr() {
  
  // @@protoc_insertion_point(field_mutable:SC_ATTRIB_CHANGE.Data.valstr)
  return valstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_ATTRIB_CHANGE_Data::release_valstr() {
  // @@protoc_insertion_point(field_release:SC_ATTRIB_CHANGE.Data.valstr)
  
  return valstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ATTRIB_CHANGE_Data::set_allocated_valstr(::std::string* valstr) {
  if (valstr != NULL) {
    
  } else {
    
  }
  valstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valstr);
  // @@protoc_insertion_point(field_set_allocated:SC_ATTRIB_CHANGE.Data.valstr)
}

inline const SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE_Data::internal_default_instance() {
  return &SC_ATTRIB_CHANGE_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_ATTRIB_CHANGE

// optional uint64 actor_id = 1;
void SC_ATTRIB_CHANGE::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_ATTRIB_CHANGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.actor_id)
  return actor_id_;
}
void SC_ATTRIB_CHANGE::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ATTRIB_CHANGE.actor_id)
}

// repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
int SC_ATTRIB_CHANGE::datalist_size() const {
  return datalist_.size();
}
void SC_ATTRIB_CHANGE::clear_datalist() {
  datalist_.Clear();
}
const ::SC_ATTRIB_CHANGE_Data& SC_ATTRIB_CHANGE::datalist(int index) const {
  // @@protoc_insertion_point(field_get:SC_ATTRIB_CHANGE.datalist)
  return datalist_.Get(index);
}
::SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ATTRIB_CHANGE.datalist)
  return datalist_.Mutable(index);
}
::SC_ATTRIB_CHANGE_Data* SC_ATTRIB_CHANGE::add_datalist() {
  // @@protoc_insertion_point(field_add:SC_ATTRIB_CHANGE.datalist)
  return datalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >*
SC_ATTRIB_CHANGE::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:SC_ATTRIB_CHANGE.datalist)
  return &datalist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_ATTRIB_CHANGE_Data >&
SC_ATTRIB_CHANGE::datalist() const {
  // @@protoc_insertion_point(field_list:SC_ATTRIB_CHANGE.datalist)
  return datalist_;
}

inline const SC_ATTRIB_CHANGE* SC_ATTRIB_CHANGE::internal_default_instance() {
  return &SC_ATTRIB_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_STATUS_LIST::kActorIdFieldNumber;
const int SC_STATUS_LIST::kStatusTypeidListFieldNumber;
const int SC_STATUS_LIST::kStatusLevListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_STATUS_LIST::SC_STATUS_LIST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_LIST)
}

void SC_STATUS_LIST::InitAsDefaultInstance() {
}

SC_STATUS_LIST::SC_STATUS_LIST(const SC_STATUS_LIST& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_LIST)
}

void SC_STATUS_LIST::SharedCtor() {
  actor_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SC_STATUS_LIST::~SC_STATUS_LIST() {
  // @@protoc_insertion_point(destructor:SC_STATUS_LIST)
  SharedDtor();
}

void SC_STATUS_LIST::SharedDtor() {
}

void SC_STATUS_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_STATUS_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STATUS_LIST_descriptor_;
}

const SC_STATUS_LIST& SC_STATUS_LIST::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_STATUS_LIST> SC_STATUS_LIST_default_instance_;

SC_STATUS_LIST* SC_STATUS_LIST::New(::google::protobuf::Arena* arena) const {
  SC_STATUS_LIST* n = new SC_STATUS_LIST;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_STATUS_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_LIST)
  actor_id_ = GOOGLE_ULONGLONG(0);
  status_typeid_list_.Clear();
  status_lev_list_.Clear();
}

bool SC_STATUS_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_STATUS_LIST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status_typeid_list;
        break;
      }

      // repeated uint32 status_typeid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_status_typeid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_status_typeid_list())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_status_typeid_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status_lev_list;
        break;
      }

      // repeated uint32 status_lev_list = 3;
      case 3: {
        if (tag == 26) {
         parse_status_lev_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_status_lev_list())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_status_lev_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_STATUS_LIST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_STATUS_LIST)
  return false;
#undef DO_
}

void SC_STATUS_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_STATUS_LIST)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // repeated uint32 status_typeid_list = 2;
  if (this->status_typeid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_status_typeid_list_cached_byte_size_);
  }
  for (int i = 0; i < this->status_typeid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->status_typeid_list(i), output);
  }

  // repeated uint32 status_lev_list = 3;
  if (this->status_lev_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_status_lev_list_cached_byte_size_);
  }
  for (int i = 0; i < this->status_lev_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->status_lev_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_STATUS_LIST)
}

::google::protobuf::uint8* SC_STATUS_LIST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_LIST)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // repeated uint32 status_typeid_list = 2;
  if (this->status_typeid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _status_typeid_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->status_typeid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->status_typeid_list(i), target);
  }

  // repeated uint32 status_lev_list = 3;
  if (this->status_lev_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _status_lev_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->status_lev_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->status_lev_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_LIST)
  return target;
}

size_t SC_STATUS_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_LIST)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // repeated uint32 status_typeid_list = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->status_typeid_list_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->status_typeid_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _status_typeid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 status_lev_list = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->status_lev_list_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->status_lev_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _status_lev_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_STATUS_LIST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_LIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_STATUS_LIST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_STATUS_LIST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_LIST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_LIST)
    UnsafeMergeFrom(*source);
  }
}

void SC_STATUS_LIST::MergeFrom(const SC_STATUS_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_LIST)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_STATUS_LIST::UnsafeMergeFrom(const SC_STATUS_LIST& from) {
  GOOGLE_DCHECK(&from != this);
  status_typeid_list_.UnsafeMergeFrom(from.status_typeid_list_);
  status_lev_list_.UnsafeMergeFrom(from.status_lev_list_);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
}

void SC_STATUS_LIST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_LIST::CopyFrom(const SC_STATUS_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_LIST)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_STATUS_LIST::IsInitialized() const {

  return true;
}

void SC_STATUS_LIST::Swap(SC_STATUS_LIST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_STATUS_LIST::InternalSwap(SC_STATUS_LIST* other) {
  std::swap(actor_id_, other->actor_id_);
  status_typeid_list_.UnsafeArenaSwap(&other->status_typeid_list_);
  status_lev_list_.UnsafeArenaSwap(&other->status_lev_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_STATUS_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_STATUS_LIST_descriptor_;
  metadata.reflection = SC_STATUS_LIST_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_STATUS_LIST

// optional uint64 actor_id = 1;
void SC_STATUS_LIST::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_STATUS_LIST::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.actor_id)
  return actor_id_;
}
void SC_STATUS_LIST::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.actor_id)
}

// repeated uint32 status_typeid_list = 2;
int SC_STATUS_LIST::status_typeid_list_size() const {
  return status_typeid_list_.size();
}
void SC_STATUS_LIST::clear_status_typeid_list() {
  status_typeid_list_.Clear();
}
::google::protobuf::uint32 SC_STATUS_LIST::status_typeid_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.status_typeid_list)
  return status_typeid_list_.Get(index);
}
void SC_STATUS_LIST::set_status_typeid_list(int index, ::google::protobuf::uint32 value) {
  status_typeid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.status_typeid_list)
}
void SC_STATUS_LIST::add_status_typeid_list(::google::protobuf::uint32 value) {
  status_typeid_list_.Add(value);
  // @@protoc_insertion_point(field_add:SC_STATUS_LIST.status_typeid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SC_STATUS_LIST::status_typeid_list() const {
  // @@protoc_insertion_point(field_list:SC_STATUS_LIST.status_typeid_list)
  return status_typeid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SC_STATUS_LIST::mutable_status_typeid_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_STATUS_LIST.status_typeid_list)
  return &status_typeid_list_;
}

// repeated uint32 status_lev_list = 3;
int SC_STATUS_LIST::status_lev_list_size() const {
  return status_lev_list_.size();
}
void SC_STATUS_LIST::clear_status_lev_list() {
  status_lev_list_.Clear();
}
::google::protobuf::uint32 SC_STATUS_LIST::status_lev_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_STATUS_LIST.status_lev_list)
  return status_lev_list_.Get(index);
}
void SC_STATUS_LIST::set_status_lev_list(int index, ::google::protobuf::uint32 value) {
  status_lev_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_STATUS_LIST.status_lev_list)
}
void SC_STATUS_LIST::add_status_lev_list(::google::protobuf::uint32 value) {
  status_lev_list_.Add(value);
  // @@protoc_insertion_point(field_add:SC_STATUS_LIST.status_lev_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SC_STATUS_LIST::status_lev_list() const {
  // @@protoc_insertion_point(field_list:SC_STATUS_LIST.status_lev_list)
  return status_lev_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SC_STATUS_LIST::mutable_status_lev_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_STATUS_LIST.status_lev_list)
  return &status_lev_list_;
}

inline const SC_STATUS_LIST* SC_STATUS_LIST::internal_default_instance() {
  return &SC_STATUS_LIST_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_STATUS_INFO_Data::kStatusidFieldNumber;
const int SC_STATUS_INFO_Data::kStatuslevFieldNumber;
const int SC_STATUS_INFO_Data::kPowerFieldNumber;
const int SC_STATUS_INFO_Data::kSecFieldNumber;
const int SC_STATUS_INFO_Data::kTimesFieldNumber;
const int SC_STATUS_INFO_Data::kLaststampFieldNumber;
const int SC_STATUS_INFO_Data::kIdcasterFieldNumber;
const int SC_STATUS_INFO_Data::kIspauseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_STATUS_INFO_Data::SC_STATUS_INFO_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_INFO.Data)
}

void SC_STATUS_INFO_Data::InitAsDefaultInstance() {
}

SC_STATUS_INFO_Data::SC_STATUS_INFO_Data(const SC_STATUS_INFO_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_INFO.Data)
}

void SC_STATUS_INFO_Data::SharedCtor() {
  ::memset(&statusid_, 0, reinterpret_cast<char*>(&ispause_) -
    reinterpret_cast<char*>(&statusid_) + sizeof(ispause_));
  _cached_size_ = 0;
}

SC_STATUS_INFO_Data::~SC_STATUS_INFO_Data() {
  // @@protoc_insertion_point(destructor:SC_STATUS_INFO.Data)
  SharedDtor();
}

void SC_STATUS_INFO_Data::SharedDtor() {
}

void SC_STATUS_INFO_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_STATUS_INFO_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STATUS_INFO_Data_descriptor_;
}

const SC_STATUS_INFO_Data& SC_STATUS_INFO_Data::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_STATUS_INFO_Data> SC_STATUS_INFO_Data_default_instance_;

SC_STATUS_INFO_Data* SC_STATUS_INFO_Data::New(::google::protobuf::Arena* arena) const {
  SC_STATUS_INFO_Data* n = new SC_STATUS_INFO_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_STATUS_INFO_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_INFO.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_STATUS_INFO_Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_STATUS_INFO_Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(statusid_, ispause_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_STATUS_INFO_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_STATUS_INFO.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 statusid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_statuslev;
        break;
      }

      // optional uint32 statuslev = 2;
      case 2: {
        if (tag == 16) {
         parse_statuslev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statuslev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (tag == 24) {
         parse_power:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sec;
        break;
      }

      // optional int32 sec = 4;
      case 4: {
        if (tag == 32) {
         parse_sec:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional int32 times = 5;
      case 5: {
        if (tag == 40) {
         parse_times:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_laststamp;
        break;
      }

      // optional uint32 laststamp = 6;
      case 6: {
        if (tag == 48) {
         parse_laststamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laststamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_idcaster;
        break;
      }

      // optional uint64 idcaster = 7;
      case 7: {
        if (tag == 56) {
         parse_idcaster:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idcaster_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ispause;
        break;
      }

      // optional bool ispause = 8;
      case 8: {
        if (tag == 64) {
         parse_ispause:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_STATUS_INFO.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_STATUS_INFO.Data)
  return false;
#undef DO_
}

void SC_STATUS_INFO_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_STATUS_INFO.Data)
  // optional uint32 statusid = 1;
  if (this->statusid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->statusid(), output);
  }

  // optional uint32 statuslev = 2;
  if (this->statuslev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statuslev(), output);
  }

  // optional int32 power = 3;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // optional int32 sec = 4;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sec(), output);
  }

  // optional int32 times = 5;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times(), output);
  }

  // optional uint32 laststamp = 6;
  if (this->laststamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->laststamp(), output);
  }

  // optional uint64 idcaster = 7;
  if (this->idcaster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->idcaster(), output);
  }

  // optional bool ispause = 8;
  if (this->ispause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ispause(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_STATUS_INFO.Data)
}

::google::protobuf::uint8* SC_STATUS_INFO_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_INFO.Data)
  // optional uint32 statusid = 1;
  if (this->statusid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->statusid(), target);
  }

  // optional uint32 statuslev = 2;
  if (this->statuslev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->statuslev(), target);
  }

  // optional int32 power = 3;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // optional int32 sec = 4;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sec(), target);
  }

  // optional int32 times = 5;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->times(), target);
  }

  // optional uint32 laststamp = 6;
  if (this->laststamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->laststamp(), target);
  }

  // optional uint64 idcaster = 7;
  if (this->idcaster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->idcaster(), target);
  }

  // optional bool ispause = 8;
  if (this->ispause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ispause(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_INFO.Data)
  return target;
}

size_t SC_STATUS_INFO_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_INFO.Data)
  size_t total_size = 0;

  // optional uint32 statusid = 1;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statusid());
  }

  // optional uint32 statuslev = 2;
  if (this->statuslev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statuslev());
  }

  // optional int32 power = 3;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->power());
  }

  // optional int32 sec = 4;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());
  }

  // optional int32 times = 5;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  // optional uint32 laststamp = 6;
  if (this->laststamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->laststamp());
  }

  // optional uint64 idcaster = 7;
  if (this->idcaster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idcaster());
  }

  // optional bool ispause = 8;
  if (this->ispause() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_STATUS_INFO_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_INFO.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_STATUS_INFO_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_STATUS_INFO_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_INFO.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_INFO.Data)
    UnsafeMergeFrom(*source);
  }
}

void SC_STATUS_INFO_Data::MergeFrom(const SC_STATUS_INFO_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_INFO.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_STATUS_INFO_Data::UnsafeMergeFrom(const SC_STATUS_INFO_Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.statusid() != 0) {
    set_statusid(from.statusid());
  }
  if (from.statuslev() != 0) {
    set_statuslev(from.statuslev());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.laststamp() != 0) {
    set_laststamp(from.laststamp());
  }
  if (from.idcaster() != 0) {
    set_idcaster(from.idcaster());
  }
  if (from.ispause() != 0) {
    set_ispause(from.ispause());
  }
}

void SC_STATUS_INFO_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_INFO.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_INFO_Data::CopyFrom(const SC_STATUS_INFO_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_INFO.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_STATUS_INFO_Data::IsInitialized() const {

  return true;
}

void SC_STATUS_INFO_Data::Swap(SC_STATUS_INFO_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_STATUS_INFO_Data::InternalSwap(SC_STATUS_INFO_Data* other) {
  std::swap(statusid_, other->statusid_);
  std::swap(statuslev_, other->statuslev_);
  std::swap(power_, other->power_);
  std::swap(sec_, other->sec_);
  std::swap(times_, other->times_);
  std::swap(laststamp_, other->laststamp_);
  std::swap(idcaster_, other->idcaster_);
  std::swap(ispause_, other->ispause_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_STATUS_INFO_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_STATUS_INFO_Data_descriptor_;
  metadata.reflection = SC_STATUS_INFO_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_STATUS_INFO::kActorIdFieldNumber;
const int SC_STATUS_INFO::kStatuslistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_STATUS_INFO::SC_STATUS_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_INFO)
}

void SC_STATUS_INFO::InitAsDefaultInstance() {
}

SC_STATUS_INFO::SC_STATUS_INFO(const SC_STATUS_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_INFO)
}

void SC_STATUS_INFO::SharedCtor() {
  actor_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SC_STATUS_INFO::~SC_STATUS_INFO() {
  // @@protoc_insertion_point(destructor:SC_STATUS_INFO)
  SharedDtor();
}

void SC_STATUS_INFO::SharedDtor() {
}

void SC_STATUS_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_STATUS_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STATUS_INFO_descriptor_;
}

const SC_STATUS_INFO& SC_STATUS_INFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_STATUS_INFO> SC_STATUS_INFO_default_instance_;

SC_STATUS_INFO* SC_STATUS_INFO::New(::google::protobuf::Arena* arena) const {
  SC_STATUS_INFO* n = new SC_STATUS_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_STATUS_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_INFO)
  actor_id_ = GOOGLE_ULONGLONG(0);
  statuslist_.Clear();
}

bool SC_STATUS_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_STATUS_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statuslist;
        break;
      }

      // repeated .SC_STATUS_INFO.Data statuslist = 2;
      case 2: {
        if (tag == 18) {
         parse_statuslist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_statuslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statuslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_statuslist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_STATUS_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_STATUS_INFO)
  return false;
#undef DO_
}

void SC_STATUS_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_STATUS_INFO)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  for (unsigned int i = 0, n = this->statuslist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statuslist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_STATUS_INFO)
}

::google::protobuf::uint8* SC_STATUS_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_INFO)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  for (unsigned int i = 0, n = this->statuslist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->statuslist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_INFO)
  return target;
}

size_t SC_STATUS_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_INFO)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  {
    unsigned int count = this->statuslist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statuslist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_STATUS_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_STATUS_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_STATUS_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_STATUS_INFO::MergeFrom(const SC_STATUS_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_STATUS_INFO::UnsafeMergeFrom(const SC_STATUS_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  statuslist_.MergeFrom(from.statuslist_);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
}

void SC_STATUS_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_INFO::CopyFrom(const SC_STATUS_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_STATUS_INFO::IsInitialized() const {

  return true;
}

void SC_STATUS_INFO::Swap(SC_STATUS_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_STATUS_INFO::InternalSwap(SC_STATUS_INFO* other) {
  std::swap(actor_id_, other->actor_id_);
  statuslist_.UnsafeArenaSwap(&other->statuslist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_STATUS_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_STATUS_INFO_descriptor_;
  metadata.reflection = SC_STATUS_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_STATUS_INFO_Data

// optional uint32 statusid = 1;
void SC_STATUS_INFO_Data::clear_statusid() {
  statusid_ = 0u;
}
::google::protobuf::uint32 SC_STATUS_INFO_Data::statusid() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.statusid)
  return statusid_;
}
void SC_STATUS_INFO_Data::set_statusid(::google::protobuf::uint32 value) {
  
  statusid_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.statusid)
}

// optional uint32 statuslev = 2;
void SC_STATUS_INFO_Data::clear_statuslev() {
  statuslev_ = 0u;
}
::google::protobuf::uint32 SC_STATUS_INFO_Data::statuslev() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.statuslev)
  return statuslev_;
}
void SC_STATUS_INFO_Data::set_statuslev(::google::protobuf::uint32 value) {
  
  statuslev_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.statuslev)
}

// optional int32 power = 3;
void SC_STATUS_INFO_Data::clear_power() {
  power_ = 0;
}
::google::protobuf::int32 SC_STATUS_INFO_Data::power() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.power)
  return power_;
}
void SC_STATUS_INFO_Data::set_power(::google::protobuf::int32 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.power)
}

// optional int32 sec = 4;
void SC_STATUS_INFO_Data::clear_sec() {
  sec_ = 0;
}
::google::protobuf::int32 SC_STATUS_INFO_Data::sec() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.sec)
  return sec_;
}
void SC_STATUS_INFO_Data::set_sec(::google::protobuf::int32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.sec)
}

// optional int32 times = 5;
void SC_STATUS_INFO_Data::clear_times() {
  times_ = 0;
}
::google::protobuf::int32 SC_STATUS_INFO_Data::times() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.times)
  return times_;
}
void SC_STATUS_INFO_Data::set_times(::google::protobuf::int32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.times)
}

// optional uint32 laststamp = 6;
void SC_STATUS_INFO_Data::clear_laststamp() {
  laststamp_ = 0u;
}
::google::protobuf::uint32 SC_STATUS_INFO_Data::laststamp() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.laststamp)
  return laststamp_;
}
void SC_STATUS_INFO_Data::set_laststamp(::google::protobuf::uint32 value) {
  
  laststamp_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.laststamp)
}

// optional uint64 idcaster = 7;
void SC_STATUS_INFO_Data::clear_idcaster() {
  idcaster_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_STATUS_INFO_Data::idcaster() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.idcaster)
  return idcaster_;
}
void SC_STATUS_INFO_Data::set_idcaster(::google::protobuf::uint64 value) {
  
  idcaster_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.idcaster)
}

// optional bool ispause = 8;
void SC_STATUS_INFO_Data::clear_ispause() {
  ispause_ = false;
}
bool SC_STATUS_INFO_Data::ispause() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.Data.ispause)
  return ispause_;
}
void SC_STATUS_INFO_Data::set_ispause(bool value) {
  
  ispause_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.Data.ispause)
}

inline const SC_STATUS_INFO_Data* SC_STATUS_INFO_Data::internal_default_instance() {
  return &SC_STATUS_INFO_Data_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_STATUS_INFO

// optional uint64 actor_id = 1;
void SC_STATUS_INFO::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_STATUS_INFO::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.actor_id)
  return actor_id_;
}
void SC_STATUS_INFO::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_INFO.actor_id)
}

// repeated .SC_STATUS_INFO.Data statuslist = 2;
int SC_STATUS_INFO::statuslist_size() const {
  return statuslist_.size();
}
void SC_STATUS_INFO::clear_statuslist() {
  statuslist_.Clear();
}
const ::SC_STATUS_INFO_Data& SC_STATUS_INFO::statuslist(int index) const {
  // @@protoc_insertion_point(field_get:SC_STATUS_INFO.statuslist)
  return statuslist_.Get(index);
}
::SC_STATUS_INFO_Data* SC_STATUS_INFO::mutable_statuslist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_STATUS_INFO.statuslist)
  return statuslist_.Mutable(index);
}
::SC_STATUS_INFO_Data* SC_STATUS_INFO::add_statuslist() {
  // @@protoc_insertion_point(field_add:SC_STATUS_INFO.statuslist)
  return statuslist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_STATUS_INFO_Data >*
SC_STATUS_INFO::mutable_statuslist() {
  // @@protoc_insertion_point(field_mutable_list:SC_STATUS_INFO.statuslist)
  return &statuslist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_STATUS_INFO_Data >&
SC_STATUS_INFO::statuslist() const {
  // @@protoc_insertion_point(field_list:SC_STATUS_INFO.statuslist)
  return statuslist_;
}

inline const SC_STATUS_INFO* SC_STATUS_INFO::internal_default_instance() {
  return &SC_STATUS_INFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_STATUS_ACTION_ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STATUS_ACTION_ACTION_descriptor_;
}
bool SC_STATUS_ACTION_ACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_ATTACH;
const SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_DETACH;
const SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_EFFECT;
const SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::ACTION_MIN;
const SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::ACTION_MAX;
const int SC_STATUS_ACTION::ACTION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_STATUS_ACTION::kActorIdFieldNumber;
const int SC_STATUS_ACTION::kActionFieldNumber;
const int SC_STATUS_ACTION::kStatusidFieldNumber;
const int SC_STATUS_ACTION::kStatuslevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_STATUS_ACTION::SC_STATUS_ACTION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_ACTION)
}

void SC_STATUS_ACTION::InitAsDefaultInstance() {
}

SC_STATUS_ACTION::SC_STATUS_ACTION(const SC_STATUS_ACTION& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_ACTION)
}

void SC_STATUS_ACTION::SharedCtor() {
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&statuslev_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(statuslev_));
  _cached_size_ = 0;
}

SC_STATUS_ACTION::~SC_STATUS_ACTION() {
  // @@protoc_insertion_point(destructor:SC_STATUS_ACTION)
  SharedDtor();
}

void SC_STATUS_ACTION::SharedDtor() {
}

void SC_STATUS_ACTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_STATUS_ACTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STATUS_ACTION_descriptor_;
}

const SC_STATUS_ACTION& SC_STATUS_ACTION::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_STATUS_ACTION> SC_STATUS_ACTION_default_instance_;

SC_STATUS_ACTION* SC_STATUS_ACTION::New(::google::protobuf::Arena* arena) const {
  SC_STATUS_ACTION* n = new SC_STATUS_ACTION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_STATUS_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_ACTION)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_STATUS_ACTION, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_STATUS_ACTION*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, statuslev_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_STATUS_ACTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_STATUS_ACTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .SC_STATUS_ACTION.ACTION action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::SC_STATUS_ACTION_ACTION >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_statusid;
        break;
      }

      // optional uint32 statusid = 3;
      case 3: {
        if (tag == 24) {
         parse_statusid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_statuslev;
        break;
      }

      // optional uint32 statuslev = 4;
      case 4: {
        if (tag == 32) {
         parse_statuslev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statuslev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_STATUS_ACTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_STATUS_ACTION)
  return false;
#undef DO_
}

void SC_STATUS_ACTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_STATUS_ACTION)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // optional .SC_STATUS_ACTION.ACTION action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional uint32 statusid = 3;
  if (this->statusid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->statusid(), output);
  }

  // optional uint32 statuslev = 4;
  if (this->statuslev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->statuslev(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_STATUS_ACTION)
}

::google::protobuf::uint8* SC_STATUS_ACTION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_ACTION)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // optional .SC_STATUS_ACTION.ACTION action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional uint32 statusid = 3;
  if (this->statusid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->statusid(), target);
  }

  // optional uint32 statuslev = 4;
  if (this->statuslev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->statuslev(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_ACTION)
  return target;
}

size_t SC_STATUS_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_ACTION)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional .SC_STATUS_ACTION.ACTION action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional uint32 statusid = 3;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statusid());
  }

  // optional uint32 statuslev = 4;
  if (this->statuslev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statuslev());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_STATUS_ACTION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_ACTION)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_STATUS_ACTION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_STATUS_ACTION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_ACTION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_ACTION)
    UnsafeMergeFrom(*source);
  }
}

void SC_STATUS_ACTION::MergeFrom(const SC_STATUS_ACTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_ACTION)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_STATUS_ACTION::UnsafeMergeFrom(const SC_STATUS_ACTION& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.statusid() != 0) {
    set_statusid(from.statusid());
  }
  if (from.statuslev() != 0) {
    set_statuslev(from.statuslev());
  }
}

void SC_STATUS_ACTION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_ACTION::CopyFrom(const SC_STATUS_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_ACTION)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_STATUS_ACTION::IsInitialized() const {

  return true;
}

void SC_STATUS_ACTION::Swap(SC_STATUS_ACTION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_STATUS_ACTION::InternalSwap(SC_STATUS_ACTION* other) {
  std::swap(actor_id_, other->actor_id_);
  std::swap(action_, other->action_);
  std::swap(statusid_, other->statusid_);
  std::swap(statuslev_, other->statuslev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_STATUS_ACTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_STATUS_ACTION_descriptor_;
  metadata.reflection = SC_STATUS_ACTION_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_STATUS_ACTION

// optional uint64 actor_id = 1;
void SC_STATUS_ACTION::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_STATUS_ACTION::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.actor_id)
  return actor_id_;
}
void SC_STATUS_ACTION::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.actor_id)
}

// optional .SC_STATUS_ACTION.ACTION action = 2;
void SC_STATUS_ACTION::clear_action() {
  action_ = 0;
}
::SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::action() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.action)
  return static_cast< ::SC_STATUS_ACTION_ACTION >(action_);
}
void SC_STATUS_ACTION::set_action(::SC_STATUS_ACTION_ACTION value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.action)
}

// optional uint32 statusid = 3;
void SC_STATUS_ACTION::clear_statusid() {
  statusid_ = 0u;
}
::google::protobuf::uint32 SC_STATUS_ACTION::statusid() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.statusid)
  return statusid_;
}
void SC_STATUS_ACTION::set_statusid(::google::protobuf::uint32 value) {
  
  statusid_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.statusid)
}

// optional uint32 statuslev = 4;
void SC_STATUS_ACTION::clear_statuslev() {
  statuslev_ = 0u;
}
::google::protobuf::uint32 SC_STATUS_ACTION::statuslev() const {
  // @@protoc_insertion_point(field_get:SC_STATUS_ACTION.statuslev)
  return statuslev_;
}
void SC_STATUS_ACTION::set_statuslev(::google::protobuf::uint32 value) {
  
  statuslev_ = value;
  // @@protoc_insertion_point(field_set:SC_STATUS_ACTION.statuslev)
}

inline const SC_STATUS_ACTION* SC_STATUS_ACTION::internal_default_instance() {
  return &SC_STATUS_ACTION_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_MOVE::kMapidFieldNumber;
const int CS_MOVE::kXFieldNumber;
const int CS_MOVE::kYFieldNumber;
const int CS_MOVE::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_MOVE::CS_MOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_MOVE)
}

void CS_MOVE::InitAsDefaultInstance() {
}

CS_MOVE::CS_MOVE(const CS_MOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_MOVE)
}

void CS_MOVE::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(face_));
  _cached_size_ = 0;
}

CS_MOVE::~CS_MOVE() {
  // @@protoc_insertion_point(destructor:CS_MOVE)
  SharedDtor();
}

void CS_MOVE::SharedDtor() {
}

void CS_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_MOVE_descriptor_;
}

const CS_MOVE& CS_MOVE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_MOVE> CS_MOVE_default_instance_;

CS_MOVE* CS_MOVE::New(::google::protobuf::Arena* arena) const {
  CS_MOVE* n = new CS_MOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_MOVE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_MOVE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_MOVE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, face_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_face;
        break;
      }

      // optional float face = 4;
      case 4: {
        if (tag == 37) {
         parse_face:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_MOVE)
  return false;
#undef DO_
}

void CS_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_MOVE)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float face = 4;
  if (this->face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->face(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_MOVE)
}

::google::protobuf::uint8* CS_MOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_MOVE)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float face = 4;
  if (this->face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->face(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_MOVE)
  return target;
}

size_t CS_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_MOVE)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float face = 4;
  if (this->face() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_MOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_MOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_MOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_MOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_MOVE)
    UnsafeMergeFrom(*source);
  }
}

void CS_MOVE::MergeFrom(const CS_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_MOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_MOVE::UnsafeMergeFrom(const CS_MOVE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.face() != 0) {
    set_face(from.face());
  }
}

void CS_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_MOVE::CopyFrom(const CS_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_MOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_MOVE::IsInitialized() const {

  return true;
}

void CS_MOVE::Swap(CS_MOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_MOVE::InternalSwap(CS_MOVE* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(face_, other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_MOVE_descriptor_;
  metadata.reflection = CS_MOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_MOVE

// optional uint64 mapid = 1;
void CS_MOVE::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_MOVE::mapid() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.mapid)
  return mapid_;
}
void CS_MOVE::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CS_MOVE.mapid)
}

// optional float x = 2;
void CS_MOVE::clear_x() {
  x_ = 0;
}
float CS_MOVE::x() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.x)
  return x_;
}
void CS_MOVE::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CS_MOVE.x)
}

// optional float y = 3;
void CS_MOVE::clear_y() {
  y_ = 0;
}
float CS_MOVE::y() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.y)
  return y_;
}
void CS_MOVE::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CS_MOVE.y)
}

// optional float face = 4;
void CS_MOVE::clear_face() {
  face_ = 0;
}
float CS_MOVE::face() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.face)
  return face_;
}
void CS_MOVE::set_face(float value) {
  
  face_ = value;
  // @@protoc_insertion_point(field_set:CS_MOVE.face)
}

inline const CS_MOVE* CS_MOVE::internal_default_instance() {
  return &CS_MOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_CHANGEMAP::kMapidFieldNumber;
const int CS_CHANGEMAP::kLeavepointIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_CHANGEMAP::CS_CHANGEMAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CHANGEMAP)
}

void CS_CHANGEMAP::InitAsDefaultInstance() {
}

CS_CHANGEMAP::CS_CHANGEMAP(const CS_CHANGEMAP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_CHANGEMAP)
}

void CS_CHANGEMAP::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&leavepoint_idx_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(leavepoint_idx_));
  _cached_size_ = 0;
}

CS_CHANGEMAP::~CS_CHANGEMAP() {
  // @@protoc_insertion_point(destructor:CS_CHANGEMAP)
  SharedDtor();
}

void CS_CHANGEMAP::SharedDtor() {
}

void CS_CHANGEMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_CHANGEMAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_CHANGEMAP_descriptor_;
}

const CS_CHANGEMAP& CS_CHANGEMAP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_CHANGEMAP> CS_CHANGEMAP_default_instance_;

CS_CHANGEMAP* CS_CHANGEMAP::New(::google::protobuf::Arena* arena) const {
  CS_CHANGEMAP* n = new CS_CHANGEMAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_CHANGEMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CHANGEMAP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_CHANGEMAP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_CHANGEMAP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, leavepoint_idx_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_CHANGEMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_CHANGEMAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leavepoint_idx;
        break;
      }

      // optional uint32 leavepoint_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_leavepoint_idx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leavepoint_idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_CHANGEMAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_CHANGEMAP)
  return false;
#undef DO_
}

void CS_CHANGEMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_CHANGEMAP)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint32 leavepoint_idx = 2;
  if (this->leavepoint_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leavepoint_idx(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_CHANGEMAP)
}

::google::protobuf::uint8* CS_CHANGEMAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_CHANGEMAP)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint32 leavepoint_idx = 2;
  if (this->leavepoint_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leavepoint_idx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_CHANGEMAP)
  return target;
}

size_t CS_CHANGEMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CHANGEMAP)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint32 leavepoint_idx = 2;
  if (this->leavepoint_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leavepoint_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_CHANGEMAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CHANGEMAP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_CHANGEMAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_CHANGEMAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CHANGEMAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CHANGEMAP)
    UnsafeMergeFrom(*source);
  }
}

void CS_CHANGEMAP::MergeFrom(const CS_CHANGEMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CHANGEMAP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_CHANGEMAP::UnsafeMergeFrom(const CS_CHANGEMAP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.leavepoint_idx() != 0) {
    set_leavepoint_idx(from.leavepoint_idx());
  }
}

void CS_CHANGEMAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CHANGEMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CHANGEMAP::CopyFrom(const CS_CHANGEMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CHANGEMAP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_CHANGEMAP::IsInitialized() const {

  return true;
}

void CS_CHANGEMAP::Swap(CS_CHANGEMAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_CHANGEMAP::InternalSwap(CS_CHANGEMAP* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(leavepoint_idx_, other->leavepoint_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_CHANGEMAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_CHANGEMAP_descriptor_;
  metadata.reflection = CS_CHANGEMAP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CHANGEMAP

// optional uint64 mapid = 1;
void CS_CHANGEMAP::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_CHANGEMAP::mapid() const {
  // @@protoc_insertion_point(field_get:CS_CHANGEMAP.mapid)
  return mapid_;
}
void CS_CHANGEMAP::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CS_CHANGEMAP.mapid)
}

// optional uint32 leavepoint_idx = 2;
void CS_CHANGEMAP::clear_leavepoint_idx() {
  leavepoint_idx_ = 0u;
}
::google::protobuf::uint32 CS_CHANGEMAP::leavepoint_idx() const {
  // @@protoc_insertion_point(field_get:CS_CHANGEMAP.leavepoint_idx)
  return leavepoint_idx_;
}
void CS_CHANGEMAP::set_leavepoint_idx(::google::protobuf::uint32 value) {
  
  leavepoint_idx_ = value;
  // @@protoc_insertion_point(field_set:CS_CHANGEMAP.leavepoint_idx)
}

inline const CS_CHANGEMAP* CS_CHANGEMAP::internal_default_instance() {
  return &CS_CHANGEMAP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_CASTSKILL::kMapidFieldNumber;
const int CS_CASTSKILL::kSkillIdFieldNumber;
const int CS_CASTSKILL::kTargetIdFieldNumber;
const int CS_CASTSKILL::kXFieldNumber;
const int CS_CASTSKILL::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_CASTSKILL::CS_CASTSKILL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CASTSKILL)
}

void CS_CASTSKILL::InitAsDefaultInstance() {
}

CS_CASTSKILL::CS_CASTSKILL(const CS_CASTSKILL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_CASTSKILL)
}

void CS_CASTSKILL::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(y_));
  _cached_size_ = 0;
}

CS_CASTSKILL::~CS_CASTSKILL() {
  // @@protoc_insertion_point(destructor:CS_CASTSKILL)
  SharedDtor();
}

void CS_CASTSKILL::SharedDtor() {
}

void CS_CASTSKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_CASTSKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_CASTSKILL_descriptor_;
}

const CS_CASTSKILL& CS_CASTSKILL::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_CASTSKILL> CS_CASTSKILL_default_instance_;

CS_CASTSKILL* CS_CASTSKILL::New(::google::protobuf::Arena* arena) const {
  CS_CASTSKILL* n = new CS_CASTSKILL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_CASTSKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CASTSKILL)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_CASTSKILL, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_CASTSKILL*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_CASTSKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_CASTSKILL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (tag == 24) {
         parse_target_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (tag == 37) {
         parse_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (tag == 45) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_CASTSKILL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_CASTSKILL)
  return false;
#undef DO_
}

void CS_CASTSKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_CASTSKILL)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // optional uint64 target_id = 3;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // optional float x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_CASTSKILL)
}

::google::protobuf::uint8* CS_CASTSKILL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_CASTSKILL)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  // optional uint64 target_id = 3;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // optional float x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_CASTSKILL)
  return target;
}

size_t CS_CASTSKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CASTSKILL)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // optional uint64 target_id = 3;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_id());
  }

  // optional float x = 4;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 5;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_CASTSKILL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CASTSKILL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_CASTSKILL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_CASTSKILL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CASTSKILL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CASTSKILL)
    UnsafeMergeFrom(*source);
  }
}

void CS_CASTSKILL::MergeFrom(const CS_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CASTSKILL)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_CASTSKILL::UnsafeMergeFrom(const CS_CASTSKILL& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void CS_CASTSKILL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CASTSKILL::CopyFrom(const CS_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CASTSKILL)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_CASTSKILL::IsInitialized() const {

  return true;
}

void CS_CASTSKILL::Swap(CS_CASTSKILL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_CASTSKILL::InternalSwap(CS_CASTSKILL* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(skill_id_, other->skill_id_);
  std::swap(target_id_, other->target_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_CASTSKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_CASTSKILL_descriptor_;
  metadata.reflection = CS_CASTSKILL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CASTSKILL

// optional uint64 mapid = 1;
void CS_CASTSKILL::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_CASTSKILL::mapid() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.mapid)
  return mapid_;
}
void CS_CASTSKILL::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.mapid)
}

// optional uint32 skill_id = 2;
void CS_CASTSKILL::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 CS_CASTSKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.skill_id)
  return skill_id_;
}
void CS_CASTSKILL::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.skill_id)
}

// optional uint64 target_id = 3;
void CS_CASTSKILL::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_CASTSKILL::target_id() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.target_id)
  return target_id_;
}
void CS_CASTSKILL::set_target_id(::google::protobuf::uint64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.target_id)
}

// optional float x = 4;
void CS_CASTSKILL::clear_x() {
  x_ = 0;
}
float CS_CASTSKILL::x() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.x)
  return x_;
}
void CS_CASTSKILL::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.x)
}

// optional float y = 5;
void CS_CASTSKILL::clear_y() {
  y_ = 0;
}
float CS_CASTSKILL::y() const {
  // @@protoc_insertion_point(field_get:CS_CASTSKILL.y)
  return y_;
}
void CS_CASTSKILL::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CS_CASTSKILL.y)
}

inline const CS_CASTSKILL* CS_CASTSKILL::internal_default_instance() {
  return &CS_CASTSKILL_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CASTSKILL::kMapidFieldNumber;
const int SC_CASTSKILL::kActorIdFieldNumber;
const int SC_CASTSKILL::kSkillIdFieldNumber;
const int SC_CASTSKILL::kTargetIdFieldNumber;
const int SC_CASTSKILL::kXFieldNumber;
const int SC_CASTSKILL::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CASTSKILL::SC_CASTSKILL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CASTSKILL)
}

void SC_CASTSKILL::InitAsDefaultInstance() {
}

SC_CASTSKILL::SC_CASTSKILL(const SC_CASTSKILL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_CASTSKILL)
}

void SC_CASTSKILL::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(y_));
  _cached_size_ = 0;
}

SC_CASTSKILL::~SC_CASTSKILL() {
  // @@protoc_insertion_point(destructor:SC_CASTSKILL)
  SharedDtor();
}

void SC_CASTSKILL::SharedDtor() {
}

void SC_CASTSKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CASTSKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CASTSKILL_descriptor_;
}

const SC_CASTSKILL& SC_CASTSKILL::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_CASTSKILL> SC_CASTSKILL_default_instance_;

SC_CASTSKILL* SC_CASTSKILL::New(::google::protobuf::Arena* arena) const {
  SC_CASTSKILL* n = new SC_CASTSKILL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CASTSKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CASTSKILL)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_CASTSKILL, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_CASTSKILL*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_CASTSKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CASTSKILL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (tag == 32) {
         parse_target_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_x;
        break;
      }

      // optional float x = 5;
      case 5: {
        if (tag == 45) {
         parse_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_y;
        break;
      }

      // optional float y = 6;
      case 6: {
        if (tag == 53) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CASTSKILL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CASTSKILL)
  return false;
#undef DO_
}

void SC_CASTSKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CASTSKILL)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // optional uint64 target_id = 4;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  // optional float x = 5;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_CASTSKILL)
}

::google::protobuf::uint8* SC_CASTSKILL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_CASTSKILL)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // optional uint64 target_id = 4;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  // optional float x = 5;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // optional float y = 6;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_CASTSKILL)
  return target;
}

size_t SC_CASTSKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CASTSKILL)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // optional uint64 target_id = 4;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_id());
  }

  // optional float x = 5;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 6;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CASTSKILL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CASTSKILL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_CASTSKILL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CASTSKILL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CASTSKILL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CASTSKILL)
    UnsafeMergeFrom(*source);
  }
}

void SC_CASTSKILL::MergeFrom(const SC_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CASTSKILL)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_CASTSKILL::UnsafeMergeFrom(const SC_CASTSKILL& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void SC_CASTSKILL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CASTSKILL::CopyFrom(const SC_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CASTSKILL)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_CASTSKILL::IsInitialized() const {

  return true;
}

void SC_CASTSKILL::Swap(SC_CASTSKILL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CASTSKILL::InternalSwap(SC_CASTSKILL* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(skill_id_, other->skill_id_);
  std::swap(target_id_, other->target_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CASTSKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_CASTSKILL_descriptor_;
  metadata.reflection = SC_CASTSKILL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CASTSKILL

// optional uint64 mapid = 1;
void SC_CASTSKILL::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_CASTSKILL::mapid() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.mapid)
  return mapid_;
}
void SC_CASTSKILL::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.mapid)
}

// optional uint64 actor_id = 2;
void SC_CASTSKILL::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_CASTSKILL::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.actor_id)
  return actor_id_;
}
void SC_CASTSKILL::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.actor_id)
}

// optional uint32 skill_id = 3;
void SC_CASTSKILL::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 SC_CASTSKILL::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.skill_id)
  return skill_id_;
}
void SC_CASTSKILL::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.skill_id)
}

// optional uint64 target_id = 4;
void SC_CASTSKILL::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_CASTSKILL::target_id() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.target_id)
  return target_id_;
}
void SC_CASTSKILL::set_target_id(::google::protobuf::uint64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.target_id)
}

// optional float x = 5;
void SC_CASTSKILL::clear_x() {
  x_ = 0;
}
float SC_CASTSKILL::x() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.x)
  return x_;
}
void SC_CASTSKILL::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.x)
}

// optional float y = 6;
void SC_CASTSKILL::clear_y() {
  y_ = 0;
}
float SC_CASTSKILL::y() const {
  // @@protoc_insertion_point(field_get:SC_CASTSKILL.y)
  return y_;
}
void SC_CASTSKILL::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SC_CASTSKILL.y)
}

inline const SC_CASTSKILL* SC_CASTSKILL::internal_default_instance() {
  return &SC_CASTSKILL_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SKILL_DAMAGE_DamageInfo::kTargetIdFieldNumber;
const int SC_SKILL_DAMAGE_DamageInfo::kDamageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SKILL_DAMAGE_DamageInfo::SC_SKILL_DAMAGE_DamageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_DAMAGE.DamageInfo)
}

void SC_SKILL_DAMAGE_DamageInfo::InitAsDefaultInstance() {
}

SC_SKILL_DAMAGE_DamageInfo::SC_SKILL_DAMAGE_DamageInfo(const SC_SKILL_DAMAGE_DamageInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_DAMAGE.DamageInfo)
}

void SC_SKILL_DAMAGE_DamageInfo::SharedCtor() {
  ::memset(&target_id_, 0, reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&target_id_) + sizeof(damage_));
  _cached_size_ = 0;
}

SC_SKILL_DAMAGE_DamageInfo::~SC_SKILL_DAMAGE_DamageInfo() {
  // @@protoc_insertion_point(destructor:SC_SKILL_DAMAGE.DamageInfo)
  SharedDtor();
}

void SC_SKILL_DAMAGE_DamageInfo::SharedDtor() {
}

void SC_SKILL_DAMAGE_DamageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SKILL_DAMAGE_DamageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SKILL_DAMAGE_DamageInfo_descriptor_;
}

const SC_SKILL_DAMAGE_DamageInfo& SC_SKILL_DAMAGE_DamageInfo::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SKILL_DAMAGE_DamageInfo> SC_SKILL_DAMAGE_DamageInfo_default_instance_;

SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE_DamageInfo::New(::google::protobuf::Arena* arena) const {
  SC_SKILL_DAMAGE_DamageInfo* n = new SC_SKILL_DAMAGE_DamageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SKILL_DAMAGE_DamageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_DAMAGE.DamageInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SKILL_DAMAGE_DamageInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SKILL_DAMAGE_DamageInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(target_id_, damage_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_SKILL_DAMAGE_DamageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SKILL_DAMAGE.DamageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (tag == 16) {
         parse_damage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SKILL_DAMAGE.DamageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SKILL_DAMAGE.DamageInfo)
  return false;
#undef DO_
}

void SC_SKILL_DAMAGE_DamageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SKILL_DAMAGE.DamageInfo)
  // optional uint64 target_id = 1;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_id(), output);
  }

  // optional int32 damage = 2;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SKILL_DAMAGE.DamageInfo)
}

::google::protobuf::uint8* SC_SKILL_DAMAGE_DamageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_DAMAGE.DamageInfo)
  // optional uint64 target_id = 1;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_id(), target);
  }

  // optional int32 damage = 2;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_DAMAGE.DamageInfo)
  return target;
}

size_t SC_SKILL_DAMAGE_DamageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_DAMAGE.DamageInfo)
  size_t total_size = 0;

  // optional uint64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_id());
  }

  // optional int32 damage = 2;
  if (this->damage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SKILL_DAMAGE_DamageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SKILL_DAMAGE_DamageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SKILL_DAMAGE_DamageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_DAMAGE.DamageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_DAMAGE.DamageInfo)
    UnsafeMergeFrom(*source);
  }
}

void SC_SKILL_DAMAGE_DamageInfo::MergeFrom(const SC_SKILL_DAMAGE_DamageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SKILL_DAMAGE_DamageInfo::UnsafeMergeFrom(const SC_SKILL_DAMAGE_DamageInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
}

void SC_SKILL_DAMAGE_DamageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_DAMAGE_DamageInfo::CopyFrom(const SC_SKILL_DAMAGE_DamageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SKILL_DAMAGE_DamageInfo::IsInitialized() const {

  return true;
}

void SC_SKILL_DAMAGE_DamageInfo::Swap(SC_SKILL_DAMAGE_DamageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SKILL_DAMAGE_DamageInfo::InternalSwap(SC_SKILL_DAMAGE_DamageInfo* other) {
  std::swap(target_id_, other->target_id_);
  std::swap(damage_, other->damage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SKILL_DAMAGE_DamageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SKILL_DAMAGE_DamageInfo_descriptor_;
  metadata.reflection = SC_SKILL_DAMAGE_DamageInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SKILL_DAMAGE::kMapidFieldNumber;
const int SC_SKILL_DAMAGE::kActorIdFieldNumber;
const int SC_SKILL_DAMAGE::kSkillIdFieldNumber;
const int SC_SKILL_DAMAGE::kDamagelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SKILL_DAMAGE::SC_SKILL_DAMAGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_DAMAGE)
}

void SC_SKILL_DAMAGE::InitAsDefaultInstance() {
}

SC_SKILL_DAMAGE::SC_SKILL_DAMAGE(const SC_SKILL_DAMAGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_DAMAGE)
}

void SC_SKILL_DAMAGE::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(skill_id_));
  _cached_size_ = 0;
}

SC_SKILL_DAMAGE::~SC_SKILL_DAMAGE() {
  // @@protoc_insertion_point(destructor:SC_SKILL_DAMAGE)
  SharedDtor();
}

void SC_SKILL_DAMAGE::SharedDtor() {
}

void SC_SKILL_DAMAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SKILL_DAMAGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SKILL_DAMAGE_descriptor_;
}

const SC_SKILL_DAMAGE& SC_SKILL_DAMAGE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SKILL_DAMAGE> SC_SKILL_DAMAGE_default_instance_;

SC_SKILL_DAMAGE* SC_SKILL_DAMAGE::New(::google::protobuf::Arena* arena) const {
  SC_SKILL_DAMAGE* n = new SC_SKILL_DAMAGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SKILL_DAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_DAMAGE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SKILL_DAMAGE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SKILL_DAMAGE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, skill_id_);

#undef ZR_HELPER_
#undef ZR_

  damagelist_.Clear();
}

bool SC_SKILL_DAMAGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SKILL_DAMAGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_damagelist;
        break;
      }

      // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
      case 5: {
        if (tag == 42) {
         parse_damagelist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_damagelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_damagelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_damagelist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SKILL_DAMAGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SKILL_DAMAGE)
  return false;
#undef DO_
}

void SC_SKILL_DAMAGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SKILL_DAMAGE)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  for (unsigned int i = 0, n = this->damagelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->damagelist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SKILL_DAMAGE)
}

::google::protobuf::uint8* SC_SKILL_DAMAGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_DAMAGE)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  for (unsigned int i = 0, n = this->damagelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->damagelist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_DAMAGE)
  return target;
}

size_t SC_SKILL_DAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_DAMAGE)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  {
    unsigned int count = this->damagelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damagelist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SKILL_DAMAGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_DAMAGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SKILL_DAMAGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SKILL_DAMAGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_DAMAGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_DAMAGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_SKILL_DAMAGE::MergeFrom(const SC_SKILL_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_DAMAGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SKILL_DAMAGE::UnsafeMergeFrom(const SC_SKILL_DAMAGE& from) {
  GOOGLE_DCHECK(&from != this);
  damagelist_.MergeFrom(from.damagelist_);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void SC_SKILL_DAMAGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_DAMAGE::CopyFrom(const SC_SKILL_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_DAMAGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SKILL_DAMAGE::IsInitialized() const {

  return true;
}

void SC_SKILL_DAMAGE::Swap(SC_SKILL_DAMAGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SKILL_DAMAGE::InternalSwap(SC_SKILL_DAMAGE* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(skill_id_, other->skill_id_);
  damagelist_.UnsafeArenaSwap(&other->damagelist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SKILL_DAMAGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SKILL_DAMAGE_descriptor_;
  metadata.reflection = SC_SKILL_DAMAGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SKILL_DAMAGE_DamageInfo

// optional uint64 target_id = 1;
void SC_SKILL_DAMAGE_DamageInfo::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_DAMAGE_DamageInfo::target_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.DamageInfo.target_id)
  return target_id_;
}
void SC_SKILL_DAMAGE_DamageInfo::set_target_id(::google::protobuf::uint64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.DamageInfo.target_id)
}

// optional int32 damage = 2;
void SC_SKILL_DAMAGE_DamageInfo::clear_damage() {
  damage_ = 0;
}
::google::protobuf::int32 SC_SKILL_DAMAGE_DamageInfo::damage() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.DamageInfo.damage)
  return damage_;
}
void SC_SKILL_DAMAGE_DamageInfo::set_damage(::google::protobuf::int32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.DamageInfo.damage)
}

inline const SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE_DamageInfo::internal_default_instance() {
  return &SC_SKILL_DAMAGE_DamageInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_SKILL_DAMAGE

// optional uint64 mapid = 1;
void SC_SKILL_DAMAGE::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_DAMAGE::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.mapid)
  return mapid_;
}
void SC_SKILL_DAMAGE::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.mapid)
}

// optional uint64 actor_id = 2;
void SC_SKILL_DAMAGE::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_DAMAGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.actor_id)
  return actor_id_;
}
void SC_SKILL_DAMAGE::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.actor_id)
}

// optional uint32 skill_id = 3;
void SC_SKILL_DAMAGE::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 SC_SKILL_DAMAGE::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.skill_id)
  return skill_id_;
}
void SC_SKILL_DAMAGE::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_DAMAGE.skill_id)
}

// repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
int SC_SKILL_DAMAGE::damagelist_size() const {
  return damagelist_.size();
}
void SC_SKILL_DAMAGE::clear_damagelist() {
  damagelist_.Clear();
}
const ::SC_SKILL_DAMAGE_DamageInfo& SC_SKILL_DAMAGE::damagelist(int index) const {
  // @@protoc_insertion_point(field_get:SC_SKILL_DAMAGE.damagelist)
  return damagelist_.Get(index);
}
::SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE::mutable_damagelist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SKILL_DAMAGE.damagelist)
  return damagelist_.Mutable(index);
}
::SC_SKILL_DAMAGE_DamageInfo* SC_SKILL_DAMAGE::add_damagelist() {
  // @@protoc_insertion_point(field_add:SC_SKILL_DAMAGE.damagelist)
  return damagelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >*
SC_SKILL_DAMAGE::mutable_damagelist() {
  // @@protoc_insertion_point(field_mutable_list:SC_SKILL_DAMAGE.damagelist)
  return &damagelist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_SKILL_DAMAGE_DamageInfo >&
SC_SKILL_DAMAGE::damagelist() const {
  // @@protoc_insertion_point(field_list:SC_SKILL_DAMAGE.damagelist)
  return damagelist_;
}

inline const SC_SKILL_DAMAGE* SC_SKILL_DAMAGE::internal_default_instance() {
  return &SC_SKILL_DAMAGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SKILL_BREAK::kMapidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SKILL_BREAK::CS_SKILL_BREAK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SKILL_BREAK)
}

void CS_SKILL_BREAK::InitAsDefaultInstance() {
}

CS_SKILL_BREAK::CS_SKILL_BREAK(const CS_SKILL_BREAK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_SKILL_BREAK)
}

void CS_SKILL_BREAK::SharedCtor() {
  mapid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_SKILL_BREAK::~CS_SKILL_BREAK() {
  // @@protoc_insertion_point(destructor:CS_SKILL_BREAK)
  SharedDtor();
}

void CS_SKILL_BREAK::SharedDtor() {
}

void CS_SKILL_BREAK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SKILL_BREAK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_SKILL_BREAK_descriptor_;
}

const CS_SKILL_BREAK& CS_SKILL_BREAK::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_SKILL_BREAK> CS_SKILL_BREAK_default_instance_;

CS_SKILL_BREAK* CS_SKILL_BREAK::New(::google::protobuf::Arena* arena) const {
  CS_SKILL_BREAK* n = new CS_SKILL_BREAK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SKILL_BREAK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SKILL_BREAK)
  mapid_ = GOOGLE_ULONGLONG(0);
}

bool CS_SKILL_BREAK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SKILL_BREAK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SKILL_BREAK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SKILL_BREAK)
  return false;
#undef DO_
}

void CS_SKILL_BREAK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SKILL_BREAK)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_SKILL_BREAK)
}

::google::protobuf::uint8* CS_SKILL_BREAK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_SKILL_BREAK)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_SKILL_BREAK)
  return target;
}

size_t CS_SKILL_BREAK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SKILL_BREAK)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SKILL_BREAK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SKILL_BREAK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_SKILL_BREAK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SKILL_BREAK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SKILL_BREAK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SKILL_BREAK)
    UnsafeMergeFrom(*source);
  }
}

void CS_SKILL_BREAK::MergeFrom(const CS_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SKILL_BREAK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_SKILL_BREAK::UnsafeMergeFrom(const CS_SKILL_BREAK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
}

void CS_SKILL_BREAK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SKILL_BREAK::CopyFrom(const CS_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_SKILL_BREAK::IsInitialized() const {

  return true;
}

void CS_SKILL_BREAK::Swap(CS_SKILL_BREAK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SKILL_BREAK::InternalSwap(CS_SKILL_BREAK* other) {
  std::swap(mapid_, other->mapid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SKILL_BREAK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_SKILL_BREAK_descriptor_;
  metadata.reflection = CS_SKILL_BREAK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SKILL_BREAK

// optional uint64 mapid = 1;
void CS_SKILL_BREAK::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_SKILL_BREAK::mapid() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_BREAK.mapid)
  return mapid_;
}
void CS_SKILL_BREAK::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CS_SKILL_BREAK.mapid)
}

inline const CS_SKILL_BREAK* CS_SKILL_BREAK::internal_default_instance() {
  return &CS_SKILL_BREAK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SKILL_BREAK::kMapidFieldNumber;
const int SC_SKILL_BREAK::kActorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SKILL_BREAK::SC_SKILL_BREAK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_BREAK)
}

void SC_SKILL_BREAK::InitAsDefaultInstance() {
}

SC_SKILL_BREAK::SC_SKILL_BREAK(const SC_SKILL_BREAK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_BREAK)
}

void SC_SKILL_BREAK::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&actor_id_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(actor_id_));
  _cached_size_ = 0;
}

SC_SKILL_BREAK::~SC_SKILL_BREAK() {
  // @@protoc_insertion_point(destructor:SC_SKILL_BREAK)
  SharedDtor();
}

void SC_SKILL_BREAK::SharedDtor() {
}

void SC_SKILL_BREAK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SKILL_BREAK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SKILL_BREAK_descriptor_;
}

const SC_SKILL_BREAK& SC_SKILL_BREAK::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SKILL_BREAK> SC_SKILL_BREAK_default_instance_;

SC_SKILL_BREAK* SC_SKILL_BREAK::New(::google::protobuf::Arena* arena) const {
  SC_SKILL_BREAK* n = new SC_SKILL_BREAK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SKILL_BREAK::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_BREAK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SKILL_BREAK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SKILL_BREAK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, actor_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_SKILL_BREAK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SKILL_BREAK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SKILL_BREAK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SKILL_BREAK)
  return false;
#undef DO_
}

void SC_SKILL_BREAK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SKILL_BREAK)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SKILL_BREAK)
}

::google::protobuf::uint8* SC_SKILL_BREAK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_BREAK)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_BREAK)
  return target;
}

size_t SC_SKILL_BREAK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_BREAK)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SKILL_BREAK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_BREAK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SKILL_BREAK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SKILL_BREAK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_BREAK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_BREAK)
    UnsafeMergeFrom(*source);
  }
}

void SC_SKILL_BREAK::MergeFrom(const SC_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_BREAK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SKILL_BREAK::UnsafeMergeFrom(const SC_SKILL_BREAK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
}

void SC_SKILL_BREAK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_BREAK::CopyFrom(const SC_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SKILL_BREAK::IsInitialized() const {

  return true;
}

void SC_SKILL_BREAK::Swap(SC_SKILL_BREAK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SKILL_BREAK::InternalSwap(SC_SKILL_BREAK* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SKILL_BREAK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SKILL_BREAK_descriptor_;
  metadata.reflection = SC_SKILL_BREAK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SKILL_BREAK

// optional uint64 mapid = 1;
void SC_SKILL_BREAK::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_BREAK::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_BREAK.mapid)
  return mapid_;
}
void SC_SKILL_BREAK::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_BREAK.mapid)
}

// optional uint64 actor_id = 2;
void SC_SKILL_BREAK::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_BREAK::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_BREAK.actor_id)
  return actor_id_;
}
void SC_SKILL_BREAK::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_BREAK.actor_id)
}

inline const SC_SKILL_BREAK* SC_SKILL_BREAK::internal_default_instance() {
  return &SC_SKILL_BREAK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SKILL_CHGTARGETPOS::kXFieldNumber;
const int CS_SKILL_CHGTARGETPOS::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SKILL_CHGTARGETPOS::CS_SKILL_CHGTARGETPOS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SKILL_CHGTARGETPOS)
}

void CS_SKILL_CHGTARGETPOS::InitAsDefaultInstance() {
}

CS_SKILL_CHGTARGETPOS::CS_SKILL_CHGTARGETPOS(const CS_SKILL_CHGTARGETPOS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_SKILL_CHGTARGETPOS)
}

void CS_SKILL_CHGTARGETPOS::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

CS_SKILL_CHGTARGETPOS::~CS_SKILL_CHGTARGETPOS() {
  // @@protoc_insertion_point(destructor:CS_SKILL_CHGTARGETPOS)
  SharedDtor();
}

void CS_SKILL_CHGTARGETPOS::SharedDtor() {
}

void CS_SKILL_CHGTARGETPOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SKILL_CHGTARGETPOS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_SKILL_CHGTARGETPOS_descriptor_;
}

const CS_SKILL_CHGTARGETPOS& CS_SKILL_CHGTARGETPOS::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_SKILL_CHGTARGETPOS> CS_SKILL_CHGTARGETPOS_default_instance_;

CS_SKILL_CHGTARGETPOS* CS_SKILL_CHGTARGETPOS::New(::google::protobuf::Arena* arena) const {
  CS_SKILL_CHGTARGETPOS* n = new CS_SKILL_CHGTARGETPOS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SKILL_CHGTARGETPOS::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SKILL_CHGTARGETPOS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_SKILL_CHGTARGETPOS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_SKILL_CHGTARGETPOS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_SKILL_CHGTARGETPOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SKILL_CHGTARGETPOS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SKILL_CHGTARGETPOS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SKILL_CHGTARGETPOS)
  return false;
#undef DO_
}

void CS_SKILL_CHGTARGETPOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SKILL_CHGTARGETPOS)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_SKILL_CHGTARGETPOS)
}

::google::protobuf::uint8* CS_SKILL_CHGTARGETPOS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_SKILL_CHGTARGETPOS)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_SKILL_CHGTARGETPOS)
  return target;
}

size_t CS_SKILL_CHGTARGETPOS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SKILL_CHGTARGETPOS)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SKILL_CHGTARGETPOS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SKILL_CHGTARGETPOS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_SKILL_CHGTARGETPOS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SKILL_CHGTARGETPOS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SKILL_CHGTARGETPOS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SKILL_CHGTARGETPOS)
    UnsafeMergeFrom(*source);
  }
}

void CS_SKILL_CHGTARGETPOS::MergeFrom(const CS_SKILL_CHGTARGETPOS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SKILL_CHGTARGETPOS)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_SKILL_CHGTARGETPOS::UnsafeMergeFrom(const CS_SKILL_CHGTARGETPOS& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void CS_SKILL_CHGTARGETPOS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SKILL_CHGTARGETPOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SKILL_CHGTARGETPOS::CopyFrom(const CS_SKILL_CHGTARGETPOS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SKILL_CHGTARGETPOS)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_SKILL_CHGTARGETPOS::IsInitialized() const {

  return true;
}

void CS_SKILL_CHGTARGETPOS::Swap(CS_SKILL_CHGTARGETPOS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SKILL_CHGTARGETPOS::InternalSwap(CS_SKILL_CHGTARGETPOS* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SKILL_CHGTARGETPOS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_SKILL_CHGTARGETPOS_descriptor_;
  metadata.reflection = CS_SKILL_CHGTARGETPOS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SKILL_CHGTARGETPOS

// optional float x = 1;
void CS_SKILL_CHGTARGETPOS::clear_x() {
  x_ = 0;
}
float CS_SKILL_CHGTARGETPOS::x() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_CHGTARGETPOS.x)
  return x_;
}
void CS_SKILL_CHGTARGETPOS::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CS_SKILL_CHGTARGETPOS.x)
}

// optional float y = 2;
void CS_SKILL_CHGTARGETPOS::clear_y() {
  y_ = 0;
}
float CS_SKILL_CHGTARGETPOS::y() const {
  // @@protoc_insertion_point(field_get:CS_SKILL_CHGTARGETPOS.y)
  return y_;
}
void CS_SKILL_CHGTARGETPOS::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CS_SKILL_CHGTARGETPOS.y)
}

inline const CS_SKILL_CHGTARGETPOS* CS_SKILL_CHGTARGETPOS::internal_default_instance() {
  return &CS_SKILL_CHGTARGETPOS_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SKILL_STUN::kMapidFieldNumber;
const int SC_SKILL_STUN::kActorIdFieldNumber;
const int SC_SKILL_STUN::kSkillIdFieldNumber;
const int SC_SKILL_STUN::kStunMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SKILL_STUN::SC_SKILL_STUN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_STUN)
}

void SC_SKILL_STUN::InitAsDefaultInstance() {
}

SC_SKILL_STUN::SC_SKILL_STUN(const SC_SKILL_STUN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_STUN)
}

void SC_SKILL_STUN::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&stun_ms_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(stun_ms_));
  _cached_size_ = 0;
}

SC_SKILL_STUN::~SC_SKILL_STUN() {
  // @@protoc_insertion_point(destructor:SC_SKILL_STUN)
  SharedDtor();
}

void SC_SKILL_STUN::SharedDtor() {
}

void SC_SKILL_STUN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SKILL_STUN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SKILL_STUN_descriptor_;
}

const SC_SKILL_STUN& SC_SKILL_STUN::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SKILL_STUN> SC_SKILL_STUN_default_instance_;

SC_SKILL_STUN* SC_SKILL_STUN::New(::google::protobuf::Arena* arena) const {
  SC_SKILL_STUN* n = new SC_SKILL_STUN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SKILL_STUN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_STUN)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SKILL_STUN, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SKILL_STUN*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, stun_ms_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_SKILL_STUN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SKILL_STUN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stun_ms;
        break;
      }

      // optional uint32 stun_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_stun_ms:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stun_ms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SKILL_STUN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SKILL_STUN)
  return false;
#undef DO_
}

void SC_SKILL_STUN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SKILL_STUN)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // optional uint32 stun_ms = 4;
  if (this->stun_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stun_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SKILL_STUN)
}

::google::protobuf::uint8* SC_SKILL_STUN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_STUN)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // optional uint32 stun_ms = 4;
  if (this->stun_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stun_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_STUN)
  return target;
}

size_t SC_SKILL_STUN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_STUN)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // optional uint32 stun_ms = 4;
  if (this->stun_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stun_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SKILL_STUN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_STUN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SKILL_STUN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SKILL_STUN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_STUN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_STUN)
    UnsafeMergeFrom(*source);
  }
}

void SC_SKILL_STUN::MergeFrom(const SC_SKILL_STUN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_STUN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SKILL_STUN::UnsafeMergeFrom(const SC_SKILL_STUN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.stun_ms() != 0) {
    set_stun_ms(from.stun_ms());
  }
}

void SC_SKILL_STUN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_STUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_STUN::CopyFrom(const SC_SKILL_STUN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_STUN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SKILL_STUN::IsInitialized() const {

  return true;
}

void SC_SKILL_STUN::Swap(SC_SKILL_STUN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SKILL_STUN::InternalSwap(SC_SKILL_STUN* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(skill_id_, other->skill_id_);
  std::swap(stun_ms_, other->stun_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SKILL_STUN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SKILL_STUN_descriptor_;
  metadata.reflection = SC_SKILL_STUN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SKILL_STUN

// optional uint64 mapid = 1;
void SC_SKILL_STUN::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_STUN::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.mapid)
  return mapid_;
}
void SC_SKILL_STUN::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.mapid)
}

// optional uint64 actor_id = 2;
void SC_SKILL_STUN::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_STUN::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.actor_id)
  return actor_id_;
}
void SC_SKILL_STUN::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.actor_id)
}

// optional uint32 skill_id = 3;
void SC_SKILL_STUN::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 SC_SKILL_STUN::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.skill_id)
  return skill_id_;
}
void SC_SKILL_STUN::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.skill_id)
}

// optional uint32 stun_ms = 4;
void SC_SKILL_STUN::clear_stun_ms() {
  stun_ms_ = 0u;
}
::google::protobuf::uint32 SC_SKILL_STUN::stun_ms() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_STUN.stun_ms)
  return stun_ms_;
}
void SC_SKILL_STUN::set_stun_ms(::google::protobuf::uint32 value) {
  
  stun_ms_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_STUN.stun_ms)
}

inline const SC_SKILL_STUN* SC_SKILL_STUN::internal_default_instance() {
  return &SC_SKILL_STUN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SKILL_EFFACT::kMapidFieldNumber;
const int SC_SKILL_EFFACT::kActorIdFieldNumber;
const int SC_SKILL_EFFACT::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SKILL_EFFACT::SC_SKILL_EFFACT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_EFFACT)
}

void SC_SKILL_EFFACT::InitAsDefaultInstance() {
}

SC_SKILL_EFFACT::SC_SKILL_EFFACT(const SC_SKILL_EFFACT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_EFFACT)
}

void SC_SKILL_EFFACT::SharedCtor() {
  ::memset(&mapid_, 0, reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&mapid_) + sizeof(skill_id_));
  _cached_size_ = 0;
}

SC_SKILL_EFFACT::~SC_SKILL_EFFACT() {
  // @@protoc_insertion_point(destructor:SC_SKILL_EFFACT)
  SharedDtor();
}

void SC_SKILL_EFFACT::SharedDtor() {
}

void SC_SKILL_EFFACT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SKILL_EFFACT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SKILL_EFFACT_descriptor_;
}

const SC_SKILL_EFFACT& SC_SKILL_EFFACT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SKILL_EFFACT> SC_SKILL_EFFACT_default_instance_;

SC_SKILL_EFFACT* SC_SKILL_EFFACT::New(::google::protobuf::Arena* arena) const {
  SC_SKILL_EFFACT* n = new SC_SKILL_EFFACT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SKILL_EFFACT::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_EFFACT)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_SKILL_EFFACT, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_SKILL_EFFACT*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapid_, skill_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_SKILL_EFFACT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SKILL_EFFACT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mapid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint64 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SKILL_EFFACT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SKILL_EFFACT)
  return false;
#undef DO_
}

void SC_SKILL_EFFACT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SKILL_EFFACT)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actor_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SKILL_EFFACT)
}

::google::protobuf::uint8* SC_SKILL_EFFACT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_EFFACT)
  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actor_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_EFFACT)
  return target;
}

size_t SC_SKILL_EFFACT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_EFFACT)
  size_t total_size = 0;

  // optional uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mapid());
  }

  // optional uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SKILL_EFFACT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_EFFACT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SKILL_EFFACT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SKILL_EFFACT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_EFFACT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_EFFACT)
    UnsafeMergeFrom(*source);
  }
}

void SC_SKILL_EFFACT::MergeFrom(const SC_SKILL_EFFACT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_EFFACT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SKILL_EFFACT::UnsafeMergeFrom(const SC_SKILL_EFFACT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mapid() != 0) {
    set_mapid(from.mapid());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void SC_SKILL_EFFACT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_EFFACT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_EFFACT::CopyFrom(const SC_SKILL_EFFACT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_EFFACT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SKILL_EFFACT::IsInitialized() const {

  return true;
}

void SC_SKILL_EFFACT::Swap(SC_SKILL_EFFACT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SKILL_EFFACT::InternalSwap(SC_SKILL_EFFACT* other) {
  std::swap(mapid_, other->mapid_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SKILL_EFFACT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SKILL_EFFACT_descriptor_;
  metadata.reflection = SC_SKILL_EFFACT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SKILL_EFFACT

// optional uint64 mapid = 1;
void SC_SKILL_EFFACT::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_EFFACT::mapid() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.mapid)
  return mapid_;
}
void SC_SKILL_EFFACT::set_mapid(::google::protobuf::uint64 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.mapid)
}

// optional uint64 actor_id = 2;
void SC_SKILL_EFFACT::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_SKILL_EFFACT::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.actor_id)
  return actor_id_;
}
void SC_SKILL_EFFACT::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.actor_id)
}

// optional uint32 skill_id = 3;
void SC_SKILL_EFFACT::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 SC_SKILL_EFFACT::skill_id() const {
  // @@protoc_insertion_point(field_get:SC_SKILL_EFFACT.skill_id)
  return skill_id_;
}
void SC_SKILL_EFFACT::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SKILL_EFFACT.skill_id)
}

inline const SC_SKILL_EFFACT* SC_SKILL_EFFACT::internal_default_instance() {
  return &SC_SKILL_EFFACT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DAMAGE::kActorIdFieldNumber;
const int SC_DAMAGE::kAttackerIdFieldNumber;
const int SC_DAMAGE::kDamageFieldNumber;
const int SC_DAMAGE::kHittypeFieldNumber;
const int SC_DAMAGE::kCrticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DAMAGE::SC_DAMAGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DAMAGE)
}

void SC_DAMAGE::InitAsDefaultInstance() {
}

SC_DAMAGE::SC_DAMAGE(const SC_DAMAGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DAMAGE)
}

void SC_DAMAGE::SharedCtor() {
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&crtical_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(crtical_));
  _cached_size_ = 0;
}

SC_DAMAGE::~SC_DAMAGE() {
  // @@protoc_insertion_point(destructor:SC_DAMAGE)
  SharedDtor();
}

void SC_DAMAGE::SharedDtor() {
}

void SC_DAMAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DAMAGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DAMAGE_descriptor_;
}

const SC_DAMAGE& SC_DAMAGE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DAMAGE> SC_DAMAGE_default_instance_;

SC_DAMAGE* SC_DAMAGE::New(::google::protobuf::Arena* arena) const {
  SC_DAMAGE* n = new SC_DAMAGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DAMAGE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_DAMAGE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_DAMAGE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, crtical_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_DAMAGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DAMAGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attacker_id;
        break;
      }

      // optional uint64 attacker_id = 2;
      case 2: {
        if (tag == 16) {
         parse_attacker_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attacker_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 3;
      case 3: {
        if (tag == 24) {
         parse_damage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hittype;
        break;
      }

      // optional uint32 hittype = 4;
      case 4: {
        if (tag == 32) {
         parse_hittype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hittype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crtical;
        break;
      }

      // optional bool crtical = 5;
      case 5: {
        if (tag == 40) {
         parse_crtical:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crtical_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DAMAGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DAMAGE)
  return false;
#undef DO_
}

void SC_DAMAGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DAMAGE)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attacker_id(), output);
  }

  // optional uint32 damage = 3;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage(), output);
  }

  // optional uint32 hittype = 4;
  if (this->hittype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hittype(), output);
  }

  // optional bool crtical = 5;
  if (this->crtical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->crtical(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DAMAGE)
}

::google::protobuf::uint8* SC_DAMAGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DAMAGE)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attacker_id(), target);
  }

  // optional uint32 damage = 3;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->damage(), target);
  }

  // optional uint32 hittype = 4;
  if (this->hittype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hittype(), target);
  }

  // optional bool crtical = 5;
  if (this->crtical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->crtical(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DAMAGE)
  return target;
}

size_t SC_DAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DAMAGE)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->attacker_id());
  }

  // optional uint32 damage = 3;
  if (this->damage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->damage());
  }

  // optional uint32 hittype = 4;
  if (this->hittype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hittype());
  }

  // optional bool crtical = 5;
  if (this->crtical() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DAMAGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DAMAGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DAMAGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DAMAGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DAMAGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DAMAGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_DAMAGE::MergeFrom(const SC_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DAMAGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DAMAGE::UnsafeMergeFrom(const SC_DAMAGE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.attacker_id() != 0) {
    set_attacker_id(from.attacker_id());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
  if (from.hittype() != 0) {
    set_hittype(from.hittype());
  }
  if (from.crtical() != 0) {
    set_crtical(from.crtical());
  }
}

void SC_DAMAGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DAMAGE::CopyFrom(const SC_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DAMAGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DAMAGE::IsInitialized() const {

  return true;
}

void SC_DAMAGE::Swap(SC_DAMAGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DAMAGE::InternalSwap(SC_DAMAGE* other) {
  std::swap(actor_id_, other->actor_id_);
  std::swap(attacker_id_, other->attacker_id_);
  std::swap(damage_, other->damage_);
  std::swap(hittype_, other->hittype_);
  std::swap(crtical_, other->crtical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DAMAGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DAMAGE_descriptor_;
  metadata.reflection = SC_DAMAGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_DAMAGE

// optional uint64 actor_id = 1;
void SC_DAMAGE::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DAMAGE::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.actor_id)
  return actor_id_;
}
void SC_DAMAGE::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_DAMAGE.actor_id)
}

// optional uint64 attacker_id = 2;
void SC_DAMAGE::clear_attacker_id() {
  attacker_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DAMAGE::attacker_id() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.attacker_id)
  return attacker_id_;
}
void SC_DAMAGE::set_attacker_id(::google::protobuf::uint64 value) {
  
  attacker_id_ = value;
  // @@protoc_insertion_point(field_set:SC_DAMAGE.attacker_id)
}

// optional uint32 damage = 3;
void SC_DAMAGE::clear_damage() {
  damage_ = 0u;
}
::google::protobuf::uint32 SC_DAMAGE::damage() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.damage)
  return damage_;
}
void SC_DAMAGE::set_damage(::google::protobuf::uint32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:SC_DAMAGE.damage)
}

// optional uint32 hittype = 4;
void SC_DAMAGE::clear_hittype() {
  hittype_ = 0u;
}
::google::protobuf::uint32 SC_DAMAGE::hittype() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.hittype)
  return hittype_;
}
void SC_DAMAGE::set_hittype(::google::protobuf::uint32 value) {
  
  hittype_ = value;
  // @@protoc_insertion_point(field_set:SC_DAMAGE.hittype)
}

// optional bool crtical = 5;
void SC_DAMAGE::clear_crtical() {
  crtical_ = false;
}
bool SC_DAMAGE::crtical() const {
  // @@protoc_insertion_point(field_get:SC_DAMAGE.crtical)
  return crtical_;
}
void SC_DAMAGE::set_crtical(bool value) {
  
  crtical_ = value;
  // @@protoc_insertion_point(field_set:SC_DAMAGE.crtical)
}

inline const SC_DAMAGE* SC_DAMAGE::internal_default_instance() {
  return &SC_DAMAGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DEAD::kActorIdFieldNumber;
const int SC_DEAD::kAttackerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DEAD::SC_DEAD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DEAD)
}

void SC_DEAD::InitAsDefaultInstance() {
}

SC_DEAD::SC_DEAD(const SC_DEAD& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DEAD)
}

void SC_DEAD::SharedCtor() {
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&attacker_id_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(attacker_id_));
  _cached_size_ = 0;
}

SC_DEAD::~SC_DEAD() {
  // @@protoc_insertion_point(destructor:SC_DEAD)
  SharedDtor();
}

void SC_DEAD::SharedDtor() {
}

void SC_DEAD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DEAD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DEAD_descriptor_;
}

const SC_DEAD& SC_DEAD::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DEAD> SC_DEAD_default_instance_;

SC_DEAD* SC_DEAD::New(::google::protobuf::Arena* arena) const {
  SC_DEAD* n = new SC_DEAD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DEAD)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_DEAD, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_DEAD*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, attacker_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_DEAD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DEAD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attacker_id;
        break;
      }

      // optional uint64 attacker_id = 2;
      case 2: {
        if (tag == 16) {
         parse_attacker_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attacker_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DEAD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DEAD)
  return false;
#undef DO_
}

void SC_DEAD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DEAD)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attacker_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DEAD)
}

::google::protobuf::uint8* SC_DEAD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DEAD)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attacker_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DEAD)
  return target;
}

size_t SC_DEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DEAD)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->attacker_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DEAD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DEAD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DEAD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DEAD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DEAD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DEAD)
    UnsafeMergeFrom(*source);
  }
}

void SC_DEAD::MergeFrom(const SC_DEAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DEAD)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DEAD::UnsafeMergeFrom(const SC_DEAD& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.attacker_id() != 0) {
    set_attacker_id(from.attacker_id());
  }
}

void SC_DEAD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DEAD::CopyFrom(const SC_DEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DEAD)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DEAD::IsInitialized() const {

  return true;
}

void SC_DEAD::Swap(SC_DEAD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DEAD::InternalSwap(SC_DEAD* other) {
  std::swap(actor_id_, other->actor_id_);
  std::swap(attacker_id_, other->attacker_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DEAD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DEAD_descriptor_;
  metadata.reflection = SC_DEAD_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_DEAD

// optional uint64 actor_id = 1;
void SC_DEAD::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DEAD::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_DEAD.actor_id)
  return actor_id_;
}
void SC_DEAD::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_DEAD.actor_id)
}

// optional uint64 attacker_id = 2;
void SC_DEAD::clear_attacker_id() {
  attacker_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DEAD::attacker_id() const {
  // @@protoc_insertion_point(field_get:SC_DEAD.attacker_id)
  return attacker_id_;
}
void SC_DEAD::set_attacker_id(::google::protobuf::uint64 value) {
  
  attacker_id_ = value;
  // @@protoc_insertion_point(field_set:SC_DEAD.attacker_id)
}

inline const SC_DEAD* SC_DEAD::internal_default_instance() {
  return &SC_DEAD_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_CHANGE_PKMODE::kPkmodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_CHANGE_PKMODE::CS_CHANGE_PKMODE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CHANGE_PKMODE)
}

void CS_CHANGE_PKMODE::InitAsDefaultInstance() {
}

CS_CHANGE_PKMODE::CS_CHANGE_PKMODE(const CS_CHANGE_PKMODE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_CHANGE_PKMODE)
}

void CS_CHANGE_PKMODE::SharedCtor() {
  pkmode_ = 0u;
  _cached_size_ = 0;
}

CS_CHANGE_PKMODE::~CS_CHANGE_PKMODE() {
  // @@protoc_insertion_point(destructor:CS_CHANGE_PKMODE)
  SharedDtor();
}

void CS_CHANGE_PKMODE::SharedDtor() {
}

void CS_CHANGE_PKMODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_CHANGE_PKMODE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_CHANGE_PKMODE_descriptor_;
}

const CS_CHANGE_PKMODE& CS_CHANGE_PKMODE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_CHANGE_PKMODE> CS_CHANGE_PKMODE_default_instance_;

CS_CHANGE_PKMODE* CS_CHANGE_PKMODE::New(::google::protobuf::Arena* arena) const {
  CS_CHANGE_PKMODE* n = new CS_CHANGE_PKMODE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_CHANGE_PKMODE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CHANGE_PKMODE)
  pkmode_ = 0u;
}

bool CS_CHANGE_PKMODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_CHANGE_PKMODE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pkmode = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkmode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_CHANGE_PKMODE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_CHANGE_PKMODE)
  return false;
#undef DO_
}

void CS_CHANGE_PKMODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_CHANGE_PKMODE)
  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pkmode(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_CHANGE_PKMODE)
}

::google::protobuf::uint8* CS_CHANGE_PKMODE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_CHANGE_PKMODE)
  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pkmode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_CHANGE_PKMODE)
  return target;
}

size_t CS_CHANGE_PKMODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CHANGE_PKMODE)
  size_t total_size = 0;

  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pkmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_CHANGE_PKMODE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CHANGE_PKMODE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_CHANGE_PKMODE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_CHANGE_PKMODE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CHANGE_PKMODE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CHANGE_PKMODE)
    UnsafeMergeFrom(*source);
  }
}

void CS_CHANGE_PKMODE::MergeFrom(const CS_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CHANGE_PKMODE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_CHANGE_PKMODE::UnsafeMergeFrom(const CS_CHANGE_PKMODE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pkmode() != 0) {
    set_pkmode(from.pkmode());
  }
}

void CS_CHANGE_PKMODE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CHANGE_PKMODE::CopyFrom(const CS_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_CHANGE_PKMODE::IsInitialized() const {

  return true;
}

void CS_CHANGE_PKMODE::Swap(CS_CHANGE_PKMODE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_CHANGE_PKMODE::InternalSwap(CS_CHANGE_PKMODE* other) {
  std::swap(pkmode_, other->pkmode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_CHANGE_PKMODE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_CHANGE_PKMODE_descriptor_;
  metadata.reflection = CS_CHANGE_PKMODE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CHANGE_PKMODE

// optional uint32 pkmode = 1;
void CS_CHANGE_PKMODE::clear_pkmode() {
  pkmode_ = 0u;
}
::google::protobuf::uint32 CS_CHANGE_PKMODE::pkmode() const {
  // @@protoc_insertion_point(field_get:CS_CHANGE_PKMODE.pkmode)
  return pkmode_;
}
void CS_CHANGE_PKMODE::set_pkmode(::google::protobuf::uint32 value) {
  
  pkmode_ = value;
  // @@protoc_insertion_point(field_set:CS_CHANGE_PKMODE.pkmode)
}

inline const CS_CHANGE_PKMODE* CS_CHANGE_PKMODE::internal_default_instance() {
  return &CS_CHANGE_PKMODE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CHANGE_PKMODE::kPkmodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CHANGE_PKMODE::SC_CHANGE_PKMODE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CHANGE_PKMODE)
}

void SC_CHANGE_PKMODE::InitAsDefaultInstance() {
}

SC_CHANGE_PKMODE::SC_CHANGE_PKMODE(const SC_CHANGE_PKMODE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_CHANGE_PKMODE)
}

void SC_CHANGE_PKMODE::SharedCtor() {
  pkmode_ = 0u;
  _cached_size_ = 0;
}

SC_CHANGE_PKMODE::~SC_CHANGE_PKMODE() {
  // @@protoc_insertion_point(destructor:SC_CHANGE_PKMODE)
  SharedDtor();
}

void SC_CHANGE_PKMODE::SharedDtor() {
}

void SC_CHANGE_PKMODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CHANGE_PKMODE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CHANGE_PKMODE_descriptor_;
}

const SC_CHANGE_PKMODE& SC_CHANGE_PKMODE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_CHANGE_PKMODE> SC_CHANGE_PKMODE_default_instance_;

SC_CHANGE_PKMODE* SC_CHANGE_PKMODE::New(::google::protobuf::Arena* arena) const {
  SC_CHANGE_PKMODE* n = new SC_CHANGE_PKMODE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CHANGE_PKMODE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CHANGE_PKMODE)
  pkmode_ = 0u;
}

bool SC_CHANGE_PKMODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CHANGE_PKMODE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pkmode = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkmode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CHANGE_PKMODE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CHANGE_PKMODE)
  return false;
#undef DO_
}

void SC_CHANGE_PKMODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CHANGE_PKMODE)
  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pkmode(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_CHANGE_PKMODE)
}

::google::protobuf::uint8* SC_CHANGE_PKMODE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_CHANGE_PKMODE)
  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pkmode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_CHANGE_PKMODE)
  return target;
}

size_t SC_CHANGE_PKMODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CHANGE_PKMODE)
  size_t total_size = 0;

  // optional uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pkmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CHANGE_PKMODE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CHANGE_PKMODE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_CHANGE_PKMODE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CHANGE_PKMODE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CHANGE_PKMODE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CHANGE_PKMODE)
    UnsafeMergeFrom(*source);
  }
}

void SC_CHANGE_PKMODE::MergeFrom(const SC_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CHANGE_PKMODE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_CHANGE_PKMODE::UnsafeMergeFrom(const SC_CHANGE_PKMODE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pkmode() != 0) {
    set_pkmode(from.pkmode());
  }
}

void SC_CHANGE_PKMODE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CHANGE_PKMODE::CopyFrom(const SC_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_CHANGE_PKMODE::IsInitialized() const {

  return true;
}

void SC_CHANGE_PKMODE::Swap(SC_CHANGE_PKMODE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CHANGE_PKMODE::InternalSwap(SC_CHANGE_PKMODE* other) {
  std::swap(pkmode_, other->pkmode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CHANGE_PKMODE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_CHANGE_PKMODE_descriptor_;
  metadata.reflection = SC_CHANGE_PKMODE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CHANGE_PKMODE

// optional uint32 pkmode = 1;
void SC_CHANGE_PKMODE::clear_pkmode() {
  pkmode_ = 0u;
}
::google::protobuf::uint32 SC_CHANGE_PKMODE::pkmode() const {
  // @@protoc_insertion_point(field_get:SC_CHANGE_PKMODE.pkmode)
  return pkmode_;
}
void SC_CHANGE_PKMODE::set_pkmode(::google::protobuf::uint32 value) {
  
  pkmode_ = value;
  // @@protoc_insertion_point(field_set:SC_CHANGE_PKMODE.pkmode)
}

inline const SC_CHANGE_PKMODE* SC_CHANGE_PKMODE::internal_default_instance() {
  return &SC_CHANGE_PKMODE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_REBORN::kRebornTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_REBORN::CS_REBORN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_REBORN)
}

void CS_REBORN::InitAsDefaultInstance() {
}

CS_REBORN::CS_REBORN(const CS_REBORN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_REBORN)
}

void CS_REBORN::SharedCtor() {
  reborn_type_ = 0u;
  _cached_size_ = 0;
}

CS_REBORN::~CS_REBORN() {
  // @@protoc_insertion_point(destructor:CS_REBORN)
  SharedDtor();
}

void CS_REBORN::SharedDtor() {
}

void CS_REBORN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_REBORN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_REBORN_descriptor_;
}

const CS_REBORN& CS_REBORN::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_REBORN> CS_REBORN_default_instance_;

CS_REBORN* CS_REBORN::New(::google::protobuf::Arena* arena) const {
  CS_REBORN* n = new CS_REBORN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_REBORN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_REBORN)
  reborn_type_ = 0u;
}

bool CS_REBORN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_REBORN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reborn_type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reborn_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_REBORN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_REBORN)
  return false;
#undef DO_
}

void CS_REBORN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_REBORN)
  // optional uint32 reborn_type = 1;
  if (this->reborn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reborn_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_REBORN)
}

::google::protobuf::uint8* CS_REBORN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_REBORN)
  // optional uint32 reborn_type = 1;
  if (this->reborn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reborn_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_REBORN)
  return target;
}

size_t CS_REBORN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_REBORN)
  size_t total_size = 0;

  // optional uint32 reborn_type = 1;
  if (this->reborn_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reborn_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_REBORN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_REBORN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_REBORN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_REBORN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_REBORN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_REBORN)
    UnsafeMergeFrom(*source);
  }
}

void CS_REBORN::MergeFrom(const CS_REBORN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_REBORN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_REBORN::UnsafeMergeFrom(const CS_REBORN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reborn_type() != 0) {
    set_reborn_type(from.reborn_type());
  }
}

void CS_REBORN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_REBORN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_REBORN::CopyFrom(const CS_REBORN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_REBORN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_REBORN::IsInitialized() const {

  return true;
}

void CS_REBORN::Swap(CS_REBORN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_REBORN::InternalSwap(CS_REBORN* other) {
  std::swap(reborn_type_, other->reborn_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_REBORN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_REBORN_descriptor_;
  metadata.reflection = CS_REBORN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_REBORN

// optional uint32 reborn_type = 1;
void CS_REBORN::clear_reborn_type() {
  reborn_type_ = 0u;
}
::google::protobuf::uint32 CS_REBORN::reborn_type() const {
  // @@protoc_insertion_point(field_get:CS_REBORN.reborn_type)
  return reborn_type_;
}
void CS_REBORN::set_reborn_type(::google::protobuf::uint32 value) {
  
  reborn_type_ = value;
  // @@protoc_insertion_point(field_set:CS_REBORN.reborn_type)
}

inline const CS_REBORN* CS_REBORN::internal_default_instance() {
  return &CS_REBORN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ITEM_INFO::kActorIdFieldNumber;
const int SC_ITEM_INFO::kItemIdFieldNumber;
const int SC_ITEM_INFO::kPositionFieldNumber;
const int SC_ITEM_INFO::kGridFieldNumber;
const int SC_ITEM_INFO::kPileNumFieldNumber;
const int SC_ITEM_INFO::kDuraFieldNumber;
const int SC_ITEM_INFO::kDuraLimitFieldNumber;
const int SC_ITEM_INFO::kExpireTimeFieldNumber;
const int SC_ITEM_INFO::kAdditionLevFieldNumber;
const int SC_ITEM_INFO::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ITEM_INFO::SC_ITEM_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_INFO)
}

void SC_ITEM_INFO::InitAsDefaultInstance() {
}

SC_ITEM_INFO::SC_ITEM_INFO(const SC_ITEM_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_INFO)
}

void SC_ITEM_INFO::SharedCtor() {
  ::memset(&actor_id_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&actor_id_) + sizeof(flag_));
  _cached_size_ = 0;
}

SC_ITEM_INFO::~SC_ITEM_INFO() {
  // @@protoc_insertion_point(destructor:SC_ITEM_INFO)
  SharedDtor();
}

void SC_ITEM_INFO::SharedDtor() {
}

void SC_ITEM_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ITEM_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ITEM_INFO_descriptor_;
}

const SC_ITEM_INFO& SC_ITEM_INFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ITEM_INFO> SC_ITEM_INFO_default_instance_;

SC_ITEM_INFO* SC_ITEM_INFO::New(::google::protobuf::Arena* arena) const {
  SC_ITEM_INFO* n = new SC_ITEM_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ITEM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_INFO)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ITEM_INFO, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ITEM_INFO*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actor_id_, expire_time_);
  ZR_(addition_lev_, flag_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ITEM_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ITEM_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grid;
        break;
      }

      // optional uint32 grid = 4;
      case 4: {
        if (tag == 32) {
         parse_grid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pile_num;
        break;
      }

      // optional uint32 pile_num = 5;
      case 5: {
        if (tag == 40) {
         parse_pile_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pile_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dura;
        break;
      }

      // optional uint32 dura = 6;
      case 6: {
        if (tag == 48) {
         parse_dura:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dura_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dura_limit;
        break;
      }

      // optional uint32 dura_limit = 7;
      case 7: {
        if (tag == 56) {
         parse_dura_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dura_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 8;
      case 8: {
        if (tag == 64) {
         parse_expire_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_addition_lev;
        break;
      }

      // optional uint32 addition_lev = 9;
      case 9: {
        if (tag == 72) {
         parse_addition_lev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addition_lev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 10;
      case 10: {
        if (tag == 80) {
         parse_flag:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ITEM_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ITEM_INFO)
  return false;
#undef DO_
}

void SC_ITEM_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ITEM_INFO)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor_id(), output);
  }

  // optional uint64 item_id = 2;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional uint32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional uint32 grid = 4;
  if (this->grid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->grid(), output);
  }

  // optional uint32 pile_num = 5;
  if (this->pile_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pile_num(), output);
  }

  // optional uint32 dura = 6;
  if (this->dura() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dura(), output);
  }

  // optional uint32 dura_limit = 7;
  if (this->dura_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dura_limit(), output);
  }

  // optional uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->expire_time(), output);
  }

  // optional uint32 addition_lev = 9;
  if (this->addition_lev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->addition_lev(), output);
  }

  // optional uint32 flag = 10;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flag(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ITEM_INFO)
}

::google::protobuf::uint8* SC_ITEM_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_INFO)
  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor_id(), target);
  }

  // optional uint64 item_id = 2;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional uint32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional uint32 grid = 4;
  if (this->grid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->grid(), target);
  }

  // optional uint32 pile_num = 5;
  if (this->pile_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pile_num(), target);
  }

  // optional uint32 dura = 6;
  if (this->dura() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dura(), target);
  }

  // optional uint32 dura_limit = 7;
  if (this->dura_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dura_limit(), target);
  }

  // optional uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->expire_time(), target);
  }

  // optional uint32 addition_lev = 9;
  if (this->addition_lev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->addition_lev(), target);
  }

  // optional uint32 flag = 10;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_INFO)
  return target;
}

size_t SC_ITEM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_INFO)
  size_t total_size = 0;

  // optional uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actor_id());
  }

  // optional uint64 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  // optional uint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional uint32 grid = 4;
  if (this->grid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid());
  }

  // optional uint32 pile_num = 5;
  if (this->pile_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pile_num());
  }

  // optional uint32 dura = 6;
  if (this->dura() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dura());
  }

  // optional uint32 dura_limit = 7;
  if (this->dura_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dura_limit());
  }

  // optional uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expire_time());
  }

  // optional uint32 addition_lev = 9;
  if (this->addition_lev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addition_lev());
  }

  // optional uint32 flag = 10;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ITEM_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ITEM_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ITEM_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_ITEM_INFO::MergeFrom(const SC_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ITEM_INFO::UnsafeMergeFrom(const SC_ITEM_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.grid() != 0) {
    set_grid(from.grid());
  }
  if (from.pile_num() != 0) {
    set_pile_num(from.pile_num());
  }
  if (from.dura() != 0) {
    set_dura(from.dura());
  }
  if (from.dura_limit() != 0) {
    set_dura_limit(from.dura_limit());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
  if (from.addition_lev() != 0) {
    set_addition_lev(from.addition_lev());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void SC_ITEM_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_INFO::CopyFrom(const SC_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ITEM_INFO::IsInitialized() const {

  return true;
}

void SC_ITEM_INFO::Swap(SC_ITEM_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ITEM_INFO::InternalSwap(SC_ITEM_INFO* other) {
  std::swap(actor_id_, other->actor_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(position_, other->position_);
  std::swap(grid_, other->grid_);
  std::swap(pile_num_, other->pile_num_);
  std::swap(dura_, other->dura_);
  std::swap(dura_limit_, other->dura_limit_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(addition_lev_, other->addition_lev_);
  std::swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ITEM_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ITEM_INFO_descriptor_;
  metadata.reflection = SC_ITEM_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ITEM_INFO

// optional uint64 actor_id = 1;
void SC_ITEM_INFO::clear_actor_id() {
  actor_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_ITEM_INFO::actor_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.actor_id)
  return actor_id_;
}
void SC_ITEM_INFO::set_actor_id(::google::protobuf::uint64 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.actor_id)
}

// optional uint64 item_id = 2;
void SC_ITEM_INFO::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_ITEM_INFO::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.item_id)
  return item_id_;
}
void SC_ITEM_INFO::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.item_id)
}

// optional uint32 position = 3;
void SC_ITEM_INFO::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.position)
  return position_;
}
void SC_ITEM_INFO::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.position)
}

// optional uint32 grid = 4;
void SC_ITEM_INFO::clear_grid() {
  grid_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::grid() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.grid)
  return grid_;
}
void SC_ITEM_INFO::set_grid(::google::protobuf::uint32 value) {
  
  grid_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.grid)
}

// optional uint32 pile_num = 5;
void SC_ITEM_INFO::clear_pile_num() {
  pile_num_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::pile_num() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.pile_num)
  return pile_num_;
}
void SC_ITEM_INFO::set_pile_num(::google::protobuf::uint32 value) {
  
  pile_num_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.pile_num)
}

// optional uint32 dura = 6;
void SC_ITEM_INFO::clear_dura() {
  dura_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::dura() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.dura)
  return dura_;
}
void SC_ITEM_INFO::set_dura(::google::protobuf::uint32 value) {
  
  dura_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.dura)
}

// optional uint32 dura_limit = 7;
void SC_ITEM_INFO::clear_dura_limit() {
  dura_limit_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::dura_limit() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.dura_limit)
  return dura_limit_;
}
void SC_ITEM_INFO::set_dura_limit(::google::protobuf::uint32 value) {
  
  dura_limit_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.dura_limit)
}

// optional uint32 expire_time = 8;
void SC_ITEM_INFO::clear_expire_time() {
  expire_time_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::expire_time() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.expire_time)
  return expire_time_;
}
void SC_ITEM_INFO::set_expire_time(::google::protobuf::uint32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.expire_time)
}

// optional uint32 addition_lev = 9;
void SC_ITEM_INFO::clear_addition_lev() {
  addition_lev_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::addition_lev() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.addition_lev)
  return addition_lev_;
}
void SC_ITEM_INFO::set_addition_lev(::google::protobuf::uint32 value) {
  
  addition_lev_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.addition_lev)
}

// optional uint32 flag = 10;
void SC_ITEM_INFO::clear_flag() {
  flag_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_INFO::flag() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_INFO.flag)
  return flag_;
}
void SC_ITEM_INFO::set_flag(::google::protobuf::uint32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_INFO.flag)
}

inline const SC_ITEM_INFO* SC_ITEM_INFO::internal_default_instance() {
  return &SC_ITEM_INFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_ITEM_CHANGE_ChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ITEM_CHANGE_ChangeType_descriptor_;
}
bool SC_ITEM_CHANGE_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeGrid;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangePileNum;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeExpireData;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeDura;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeDuraLimit;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeType_MIN;
const SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeType_MAX;
const int SC_ITEM_CHANGE::ChangeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ITEM_CHANGE_ChangeData::kChangeTypeFieldNumber;
const int SC_ITEM_CHANGE_ChangeData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ITEM_CHANGE_ChangeData::SC_ITEM_CHANGE_ChangeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_CHANGE.ChangeData)
}

void SC_ITEM_CHANGE_ChangeData::InitAsDefaultInstance() {
}

SC_ITEM_CHANGE_ChangeData::SC_ITEM_CHANGE_ChangeData(const SC_ITEM_CHANGE_ChangeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_CHANGE.ChangeData)
}

void SC_ITEM_CHANGE_ChangeData::SharedCtor() {
  ::memset(&change_type_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&change_type_) + sizeof(value_));
  _cached_size_ = 0;
}

SC_ITEM_CHANGE_ChangeData::~SC_ITEM_CHANGE_ChangeData() {
  // @@protoc_insertion_point(destructor:SC_ITEM_CHANGE.ChangeData)
  SharedDtor();
}

void SC_ITEM_CHANGE_ChangeData::SharedDtor() {
}

void SC_ITEM_CHANGE_ChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ITEM_CHANGE_ChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ITEM_CHANGE_ChangeData_descriptor_;
}

const SC_ITEM_CHANGE_ChangeData& SC_ITEM_CHANGE_ChangeData::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ITEM_CHANGE_ChangeData> SC_ITEM_CHANGE_ChangeData_default_instance_;

SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE_ChangeData::New(::google::protobuf::Arena* arena) const {
  SC_ITEM_CHANGE_ChangeData* n = new SC_ITEM_CHANGE_ChangeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ITEM_CHANGE_ChangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_CHANGE.ChangeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ITEM_CHANGE_ChangeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ITEM_CHANGE_ChangeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(change_type_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ITEM_CHANGE_ChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ITEM_CHANGE.ChangeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC_ITEM_CHANGE.ChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::SC_ITEM_CHANGE_ChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ITEM_CHANGE.ChangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ITEM_CHANGE.ChangeData)
  return false;
#undef DO_
}

void SC_ITEM_CHANGE_ChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ITEM_CHANGE.ChangeData)
  // optional .SC_ITEM_CHANGE.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ITEM_CHANGE.ChangeData)
}

::google::protobuf::uint8* SC_ITEM_CHANGE_ChangeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_CHANGE.ChangeData)
  // optional .SC_ITEM_CHANGE.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_CHANGE.ChangeData)
  return target;
}

size_t SC_ITEM_CHANGE_ChangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_CHANGE.ChangeData)
  size_t total_size = 0;

  // optional .SC_ITEM_CHANGE.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ITEM_CHANGE_ChangeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_CHANGE.ChangeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ITEM_CHANGE_ChangeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ITEM_CHANGE_ChangeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_CHANGE.ChangeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_CHANGE.ChangeData)
    UnsafeMergeFrom(*source);
  }
}

void SC_ITEM_CHANGE_ChangeData::MergeFrom(const SC_ITEM_CHANGE_ChangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_CHANGE.ChangeData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ITEM_CHANGE_ChangeData::UnsafeMergeFrom(const SC_ITEM_CHANGE_ChangeData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SC_ITEM_CHANGE_ChangeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_CHANGE.ChangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_CHANGE_ChangeData::CopyFrom(const SC_ITEM_CHANGE_ChangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_CHANGE.ChangeData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ITEM_CHANGE_ChangeData::IsInitialized() const {

  return true;
}

void SC_ITEM_CHANGE_ChangeData::Swap(SC_ITEM_CHANGE_ChangeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ITEM_CHANGE_ChangeData::InternalSwap(SC_ITEM_CHANGE_ChangeData* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ITEM_CHANGE_ChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ITEM_CHANGE_ChangeData_descriptor_;
  metadata.reflection = SC_ITEM_CHANGE_ChangeData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ITEM_CHANGE::kItemIdFieldNumber;
const int SC_ITEM_CHANGE::kPositionFieldNumber;
const int SC_ITEM_CHANGE::kChangeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ITEM_CHANGE::SC_ITEM_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_CHANGE)
}

void SC_ITEM_CHANGE::InitAsDefaultInstance() {
}

SC_ITEM_CHANGE::SC_ITEM_CHANGE(const SC_ITEM_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_CHANGE)
}

void SC_ITEM_CHANGE::SharedCtor() {
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(position_));
  _cached_size_ = 0;
}

SC_ITEM_CHANGE::~SC_ITEM_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_ITEM_CHANGE)
  SharedDtor();
}

void SC_ITEM_CHANGE::SharedDtor() {
}

void SC_ITEM_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ITEM_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ITEM_CHANGE_descriptor_;
}

const SC_ITEM_CHANGE& SC_ITEM_CHANGE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ITEM_CHANGE> SC_ITEM_CHANGE_default_instance_;

SC_ITEM_CHANGE* SC_ITEM_CHANGE::New(::google::protobuf::Arena* arena) const {
  SC_ITEM_CHANGE* n = new SC_ITEM_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ITEM_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_CHANGE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ITEM_CHANGE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ITEM_CHANGE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, position_);

#undef ZR_HELPER_
#undef ZR_

  change_list_.Clear();
}

bool SC_ITEM_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ITEM_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_change_list;
        break;
      }

      // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
      case 3: {
        if (tag == 26) {
         parse_change_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_change_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_change_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_change_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ITEM_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ITEM_CHANGE)
  return false;
#undef DO_
}

void SC_ITEM_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ITEM_CHANGE)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  for (unsigned int i = 0, n = this->change_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ITEM_CHANGE)
}

::google::protobuf::uint8* SC_ITEM_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_CHANGE)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  for (unsigned int i = 0, n = this->change_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->change_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_CHANGE)
  return target;
}

size_t SC_ITEM_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_CHANGE)
  size_t total_size = 0;

  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  {
    unsigned int count = this->change_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ITEM_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ITEM_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ITEM_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_ITEM_CHANGE::MergeFrom(const SC_ITEM_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ITEM_CHANGE::UnsafeMergeFrom(const SC_ITEM_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  change_list_.MergeFrom(from.change_list_);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void SC_ITEM_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_CHANGE::CopyFrom(const SC_ITEM_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ITEM_CHANGE::IsInitialized() const {

  return true;
}

void SC_ITEM_CHANGE::Swap(SC_ITEM_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ITEM_CHANGE::InternalSwap(SC_ITEM_CHANGE* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(position_, other->position_);
  change_list_.UnsafeArenaSwap(&other->change_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ITEM_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ITEM_CHANGE_descriptor_;
  metadata.reflection = SC_ITEM_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ITEM_CHANGE_ChangeData

// optional .SC_ITEM_CHANGE.ChangeType change_type = 1;
void SC_ITEM_CHANGE_ChangeData::clear_change_type() {
  change_type_ = 0;
}
::SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE_ChangeData::change_type() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.ChangeData.change_type)
  return static_cast< ::SC_ITEM_CHANGE_ChangeType >(change_type_);
}
void SC_ITEM_CHANGE_ChangeData::set_change_type(::SC_ITEM_CHANGE_ChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.ChangeData.change_type)
}

// optional uint32 value = 2;
void SC_ITEM_CHANGE_ChangeData::clear_value() {
  value_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_CHANGE_ChangeData::value() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.ChangeData.value)
  return value_;
}
void SC_ITEM_CHANGE_ChangeData::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.ChangeData.value)
}

inline const SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE_ChangeData::internal_default_instance() {
  return &SC_ITEM_CHANGE_ChangeData_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_ITEM_CHANGE

// optional uint64 item_id = 1;
void SC_ITEM_CHANGE::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_ITEM_CHANGE::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.item_id)
  return item_id_;
}
void SC_ITEM_CHANGE::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.item_id)
}

// optional uint32 position = 2;
void SC_ITEM_CHANGE::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_CHANGE::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.position)
  return position_;
}
void SC_ITEM_CHANGE::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_CHANGE.position)
}

// repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
int SC_ITEM_CHANGE::change_list_size() const {
  return change_list_.size();
}
void SC_ITEM_CHANGE::clear_change_list() {
  change_list_.Clear();
}
const ::SC_ITEM_CHANGE_ChangeData& SC_ITEM_CHANGE::change_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ITEM_CHANGE.change_list)
  return change_list_.Get(index);
}
::SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE::mutable_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ITEM_CHANGE.change_list)
  return change_list_.Mutable(index);
}
::SC_ITEM_CHANGE_ChangeData* SC_ITEM_CHANGE::add_change_list() {
  // @@protoc_insertion_point(field_add:SC_ITEM_CHANGE.change_list)
  return change_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >*
SC_ITEM_CHANGE::mutable_change_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ITEM_CHANGE.change_list)
  return &change_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_ITEM_CHANGE_ChangeData >&
SC_ITEM_CHANGE::change_list() const {
  // @@protoc_insertion_point(field_list:SC_ITEM_CHANGE.change_list)
  return change_list_;
}

inline const SC_ITEM_CHANGE* SC_ITEM_CHANGE::internal_default_instance() {
  return &SC_ITEM_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ITEM_DELETE::kItemIdFieldNumber;
const int SC_ITEM_DELETE::kPositionFieldNumber;
const int SC_ITEM_DELETE::kGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ITEM_DELETE::SC_ITEM_DELETE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_DELETE)
}

void SC_ITEM_DELETE::InitAsDefaultInstance() {
}

SC_ITEM_DELETE::SC_ITEM_DELETE(const SC_ITEM_DELETE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_DELETE)
}

void SC_ITEM_DELETE::SharedCtor() {
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&grid_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(grid_));
  _cached_size_ = 0;
}

SC_ITEM_DELETE::~SC_ITEM_DELETE() {
  // @@protoc_insertion_point(destructor:SC_ITEM_DELETE)
  SharedDtor();
}

void SC_ITEM_DELETE::SharedDtor() {
}

void SC_ITEM_DELETE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ITEM_DELETE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ITEM_DELETE_descriptor_;
}

const SC_ITEM_DELETE& SC_ITEM_DELETE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ITEM_DELETE> SC_ITEM_DELETE_default_instance_;

SC_ITEM_DELETE* SC_ITEM_DELETE::New(::google::protobuf::Arena* arena) const {
  SC_ITEM_DELETE* n = new SC_ITEM_DELETE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ITEM_DELETE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_DELETE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ITEM_DELETE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ITEM_DELETE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, grid_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ITEM_DELETE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ITEM_DELETE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grid;
        break;
      }

      // optional uint32 grid = 3;
      case 3: {
        if (tag == 24) {
         parse_grid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ITEM_DELETE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ITEM_DELETE)
  return false;
#undef DO_
}

void SC_ITEM_DELETE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ITEM_DELETE)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 grid = 3;
  if (this->grid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ITEM_DELETE)
}

::google::protobuf::uint8* SC_ITEM_DELETE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_DELETE)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 grid = 3;
  if (this->grid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_DELETE)
  return target;
}

size_t SC_ITEM_DELETE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_DELETE)
  size_t total_size = 0;

  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional uint32 grid = 3;
  if (this->grid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ITEM_DELETE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_DELETE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ITEM_DELETE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ITEM_DELETE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_DELETE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_DELETE)
    UnsafeMergeFrom(*source);
  }
}

void SC_ITEM_DELETE::MergeFrom(const SC_ITEM_DELETE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_DELETE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ITEM_DELETE::UnsafeMergeFrom(const SC_ITEM_DELETE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.grid() != 0) {
    set_grid(from.grid());
  }
}

void SC_ITEM_DELETE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_DELETE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_DELETE::CopyFrom(const SC_ITEM_DELETE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_DELETE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ITEM_DELETE::IsInitialized() const {

  return true;
}

void SC_ITEM_DELETE::Swap(SC_ITEM_DELETE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ITEM_DELETE::InternalSwap(SC_ITEM_DELETE* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(position_, other->position_);
  std::swap(grid_, other->grid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ITEM_DELETE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ITEM_DELETE_descriptor_;
  metadata.reflection = SC_ITEM_DELETE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ITEM_DELETE

// optional uint64 item_id = 1;
void SC_ITEM_DELETE::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_ITEM_DELETE::item_id() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.item_id)
  return item_id_;
}
void SC_ITEM_DELETE::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.item_id)
}

// optional uint32 position = 2;
void SC_ITEM_DELETE::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_DELETE::position() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.position)
  return position_;
}
void SC_ITEM_DELETE::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.position)
}

// optional uint32 grid = 3;
void SC_ITEM_DELETE::clear_grid() {
  grid_ = 0u;
}
::google::protobuf::uint32 SC_ITEM_DELETE::grid() const {
  // @@protoc_insertion_point(field_get:SC_ITEM_DELETE.grid)
  return grid_;
}
void SC_ITEM_DELETE::set_grid(::google::protobuf::uint32 value) {
  
  grid_ = value;
  // @@protoc_insertion_point(field_set:SC_ITEM_DELETE.grid)
}

inline const SC_ITEM_DELETE* SC_ITEM_DELETE::internal_default_instance() {
  return &SC_ITEM_DELETE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_SWAP::kPositionFieldNumber;
const int CS_ITEM_SWAP::kGrid1FieldNumber;
const int CS_ITEM_SWAP::kGrid2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_SWAP::CS_ITEM_SWAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_SWAP)
}

void CS_ITEM_SWAP::InitAsDefaultInstance() {
}

CS_ITEM_SWAP::CS_ITEM_SWAP(const CS_ITEM_SWAP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_SWAP)
}

void CS_ITEM_SWAP::SharedCtor() {
  ::memset(&position_, 0, reinterpret_cast<char*>(&grid2_) -
    reinterpret_cast<char*>(&position_) + sizeof(grid2_));
  _cached_size_ = 0;
}

CS_ITEM_SWAP::~CS_ITEM_SWAP() {
  // @@protoc_insertion_point(destructor:CS_ITEM_SWAP)
  SharedDtor();
}

void CS_ITEM_SWAP::SharedDtor() {
}

void CS_ITEM_SWAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_SWAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_SWAP_descriptor_;
}

const CS_ITEM_SWAP& CS_ITEM_SWAP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_SWAP> CS_ITEM_SWAP_default_instance_;

CS_ITEM_SWAP* CS_ITEM_SWAP::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_SWAP* n = new CS_ITEM_SWAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_SWAP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_SWAP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_ITEM_SWAP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_ITEM_SWAP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(position_, grid2_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_ITEM_SWAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_SWAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grid1;
        break;
      }

      // optional uint32 grid1 = 2;
      case 2: {
        if (tag == 16) {
         parse_grid1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grid2;
        break;
      }

      // optional uint32 grid2 = 3;
      case 3: {
        if (tag == 24) {
         parse_grid2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_SWAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_SWAP)
  return false;
#undef DO_
}

void CS_ITEM_SWAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_SWAP)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid1(), output);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid2(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_SWAP)
}

::google::protobuf::uint8* CS_ITEM_SWAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_SWAP)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid1(), target);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_SWAP)
  return target;
}

size_t CS_ITEM_SWAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_SWAP)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid1());
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_SWAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_SWAP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_SWAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_SWAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_SWAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_SWAP)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_SWAP::MergeFrom(const CS_ITEM_SWAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_SWAP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_SWAP::UnsafeMergeFrom(const CS_ITEM_SWAP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.grid1() != 0) {
    set_grid1(from.grid1());
  }
  if (from.grid2() != 0) {
    set_grid2(from.grid2());
  }
}

void CS_ITEM_SWAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_SWAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_SWAP::CopyFrom(const CS_ITEM_SWAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_SWAP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_SWAP::IsInitialized() const {

  return true;
}

void CS_ITEM_SWAP::Swap(CS_ITEM_SWAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_SWAP::InternalSwap(CS_ITEM_SWAP* other) {
  std::swap(position_, other->position_);
  std::swap(grid1_, other->grid1_);
  std::swap(grid2_, other->grid2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_SWAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_SWAP_descriptor_;
  metadata.reflection = CS_ITEM_SWAP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_SWAP

// optional uint32 position = 1;
void CS_ITEM_SWAP::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SWAP::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.position)
  return position_;
}
void CS_ITEM_SWAP::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.position)
}

// optional uint32 grid1 = 2;
void CS_ITEM_SWAP::clear_grid1() {
  grid1_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SWAP::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.grid1)
  return grid1_;
}
void CS_ITEM_SWAP::set_grid1(::google::protobuf::uint32 value) {
  
  grid1_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.grid1)
}

// optional uint32 grid2 = 3;
void CS_ITEM_SWAP::clear_grid2() {
  grid2_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SWAP::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SWAP.grid2)
  return grid2_;
}
void CS_ITEM_SWAP::set_grid2(::google::protobuf::uint32 value) {
  
  grid2_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SWAP.grid2)
}

inline const CS_ITEM_SWAP* CS_ITEM_SWAP::internal_default_instance() {
  return &CS_ITEM_SWAP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_SPLIT::kPositionFieldNumber;
const int CS_ITEM_SPLIT::kGrid1FieldNumber;
const int CS_ITEM_SPLIT::kGrid2FieldNumber;
const int CS_ITEM_SPLIT::kSplitNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_SPLIT::CS_ITEM_SPLIT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_SPLIT)
}

void CS_ITEM_SPLIT::InitAsDefaultInstance() {
}

CS_ITEM_SPLIT::CS_ITEM_SPLIT(const CS_ITEM_SPLIT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_SPLIT)
}

void CS_ITEM_SPLIT::SharedCtor() {
  ::memset(&position_, 0, reinterpret_cast<char*>(&split_num_) -
    reinterpret_cast<char*>(&position_) + sizeof(split_num_));
  _cached_size_ = 0;
}

CS_ITEM_SPLIT::~CS_ITEM_SPLIT() {
  // @@protoc_insertion_point(destructor:CS_ITEM_SPLIT)
  SharedDtor();
}

void CS_ITEM_SPLIT::SharedDtor() {
}

void CS_ITEM_SPLIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_SPLIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_SPLIT_descriptor_;
}

const CS_ITEM_SPLIT& CS_ITEM_SPLIT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_SPLIT> CS_ITEM_SPLIT_default_instance_;

CS_ITEM_SPLIT* CS_ITEM_SPLIT::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_SPLIT* n = new CS_ITEM_SPLIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_SPLIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_SPLIT)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_ITEM_SPLIT, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_ITEM_SPLIT*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(position_, split_num_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_ITEM_SPLIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_SPLIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grid1;
        break;
      }

      // optional uint32 grid1 = 2;
      case 2: {
        if (tag == 16) {
         parse_grid1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grid2;
        break;
      }

      // optional uint32 grid2 = 3;
      case 3: {
        if (tag == 24) {
         parse_grid2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_split_num;
        break;
      }

      // optional uint32 split_num = 4;
      case 4: {
        if (tag == 32) {
         parse_split_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_SPLIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_SPLIT)
  return false;
#undef DO_
}

void CS_ITEM_SPLIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_SPLIT)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid1(), output);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid2(), output);
  }

  // optional uint32 split_num = 4;
  if (this->split_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->split_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_SPLIT)
}

::google::protobuf::uint8* CS_ITEM_SPLIT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_SPLIT)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid1(), target);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid2(), target);
  }

  // optional uint32 split_num = 4;
  if (this->split_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->split_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_SPLIT)
  return target;
}

size_t CS_ITEM_SPLIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_SPLIT)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid1());
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid2());
  }

  // optional uint32 split_num = 4;
  if (this->split_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->split_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_SPLIT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_SPLIT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_SPLIT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_SPLIT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_SPLIT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_SPLIT)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_SPLIT::MergeFrom(const CS_ITEM_SPLIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_SPLIT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_SPLIT::UnsafeMergeFrom(const CS_ITEM_SPLIT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.grid1() != 0) {
    set_grid1(from.grid1());
  }
  if (from.grid2() != 0) {
    set_grid2(from.grid2());
  }
  if (from.split_num() != 0) {
    set_split_num(from.split_num());
  }
}

void CS_ITEM_SPLIT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_SPLIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_SPLIT::CopyFrom(const CS_ITEM_SPLIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_SPLIT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_SPLIT::IsInitialized() const {

  return true;
}

void CS_ITEM_SPLIT::Swap(CS_ITEM_SPLIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_SPLIT::InternalSwap(CS_ITEM_SPLIT* other) {
  std::swap(position_, other->position_);
  std::swap(grid1_, other->grid1_);
  std::swap(grid2_, other->grid2_);
  std::swap(split_num_, other->split_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_SPLIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_SPLIT_descriptor_;
  metadata.reflection = CS_ITEM_SPLIT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_SPLIT

// optional uint32 position = 1;
void CS_ITEM_SPLIT::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SPLIT::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.position)
  return position_;
}
void CS_ITEM_SPLIT::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.position)
}

// optional uint32 grid1 = 2;
void CS_ITEM_SPLIT::clear_grid1() {
  grid1_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SPLIT::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.grid1)
  return grid1_;
}
void CS_ITEM_SPLIT::set_grid1(::google::protobuf::uint32 value) {
  
  grid1_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.grid1)
}

// optional uint32 grid2 = 3;
void CS_ITEM_SPLIT::clear_grid2() {
  grid2_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SPLIT::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.grid2)
  return grid2_;
}
void CS_ITEM_SPLIT::set_grid2(::google::protobuf::uint32 value) {
  
  grid2_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.grid2)
}

// optional uint32 split_num = 4;
void CS_ITEM_SPLIT::clear_split_num() {
  split_num_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_SPLIT::split_num() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_SPLIT.split_num)
  return split_num_;
}
void CS_ITEM_SPLIT::set_split_num(::google::protobuf::uint32 value) {
  
  split_num_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_SPLIT.split_num)
}

inline const CS_ITEM_SPLIT* CS_ITEM_SPLIT::internal_default_instance() {
  return &CS_ITEM_SPLIT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_COMBINE::kPositionFieldNumber;
const int CS_ITEM_COMBINE::kGrid1FieldNumber;
const int CS_ITEM_COMBINE::kGrid2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_COMBINE::CS_ITEM_COMBINE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_COMBINE)
}

void CS_ITEM_COMBINE::InitAsDefaultInstance() {
}

CS_ITEM_COMBINE::CS_ITEM_COMBINE(const CS_ITEM_COMBINE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_COMBINE)
}

void CS_ITEM_COMBINE::SharedCtor() {
  ::memset(&position_, 0, reinterpret_cast<char*>(&grid2_) -
    reinterpret_cast<char*>(&position_) + sizeof(grid2_));
  _cached_size_ = 0;
}

CS_ITEM_COMBINE::~CS_ITEM_COMBINE() {
  // @@protoc_insertion_point(destructor:CS_ITEM_COMBINE)
  SharedDtor();
}

void CS_ITEM_COMBINE::SharedDtor() {
}

void CS_ITEM_COMBINE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_COMBINE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_COMBINE_descriptor_;
}

const CS_ITEM_COMBINE& CS_ITEM_COMBINE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_COMBINE> CS_ITEM_COMBINE_default_instance_;

CS_ITEM_COMBINE* CS_ITEM_COMBINE::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_COMBINE* n = new CS_ITEM_COMBINE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_COMBINE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_COMBINE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_ITEM_COMBINE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_ITEM_COMBINE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(position_, grid2_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_ITEM_COMBINE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_COMBINE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grid1;
        break;
      }

      // optional uint32 grid1 = 2;
      case 2: {
        if (tag == 16) {
         parse_grid1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grid2;
        break;
      }

      // optional uint32 grid2 = 3;
      case 3: {
        if (tag == 24) {
         parse_grid2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_COMBINE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_COMBINE)
  return false;
#undef DO_
}

void CS_ITEM_COMBINE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_COMBINE)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid1(), output);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid2(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_COMBINE)
}

::google::protobuf::uint8* CS_ITEM_COMBINE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_COMBINE)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid1(), target);
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_COMBINE)
  return target;
}

size_t CS_ITEM_COMBINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_COMBINE)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // optional uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid1());
  }

  // optional uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_COMBINE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_COMBINE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_COMBINE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_COMBINE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_COMBINE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_COMBINE)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_COMBINE::MergeFrom(const CS_ITEM_COMBINE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_COMBINE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_COMBINE::UnsafeMergeFrom(const CS_ITEM_COMBINE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.grid1() != 0) {
    set_grid1(from.grid1());
  }
  if (from.grid2() != 0) {
    set_grid2(from.grid2());
  }
}

void CS_ITEM_COMBINE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_COMBINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_COMBINE::CopyFrom(const CS_ITEM_COMBINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_COMBINE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_COMBINE::IsInitialized() const {

  return true;
}

void CS_ITEM_COMBINE::Swap(CS_ITEM_COMBINE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_COMBINE::InternalSwap(CS_ITEM_COMBINE* other) {
  std::swap(position_, other->position_);
  std::swap(grid1_, other->grid1_);
  std::swap(grid2_, other->grid2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_COMBINE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_COMBINE_descriptor_;
  metadata.reflection = CS_ITEM_COMBINE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_COMBINE

// optional uint32 position = 1;
void CS_ITEM_COMBINE::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_COMBINE::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.position)
  return position_;
}
void CS_ITEM_COMBINE::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.position)
}

// optional uint32 grid1 = 2;
void CS_ITEM_COMBINE::clear_grid1() {
  grid1_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_COMBINE::grid1() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.grid1)
  return grid1_;
}
void CS_ITEM_COMBINE::set_grid1(::google::protobuf::uint32 value) {
  
  grid1_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.grid1)
}

// optional uint32 grid2 = 3;
void CS_ITEM_COMBINE::clear_grid2() {
  grid2_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_COMBINE::grid2() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_COMBINE.grid2)
  return grid2_;
}
void CS_ITEM_COMBINE::set_grid2(::google::protobuf::uint32 value) {
  
  grid2_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_COMBINE.grid2)
}

inline const CS_ITEM_COMBINE* CS_ITEM_COMBINE::internal_default_instance() {
  return &CS_ITEM_COMBINE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_TIDY::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_TIDY::CS_ITEM_TIDY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_TIDY)
}

void CS_ITEM_TIDY::InitAsDefaultInstance() {
}

CS_ITEM_TIDY::CS_ITEM_TIDY(const CS_ITEM_TIDY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_TIDY)
}

void CS_ITEM_TIDY::SharedCtor() {
  position_ = 0u;
  _cached_size_ = 0;
}

CS_ITEM_TIDY::~CS_ITEM_TIDY() {
  // @@protoc_insertion_point(destructor:CS_ITEM_TIDY)
  SharedDtor();
}

void CS_ITEM_TIDY::SharedDtor() {
}

void CS_ITEM_TIDY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_TIDY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_TIDY_descriptor_;
}

const CS_ITEM_TIDY& CS_ITEM_TIDY::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_TIDY> CS_ITEM_TIDY_default_instance_;

CS_ITEM_TIDY* CS_ITEM_TIDY::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_TIDY* n = new CS_ITEM_TIDY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_TIDY::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_TIDY)
  position_ = 0u;
}

bool CS_ITEM_TIDY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_TIDY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_TIDY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_TIDY)
  return false;
#undef DO_
}

void CS_ITEM_TIDY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_TIDY)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_TIDY)
}

::google::protobuf::uint8* CS_ITEM_TIDY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_TIDY)
  // optional uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_TIDY)
  return target;
}

size_t CS_ITEM_TIDY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_TIDY)
  size_t total_size = 0;

  // optional uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_TIDY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_TIDY)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_TIDY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_TIDY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_TIDY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_TIDY)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_TIDY::MergeFrom(const CS_ITEM_TIDY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_TIDY)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_TIDY::UnsafeMergeFrom(const CS_ITEM_TIDY& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void CS_ITEM_TIDY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_TIDY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_TIDY::CopyFrom(const CS_ITEM_TIDY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_TIDY)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_TIDY::IsInitialized() const {

  return true;
}

void CS_ITEM_TIDY::Swap(CS_ITEM_TIDY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_TIDY::InternalSwap(CS_ITEM_TIDY* other) {
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_TIDY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_TIDY_descriptor_;
  metadata.reflection = CS_ITEM_TIDY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_TIDY

// optional uint32 position = 1;
void CS_ITEM_TIDY::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_TIDY::position() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_TIDY.position)
  return position_;
}
void CS_ITEM_TIDY::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_TIDY.position)
}

inline const CS_ITEM_TIDY* CS_ITEM_TIDY::internal_default_instance() {
  return &CS_ITEM_TIDY_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_USE::kGridFieldNumber;
const int CS_ITEM_USE::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_USE::CS_ITEM_USE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_USE)
}

void CS_ITEM_USE::InitAsDefaultInstance() {
}

CS_ITEM_USE::CS_ITEM_USE(const CS_ITEM_USE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_USE)
}

void CS_ITEM_USE::SharedCtor() {
  ::memset(&grid_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&grid_) + sizeof(count_));
  _cached_size_ = 0;
}

CS_ITEM_USE::~CS_ITEM_USE() {
  // @@protoc_insertion_point(destructor:CS_ITEM_USE)
  SharedDtor();
}

void CS_ITEM_USE::SharedDtor() {
}

void CS_ITEM_USE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_USE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_USE_descriptor_;
}

const CS_ITEM_USE& CS_ITEM_USE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_USE> CS_ITEM_USE_default_instance_;

CS_ITEM_USE* CS_ITEM_USE::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_USE* n = new CS_ITEM_USE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_USE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_USE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_ITEM_USE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_ITEM_USE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(grid_, count_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_ITEM_USE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_USE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_USE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_USE)
  return false;
#undef DO_
}

void CS_ITEM_USE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_USE)
  // optional uint32 grid = 1;
  if (this->grid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid(), output);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_USE)
}

::google::protobuf::uint8* CS_ITEM_USE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_USE)
  // optional uint32 grid = 1;
  if (this->grid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid(), target);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_USE)
  return target;
}

size_t CS_ITEM_USE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_USE)
  size_t total_size = 0;

  // optional uint32 grid = 1;
  if (this->grid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid());
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_USE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_USE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_USE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_USE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_USE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_USE)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_USE::MergeFrom(const CS_ITEM_USE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_USE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_USE::UnsafeMergeFrom(const CS_ITEM_USE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.grid() != 0) {
    set_grid(from.grid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void CS_ITEM_USE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_USE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_USE::CopyFrom(const CS_ITEM_USE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_USE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_USE::IsInitialized() const {

  return true;
}

void CS_ITEM_USE::Swap(CS_ITEM_USE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_USE::InternalSwap(CS_ITEM_USE* other) {
  std::swap(grid_, other->grid_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_USE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_USE_descriptor_;
  metadata.reflection = CS_ITEM_USE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_USE

// optional uint32 grid = 1;
void CS_ITEM_USE::clear_grid() {
  grid_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_USE::grid() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_USE.grid)
  return grid_;
}
void CS_ITEM_USE::set_grid(::google::protobuf::uint32 value) {
  
  grid_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_USE.grid)
}

// optional uint32 count = 2;
void CS_ITEM_USE::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_USE::count() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_USE.count)
  return count_;
}
void CS_ITEM_USE::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_USE.count)
}

inline const CS_ITEM_USE* CS_ITEM_USE::internal_default_instance() {
  return &CS_ITEM_USE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_STORAGE_OPEN::CS_ITEM_STORAGE_OPEN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_OPEN)
}

void CS_ITEM_STORAGE_OPEN::InitAsDefaultInstance() {
}

CS_ITEM_STORAGE_OPEN::CS_ITEM_STORAGE_OPEN(const CS_ITEM_STORAGE_OPEN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_OPEN)
}

void CS_ITEM_STORAGE_OPEN::SharedCtor() {
  _cached_size_ = 0;
}

CS_ITEM_STORAGE_OPEN::~CS_ITEM_STORAGE_OPEN() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_OPEN)
  SharedDtor();
}

void CS_ITEM_STORAGE_OPEN::SharedDtor() {
}

void CS_ITEM_STORAGE_OPEN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_OPEN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_STORAGE_OPEN_descriptor_;
}

const CS_ITEM_STORAGE_OPEN& CS_ITEM_STORAGE_OPEN::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_OPEN> CS_ITEM_STORAGE_OPEN_default_instance_;

CS_ITEM_STORAGE_OPEN* CS_ITEM_STORAGE_OPEN::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_STORAGE_OPEN* n = new CS_ITEM_STORAGE_OPEN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_STORAGE_OPEN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_OPEN)
}

bool CS_ITEM_STORAGE_OPEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_STORAGE_OPEN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_STORAGE_OPEN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_STORAGE_OPEN)
  return false;
#undef DO_
}

void CS_ITEM_STORAGE_OPEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_STORAGE_OPEN)
  // @@protoc_insertion_point(serialize_end:CS_ITEM_STORAGE_OPEN)
}

::google::protobuf::uint8* CS_ITEM_STORAGE_OPEN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_OPEN)
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_OPEN)
  return target;
}

size_t CS_ITEM_STORAGE_OPEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_OPEN)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_STORAGE_OPEN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_OPEN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_STORAGE_OPEN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_STORAGE_OPEN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_OPEN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_OPEN)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_OPEN::MergeFrom(const CS_ITEM_STORAGE_OPEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_OPEN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_STORAGE_OPEN::UnsafeMergeFrom(const CS_ITEM_STORAGE_OPEN& from) {
  GOOGLE_DCHECK(&from != this);
}

void CS_ITEM_STORAGE_OPEN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_OPEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_OPEN::CopyFrom(const CS_ITEM_STORAGE_OPEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_OPEN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_STORAGE_OPEN::IsInitialized() const {

  return true;
}

void CS_ITEM_STORAGE_OPEN::Swap(CS_ITEM_STORAGE_OPEN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_STORAGE_OPEN::InternalSwap(CS_ITEM_STORAGE_OPEN* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_STORAGE_OPEN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_STORAGE_OPEN_descriptor_;
  metadata.reflection = CS_ITEM_STORAGE_OPEN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_STORAGE_OPEN

inline const CS_ITEM_STORAGE_OPEN* CS_ITEM_STORAGE_OPEN::internal_default_instance() {
  return &CS_ITEM_STORAGE_OPEN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_STORAGE_CHECKOUT::kGridInStorageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_STORAGE_CHECKOUT::CS_ITEM_STORAGE_CHECKOUT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_CHECKOUT)
}

void CS_ITEM_STORAGE_CHECKOUT::InitAsDefaultInstance() {
}

CS_ITEM_STORAGE_CHECKOUT::CS_ITEM_STORAGE_CHECKOUT(const CS_ITEM_STORAGE_CHECKOUT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_CHECKOUT)
}

void CS_ITEM_STORAGE_CHECKOUT::SharedCtor() {
  grid_in_storage_ = 0u;
  _cached_size_ = 0;
}

CS_ITEM_STORAGE_CHECKOUT::~CS_ITEM_STORAGE_CHECKOUT() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_CHECKOUT)
  SharedDtor();
}

void CS_ITEM_STORAGE_CHECKOUT::SharedDtor() {
}

void CS_ITEM_STORAGE_CHECKOUT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_CHECKOUT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_STORAGE_CHECKOUT_descriptor_;
}

const CS_ITEM_STORAGE_CHECKOUT& CS_ITEM_STORAGE_CHECKOUT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_CHECKOUT> CS_ITEM_STORAGE_CHECKOUT_default_instance_;

CS_ITEM_STORAGE_CHECKOUT* CS_ITEM_STORAGE_CHECKOUT::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_STORAGE_CHECKOUT* n = new CS_ITEM_STORAGE_CHECKOUT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_STORAGE_CHECKOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_CHECKOUT)
  grid_in_storage_ = 0u;
}

bool CS_ITEM_STORAGE_CHECKOUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_STORAGE_CHECKOUT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grid_in_storage = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_in_storage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_STORAGE_CHECKOUT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_STORAGE_CHECKOUT)
  return false;
#undef DO_
}

void CS_ITEM_STORAGE_CHECKOUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_STORAGE_CHECKOUT)
  // optional uint32 grid_in_storage = 1;
  if (this->grid_in_storage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_in_storage(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_STORAGE_CHECKOUT)
}

::google::protobuf::uint8* CS_ITEM_STORAGE_CHECKOUT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_CHECKOUT)
  // optional uint32 grid_in_storage = 1;
  if (this->grid_in_storage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_in_storage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_CHECKOUT)
  return target;
}

size_t CS_ITEM_STORAGE_CHECKOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_CHECKOUT)
  size_t total_size = 0;

  // optional uint32 grid_in_storage = 1;
  if (this->grid_in_storage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid_in_storage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_STORAGE_CHECKOUT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_STORAGE_CHECKOUT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_STORAGE_CHECKOUT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_CHECKOUT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_CHECKOUT)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_CHECKOUT::MergeFrom(const CS_ITEM_STORAGE_CHECKOUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_STORAGE_CHECKOUT::UnsafeMergeFrom(const CS_ITEM_STORAGE_CHECKOUT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.grid_in_storage() != 0) {
    set_grid_in_storage(from.grid_in_storage());
  }
}

void CS_ITEM_STORAGE_CHECKOUT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_CHECKOUT::CopyFrom(const CS_ITEM_STORAGE_CHECKOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_STORAGE_CHECKOUT::IsInitialized() const {

  return true;
}

void CS_ITEM_STORAGE_CHECKOUT::Swap(CS_ITEM_STORAGE_CHECKOUT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_STORAGE_CHECKOUT::InternalSwap(CS_ITEM_STORAGE_CHECKOUT* other) {
  std::swap(grid_in_storage_, other->grid_in_storage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_STORAGE_CHECKOUT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_STORAGE_CHECKOUT_descriptor_;
  metadata.reflection = CS_ITEM_STORAGE_CHECKOUT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_STORAGE_CHECKOUT

// optional uint32 grid_in_storage = 1;
void CS_ITEM_STORAGE_CHECKOUT::clear_grid_in_storage() {
  grid_in_storage_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_STORAGE_CHECKOUT::grid_in_storage() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_STORAGE_CHECKOUT.grid_in_storage)
  return grid_in_storage_;
}
void CS_ITEM_STORAGE_CHECKOUT::set_grid_in_storage(::google::protobuf::uint32 value) {
  
  grid_in_storage_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_STORAGE_CHECKOUT.grid_in_storage)
}

inline const CS_ITEM_STORAGE_CHECKOUT* CS_ITEM_STORAGE_CHECKOUT::internal_default_instance() {
  return &CS_ITEM_STORAGE_CHECKOUT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ITEM_STORAGE_CHECKIN::kGridInPackageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ITEM_STORAGE_CHECKIN::CS_ITEM_STORAGE_CHECKIN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_CHECKIN)
}

void CS_ITEM_STORAGE_CHECKIN::InitAsDefaultInstance() {
}

CS_ITEM_STORAGE_CHECKIN::CS_ITEM_STORAGE_CHECKIN(const CS_ITEM_STORAGE_CHECKIN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_CHECKIN)
}

void CS_ITEM_STORAGE_CHECKIN::SharedCtor() {
  grid_in_package_ = 0u;
  _cached_size_ = 0;
}

CS_ITEM_STORAGE_CHECKIN::~CS_ITEM_STORAGE_CHECKIN() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_CHECKIN)
  SharedDtor();
}

void CS_ITEM_STORAGE_CHECKIN::SharedDtor() {
}

void CS_ITEM_STORAGE_CHECKIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ITEM_STORAGE_CHECKIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ITEM_STORAGE_CHECKIN_descriptor_;
}

const CS_ITEM_STORAGE_CHECKIN& CS_ITEM_STORAGE_CHECKIN::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_CHECKIN> CS_ITEM_STORAGE_CHECKIN_default_instance_;

CS_ITEM_STORAGE_CHECKIN* CS_ITEM_STORAGE_CHECKIN::New(::google::protobuf::Arena* arena) const {
  CS_ITEM_STORAGE_CHECKIN* n = new CS_ITEM_STORAGE_CHECKIN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ITEM_STORAGE_CHECKIN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_CHECKIN)
  grid_in_package_ = 0u;
}

bool CS_ITEM_STORAGE_CHECKIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ITEM_STORAGE_CHECKIN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grid_in_package = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_in_package_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ITEM_STORAGE_CHECKIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ITEM_STORAGE_CHECKIN)
  return false;
#undef DO_
}

void CS_ITEM_STORAGE_CHECKIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ITEM_STORAGE_CHECKIN)
  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_in_package(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ITEM_STORAGE_CHECKIN)
}

::google::protobuf::uint8* CS_ITEM_STORAGE_CHECKIN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_CHECKIN)
  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_in_package(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_CHECKIN)
  return target;
}

size_t CS_ITEM_STORAGE_CHECKIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_CHECKIN)
  size_t total_size = 0;

  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid_in_package());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ITEM_STORAGE_CHECKIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ITEM_STORAGE_CHECKIN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ITEM_STORAGE_CHECKIN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_CHECKIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_CHECKIN)
    UnsafeMergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_CHECKIN::MergeFrom(const CS_ITEM_STORAGE_CHECKIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ITEM_STORAGE_CHECKIN::UnsafeMergeFrom(const CS_ITEM_STORAGE_CHECKIN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.grid_in_package() != 0) {
    set_grid_in_package(from.grid_in_package());
  }
}

void CS_ITEM_STORAGE_CHECKIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_CHECKIN::CopyFrom(const CS_ITEM_STORAGE_CHECKIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ITEM_STORAGE_CHECKIN::IsInitialized() const {

  return true;
}

void CS_ITEM_STORAGE_CHECKIN::Swap(CS_ITEM_STORAGE_CHECKIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ITEM_STORAGE_CHECKIN::InternalSwap(CS_ITEM_STORAGE_CHECKIN* other) {
  std::swap(grid_in_package_, other->grid_in_package_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ITEM_STORAGE_CHECKIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ITEM_STORAGE_CHECKIN_descriptor_;
  metadata.reflection = CS_ITEM_STORAGE_CHECKIN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ITEM_STORAGE_CHECKIN

// optional uint32 grid_in_package = 1;
void CS_ITEM_STORAGE_CHECKIN::clear_grid_in_package() {
  grid_in_package_ = 0u;
}
::google::protobuf::uint32 CS_ITEM_STORAGE_CHECKIN::grid_in_package() const {
  // @@protoc_insertion_point(field_get:CS_ITEM_STORAGE_CHECKIN.grid_in_package)
  return grid_in_package_;
}
void CS_ITEM_STORAGE_CHECKIN::set_grid_in_package(::google::protobuf::uint32 value) {
  
  grid_in_package_ = value;
  // @@protoc_insertion_point(field_set:CS_ITEM_STORAGE_CHECKIN.grid_in_package)
}

inline const CS_ITEM_STORAGE_CHECKIN* CS_ITEM_STORAGE_CHECKIN::internal_default_instance() {
  return &CS_ITEM_STORAGE_CHECKIN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_EQUIP::kGridInPackageFieldNumber;
const int CS_EQUIP::kGridInEquipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_EQUIP::CS_EQUIP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_EQUIP)
}

void CS_EQUIP::InitAsDefaultInstance() {
}

CS_EQUIP::CS_EQUIP(const CS_EQUIP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_EQUIP)
}

void CS_EQUIP::SharedCtor() {
  ::memset(&grid_in_package_, 0, reinterpret_cast<char*>(&grid_in_equip_) -
    reinterpret_cast<char*>(&grid_in_package_) + sizeof(grid_in_equip_));
  _cached_size_ = 0;
}

CS_EQUIP::~CS_EQUIP() {
  // @@protoc_insertion_point(destructor:CS_EQUIP)
  SharedDtor();
}

void CS_EQUIP::SharedDtor() {
}

void CS_EQUIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_EQUIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_EQUIP_descriptor_;
}

const CS_EQUIP& CS_EQUIP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_EQUIP> CS_EQUIP_default_instance_;

CS_EQUIP* CS_EQUIP::New(::google::protobuf::Arena* arena) const {
  CS_EQUIP* n = new CS_EQUIP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_EQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_EQUIP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_EQUIP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_EQUIP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(grid_in_package_, grid_in_equip_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_EQUIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_EQUIP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grid_in_package = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_in_package_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grid_in_equip;
        break;
      }

      // optional uint32 grid_in_equip = 2;
      case 2: {
        if (tag == 16) {
         parse_grid_in_equip:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_in_equip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_EQUIP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_EQUIP)
  return false;
#undef DO_
}

void CS_EQUIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_EQUIP)
  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_in_package(), output);
  }

  // optional uint32 grid_in_equip = 2;
  if (this->grid_in_equip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_in_equip(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_EQUIP)
}

::google::protobuf::uint8* CS_EQUIP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_EQUIP)
  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_in_package(), target);
  }

  // optional uint32 grid_in_equip = 2;
  if (this->grid_in_equip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_in_equip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_EQUIP)
  return target;
}

size_t CS_EQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_EQUIP)
  size_t total_size = 0;

  // optional uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid_in_package());
  }

  // optional uint32 grid_in_equip = 2;
  if (this->grid_in_equip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid_in_equip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_EQUIP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_EQUIP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_EQUIP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_EQUIP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_EQUIP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_EQUIP)
    UnsafeMergeFrom(*source);
  }
}

void CS_EQUIP::MergeFrom(const CS_EQUIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_EQUIP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_EQUIP::UnsafeMergeFrom(const CS_EQUIP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.grid_in_package() != 0) {
    set_grid_in_package(from.grid_in_package());
  }
  if (from.grid_in_equip() != 0) {
    set_grid_in_equip(from.grid_in_equip());
  }
}

void CS_EQUIP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_EQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_EQUIP::CopyFrom(const CS_EQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_EQUIP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_EQUIP::IsInitialized() const {

  return true;
}

void CS_EQUIP::Swap(CS_EQUIP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_EQUIP::InternalSwap(CS_EQUIP* other) {
  std::swap(grid_in_package_, other->grid_in_package_);
  std::swap(grid_in_equip_, other->grid_in_equip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_EQUIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_EQUIP_descriptor_;
  metadata.reflection = CS_EQUIP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_EQUIP

// optional uint32 grid_in_package = 1;
void CS_EQUIP::clear_grid_in_package() {
  grid_in_package_ = 0u;
}
::google::protobuf::uint32 CS_EQUIP::grid_in_package() const {
  // @@protoc_insertion_point(field_get:CS_EQUIP.grid_in_package)
  return grid_in_package_;
}
void CS_EQUIP::set_grid_in_package(::google::protobuf::uint32 value) {
  
  grid_in_package_ = value;
  // @@protoc_insertion_point(field_set:CS_EQUIP.grid_in_package)
}

// optional uint32 grid_in_equip = 2;
void CS_EQUIP::clear_grid_in_equip() {
  grid_in_equip_ = 0u;
}
::google::protobuf::uint32 CS_EQUIP::grid_in_equip() const {
  // @@protoc_insertion_point(field_get:CS_EQUIP.grid_in_equip)
  return grid_in_equip_;
}
void CS_EQUIP::set_grid_in_equip(::google::protobuf::uint32 value) {
  
  grid_in_equip_ = value;
  // @@protoc_insertion_point(field_set:CS_EQUIP.grid_in_equip)
}

inline const CS_EQUIP* CS_EQUIP::internal_default_instance() {
  return &CS_EQUIP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_UNEQUIP::kGridInEquipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_UNEQUIP::CS_UNEQUIP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_UNEQUIP)
}

void CS_UNEQUIP::InitAsDefaultInstance() {
}

CS_UNEQUIP::CS_UNEQUIP(const CS_UNEQUIP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_UNEQUIP)
}

void CS_UNEQUIP::SharedCtor() {
  grid_in_equip_ = 0u;
  _cached_size_ = 0;
}

CS_UNEQUIP::~CS_UNEQUIP() {
  // @@protoc_insertion_point(destructor:CS_UNEQUIP)
  SharedDtor();
}

void CS_UNEQUIP::SharedDtor() {
}

void CS_UNEQUIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_UNEQUIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_UNEQUIP_descriptor_;
}

const CS_UNEQUIP& CS_UNEQUIP::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_UNEQUIP> CS_UNEQUIP_default_instance_;

CS_UNEQUIP* CS_UNEQUIP::New(::google::protobuf::Arena* arena) const {
  CS_UNEQUIP* n = new CS_UNEQUIP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_UNEQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_UNEQUIP)
  grid_in_equip_ = 0u;
}

bool CS_UNEQUIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_UNEQUIP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grid_in_equip = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_in_equip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_UNEQUIP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_UNEQUIP)
  return false;
#undef DO_
}

void CS_UNEQUIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_UNEQUIP)
  // optional uint32 grid_in_equip = 1;
  if (this->grid_in_equip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_in_equip(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_UNEQUIP)
}

::google::protobuf::uint8* CS_UNEQUIP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_UNEQUIP)
  // optional uint32 grid_in_equip = 1;
  if (this->grid_in_equip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_in_equip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_UNEQUIP)
  return target;
}

size_t CS_UNEQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_UNEQUIP)
  size_t total_size = 0;

  // optional uint32 grid_in_equip = 1;
  if (this->grid_in_equip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grid_in_equip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_UNEQUIP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_UNEQUIP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_UNEQUIP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_UNEQUIP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_UNEQUIP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_UNEQUIP)
    UnsafeMergeFrom(*source);
  }
}

void CS_UNEQUIP::MergeFrom(const CS_UNEQUIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_UNEQUIP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_UNEQUIP::UnsafeMergeFrom(const CS_UNEQUIP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.grid_in_equip() != 0) {
    set_grid_in_equip(from.grid_in_equip());
  }
}

void CS_UNEQUIP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_UNEQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_UNEQUIP::CopyFrom(const CS_UNEQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_UNEQUIP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_UNEQUIP::IsInitialized() const {

  return true;
}

void CS_UNEQUIP::Swap(CS_UNEQUIP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_UNEQUIP::InternalSwap(CS_UNEQUIP* other) {
  std::swap(grid_in_equip_, other->grid_in_equip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_UNEQUIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_UNEQUIP_descriptor_;
  metadata.reflection = CS_UNEQUIP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_UNEQUIP

// optional uint32 grid_in_equip = 1;
void CS_UNEQUIP::clear_grid_in_equip() {
  grid_in_equip_ = 0u;
}
::google::protobuf::uint32 CS_UNEQUIP::grid_in_equip() const {
  // @@protoc_insertion_point(field_get:CS_UNEQUIP.grid_in_equip)
  return grid_in_equip_;
}
void CS_UNEQUIP::set_grid_in_equip(::google::protobuf::uint32 value) {
  
  grid_in_equip_ = value;
  // @@protoc_insertion_point(field_set:CS_UNEQUIP.grid_in_equip)
}

inline const CS_UNEQUIP* CS_UNEQUIP::internal_default_instance() {
  return &CS_UNEQUIP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TALK::kChannelFieldNumber;
const int CS_TALK::kWordsFieldNumber;
const int CS_TALK::kReciverIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TALK::CS_TALK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TALK)
}

void CS_TALK::InitAsDefaultInstance() {
}

CS_TALK::CS_TALK(const CS_TALK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TALK)
}

void CS_TALK::SharedCtor() {
  words_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reciver_id_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&reciver_id_) + sizeof(channel_));
  _cached_size_ = 0;
}

CS_TALK::~CS_TALK() {
  // @@protoc_insertion_point(destructor:CS_TALK)
  SharedDtor();
}

void CS_TALK::SharedDtor() {
  words_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_TALK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TALK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TALK_descriptor_;
}

const CS_TALK& CS_TALK::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TALK> CS_TALK_default_instance_;

CS_TALK* CS_TALK::New(::google::protobuf::Arena* arena) const {
  CS_TALK* n = new CS_TALK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TALK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TALK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_TALK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_TALK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reciver_id_, channel_);
  words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CS_TALK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TALK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TalkChannel channel = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::TalkChannel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        break;
      }

      // optional string words = 2;
      case 2: {
        if (tag == 18) {
         parse_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_words()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->words().data(), this->words().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_TALK.words"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reciver_id;
        break;
      }

      // optional uint64 reciver_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reciver_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reciver_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TALK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TALK)
  return false;
#undef DO_
}

void CS_TALK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TALK)
  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_TALK.words");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->words(), output);
  }

  // optional uint64 reciver_id = 3;
  if (this->reciver_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->reciver_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TALK)
}

::google::protobuf::uint8* CS_TALK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TALK)
  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_TALK.words");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->words(), target);
  }

  // optional uint64 reciver_id = 3;
  if (this->reciver_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->reciver_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TALK)
  return target;
}

size_t CS_TALK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TALK)
  size_t total_size = 0;

  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->words());
  }

  // optional uint64 reciver_id = 3;
  if (this->reciver_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reciver_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TALK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TALK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TALK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TALK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TALK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TALK)
    UnsafeMergeFrom(*source);
  }
}

void CS_TALK::MergeFrom(const CS_TALK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TALK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TALK::UnsafeMergeFrom(const CS_TALK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.words().size() > 0) {

    words_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  if (from.reciver_id() != 0) {
    set_reciver_id(from.reciver_id());
  }
}

void CS_TALK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TALK::CopyFrom(const CS_TALK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TALK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TALK::IsInitialized() const {

  return true;
}

void CS_TALK::Swap(CS_TALK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TALK::InternalSwap(CS_TALK* other) {
  std::swap(channel_, other->channel_);
  words_.Swap(&other->words_);
  std::swap(reciver_id_, other->reciver_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TALK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TALK_descriptor_;
  metadata.reflection = CS_TALK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TALK

// optional .TalkChannel channel = 1;
void CS_TALK::clear_channel() {
  channel_ = 0;
}
::TalkChannel CS_TALK::channel() const {
  // @@protoc_insertion_point(field_get:CS_TALK.channel)
  return static_cast< ::TalkChannel >(channel_);
}
void CS_TALK::set_channel(::TalkChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CS_TALK.channel)
}

// optional string words = 2;
void CS_TALK::clear_words() {
  words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_TALK::words() const {
  // @@protoc_insertion_point(field_get:CS_TALK.words)
  return words_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_TALK::set_words(const ::std::string& value) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_TALK.words)
}
void CS_TALK::set_words(const char* value) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_TALK.words)
}
void CS_TALK::set_words(const char* value, size_t size) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_TALK.words)
}
::std::string* CS_TALK::mutable_words() {
  
  // @@protoc_insertion_point(field_mutable:CS_TALK.words)
  return words_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_TALK::release_words() {
  // @@protoc_insertion_point(field_release:CS_TALK.words)
  
  return words_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_TALK::set_allocated_words(::std::string* words) {
  if (words != NULL) {
    
  } else {
    
  }
  words_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), words);
  // @@protoc_insertion_point(field_set_allocated:CS_TALK.words)
}

// optional uint64 reciver_id = 3;
void CS_TALK::clear_reciver_id() {
  reciver_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TALK::reciver_id() const {
  // @@protoc_insertion_point(field_get:CS_TALK.reciver_id)
  return reciver_id_;
}
void CS_TALK::set_reciver_id(::google::protobuf::uint64 value) {
  
  reciver_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TALK.reciver_id)
}

inline const CS_TALK* CS_TALK::internal_default_instance() {
  return &CS_TALK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TALK::kChannelFieldNumber;
const int SC_TALK::kWordsFieldNumber;
const int SC_TALK::kSenderIdFieldNumber;
const int SC_TALK::kSenderNameFieldNumber;
const int SC_TALK::kSenderSignFieldNumber;
const int SC_TALK::kSenderViplevFieldNumber;
const int SC_TALK::kSendTimeFieldNumber;
const int SC_TALK::kReciverIdFieldNumber;
const int SC_TALK::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TALK::SC_TALK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TALK)
}

void SC_TALK::InitAsDefaultInstance() {
}

SC_TALK::SC_TALK(const SC_TALK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TALK)
}

void SC_TALK::SharedCtor() {
  words_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, reinterpret_cast<char*>(&reciver_id_) -
    reinterpret_cast<char*>(&sender_id_) + sizeof(reciver_id_));
  _cached_size_ = 0;
}

SC_TALK::~SC_TALK() {
  // @@protoc_insertion_point(destructor:SC_TALK)
  SharedDtor();
}

void SC_TALK::SharedDtor() {
  words_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TALK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TALK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TALK_descriptor_;
}

const SC_TALK& SC_TALK::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TALK> SC_TALK_default_instance_;

SC_TALK* SC_TALK::New(::google::protobuf::Arena* arena) const {
  SC_TALK* n = new SC_TALK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TALK::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TALK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TALK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TALK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_id_, reciver_id_);
  words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  item_list_.Clear();
}

bool SC_TALK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TALK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TalkChannel channel = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::TalkChannel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        break;
      }

      // optional string words = 2;
      case 2: {
        if (tag == 18) {
         parse_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_words()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->words().data(), this->words().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TALK.words"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sender_id;
        break;
      }

      // optional uint64 sender_id = 4;
      case 4: {
        if (tag == 32) {
         parse_sender_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sender_name;
        break;
      }

      // optional string sender_name = 5;
      case 5: {
        if (tag == 42) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TALK.sender_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sender_sign;
        break;
      }

      // optional uint32 sender_sign = 6;
      case 6: {
        if (tag == 48) {
         parse_sender_sign:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_sign_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sender_viplev;
        break;
      }

      // optional uint32 sender_viplev = 7;
      case 7: {
        if (tag == 56) {
         parse_sender_viplev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_viplev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 8;
      case 8: {
        if (tag == 64) {
         parse_send_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reciver_id;
        break;
      }

      // optional uint64 reciver_id = 9;
      case 9: {
        if (tag == 72) {
         parse_reciver_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reciver_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_item_list;
        break;
      }

      // repeated .SC_ITEM_INFO item_list = 20;
      case 20: {
        if (tag == 162) {
         parse_item_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_item_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TALK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TALK)
  return false;
#undef DO_
}

void SC_TALK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TALK)
  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.words");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->words(), output);
  }

  // optional uint64 sender_id = 4;
  if (this->sender_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sender_id(), output);
  }

  // optional string sender_name = 5;
  if (this->sender_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender_name(), output);
  }

  // optional uint32 sender_sign = 6;
  if (this->sender_sign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sender_sign(), output);
  }

  // optional uint32 sender_viplev = 7;
  if (this->sender_viplev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sender_viplev(), output);
  }

  // optional uint32 send_time = 8;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->send_time(), output);
  }

  // optional uint64 reciver_id = 9;
  if (this->reciver_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->reciver_id(), output);
  }

  // repeated .SC_ITEM_INFO item_list = 20;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->item_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TALK)
}

::google::protobuf::uint8* SC_TALK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TALK)
  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words().data(), this->words().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.words");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->words(), target);
  }

  // optional uint64 sender_id = 4;
  if (this->sender_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sender_id(), target);
  }

  // optional string sender_name = 5;
  if (this->sender_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender_name(), target);
  }

  // optional uint32 sender_sign = 6;
  if (this->sender_sign() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sender_sign(), target);
  }

  // optional uint32 sender_viplev = 7;
  if (this->sender_viplev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sender_viplev(), target);
  }

  // optional uint32 send_time = 8;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->send_time(), target);
  }

  // optional uint64 reciver_id = 9;
  if (this->reciver_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->reciver_id(), target);
  }

  // repeated .SC_ITEM_INFO item_list = 20;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->item_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TALK)
  return target;
}

size_t SC_TALK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TALK)
  size_t total_size = 0;

  // optional .TalkChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
  }

  // optional string words = 2;
  if (this->words().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->words());
  }

  // optional uint64 sender_id = 4;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sender_id());
  }

  // optional string sender_name = 5;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_name());
  }

  // optional uint32 sender_sign = 6;
  if (this->sender_sign() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sender_sign());
  }

  // optional uint32 sender_viplev = 7;
  if (this->sender_viplev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sender_viplev());
  }

  // optional uint32 send_time = 8;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_time());
  }

  // optional uint64 reciver_id = 9;
  if (this->reciver_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reciver_id());
  }

  // repeated .SC_ITEM_INFO item_list = 20;
  {
    unsigned int count = this->item_list_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TALK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TALK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TALK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TALK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TALK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TALK)
    UnsafeMergeFrom(*source);
  }
}

void SC_TALK::MergeFrom(const SC_TALK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TALK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TALK::UnsafeMergeFrom(const SC_TALK& from) {
  GOOGLE_DCHECK(&from != this);
  item_list_.MergeFrom(from.item_list_);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.words().size() > 0) {

    words_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  if (from.sender_id() != 0) {
    set_sender_id(from.sender_id());
  }
  if (from.sender_name().size() > 0) {

    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  if (from.sender_sign() != 0) {
    set_sender_sign(from.sender_sign());
  }
  if (from.sender_viplev() != 0) {
    set_sender_viplev(from.sender_viplev());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.reciver_id() != 0) {
    set_reciver_id(from.reciver_id());
  }
}

void SC_TALK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TALK::CopyFrom(const SC_TALK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TALK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TALK::IsInitialized() const {

  return true;
}

void SC_TALK::Swap(SC_TALK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TALK::InternalSwap(SC_TALK* other) {
  std::swap(channel_, other->channel_);
  words_.Swap(&other->words_);
  std::swap(sender_id_, other->sender_id_);
  sender_name_.Swap(&other->sender_name_);
  std::swap(sender_sign_, other->sender_sign_);
  std::swap(sender_viplev_, other->sender_viplev_);
  std::swap(send_time_, other->send_time_);
  std::swap(reciver_id_, other->reciver_id_);
  item_list_.UnsafeArenaSwap(&other->item_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TALK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TALK_descriptor_;
  metadata.reflection = SC_TALK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TALK

// optional .TalkChannel channel = 1;
void SC_TALK::clear_channel() {
  channel_ = 0;
}
::TalkChannel SC_TALK::channel() const {
  // @@protoc_insertion_point(field_get:SC_TALK.channel)
  return static_cast< ::TalkChannel >(channel_);
}
void SC_TALK::set_channel(::TalkChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.channel)
}

// optional string words = 2;
void SC_TALK::clear_words() {
  words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TALK::words() const {
  // @@protoc_insertion_point(field_get:SC_TALK.words)
  return words_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TALK::set_words(const ::std::string& value) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TALK.words)
}
void SC_TALK::set_words(const char* value) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TALK.words)
}
void SC_TALK::set_words(const char* value, size_t size) {
  
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TALK.words)
}
::std::string* SC_TALK::mutable_words() {
  
  // @@protoc_insertion_point(field_mutable:SC_TALK.words)
  return words_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TALK::release_words() {
  // @@protoc_insertion_point(field_release:SC_TALK.words)
  
  return words_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TALK::set_allocated_words(::std::string* words) {
  if (words != NULL) {
    
  } else {
    
  }
  words_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), words);
  // @@protoc_insertion_point(field_set_allocated:SC_TALK.words)
}

// optional uint64 sender_id = 4;
void SC_TALK::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TALK::sender_id() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_id)
  return sender_id_;
}
void SC_TALK::set_sender_id(::google::protobuf::uint64 value) {
  
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.sender_id)
}

// optional string sender_name = 5;
void SC_TALK::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TALK::sender_name() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_name)
  return sender_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TALK::set_sender_name(const ::std::string& value) {
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TALK.sender_name)
}
void SC_TALK::set_sender_name(const char* value) {
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TALK.sender_name)
}
void SC_TALK::set_sender_name(const char* value, size_t size) {
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TALK.sender_name)
}
::std::string* SC_TALK::mutable_sender_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_TALK.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TALK::release_sender_name() {
  // @@protoc_insertion_point(field_release:SC_TALK.sender_name)
  
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TALK::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    
  } else {
    
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TALK.sender_name)
}

// optional uint32 sender_sign = 6;
void SC_TALK::clear_sender_sign() {
  sender_sign_ = 0u;
}
::google::protobuf::uint32 SC_TALK::sender_sign() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_sign)
  return sender_sign_;
}
void SC_TALK::set_sender_sign(::google::protobuf::uint32 value) {
  
  sender_sign_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.sender_sign)
}

// optional uint32 sender_viplev = 7;
void SC_TALK::clear_sender_viplev() {
  sender_viplev_ = 0u;
}
::google::protobuf::uint32 SC_TALK::sender_viplev() const {
  // @@protoc_insertion_point(field_get:SC_TALK.sender_viplev)
  return sender_viplev_;
}
void SC_TALK::set_sender_viplev(::google::protobuf::uint32 value) {
  
  sender_viplev_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.sender_viplev)
}

// optional uint32 send_time = 8;
void SC_TALK::clear_send_time() {
  send_time_ = 0u;
}
::google::protobuf::uint32 SC_TALK::send_time() const {
  // @@protoc_insertion_point(field_get:SC_TALK.send_time)
  return send_time_;
}
void SC_TALK::set_send_time(::google::protobuf::uint32 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.send_time)
}

// optional uint64 reciver_id = 9;
void SC_TALK::clear_reciver_id() {
  reciver_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TALK::reciver_id() const {
  // @@protoc_insertion_point(field_get:SC_TALK.reciver_id)
  return reciver_id_;
}
void SC_TALK::set_reciver_id(::google::protobuf::uint64 value) {
  
  reciver_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TALK.reciver_id)
}

// repeated .SC_ITEM_INFO item_list = 20;
int SC_TALK::item_list_size() const {
  return item_list_.size();
}
void SC_TALK::clear_item_list() {
  item_list_.Clear();
}
const ::SC_ITEM_INFO& SC_TALK::item_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TALK.item_list)
  return item_list_.Get(index);
}
::SC_ITEM_INFO* SC_TALK::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TALK.item_list)
  return item_list_.Mutable(index);
}
::SC_ITEM_INFO* SC_TALK::add_item_list() {
  // @@protoc_insertion_point(field_add:SC_TALK.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_ITEM_INFO >*
SC_TALK::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TALK.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_ITEM_INFO >&
SC_TALK::item_list() const {
  // @@protoc_insertion_point(field_list:SC_TALK.item_list)
  return item_list_;
}

inline const SC_TALK* SC_TALK::internal_default_instance() {
  return &SC_TALK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TASK_INFO_Info::kTaskIdFieldNumber;
const int SC_TASK_INFO_Info::kAcceptTimeFieldNumber;
const int SC_TASK_INFO_Info::kFinishTimeFieldNumber;
const int SC_TASK_INFO_Info::kExpireTimeFieldNumber;
const int SC_TASK_INFO_Info::kDaycountFieldNumber;
const int SC_TASK_INFO_Info::kDaycountMaxFieldNumber;
const int SC_TASK_INFO_Info::kStateFieldNumber;
const int SC_TASK_INFO_Info::kNum1FieldNumber;
const int SC_TASK_INFO_Info::kNum2FieldNumber;
const int SC_TASK_INFO_Info::kNum3FieldNumber;
const int SC_TASK_INFO_Info::kNum4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TASK_INFO_Info::SC_TASK_INFO_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_INFO.Info)
}

void SC_TASK_INFO_Info::InitAsDefaultInstance() {
}

SC_TASK_INFO_Info::SC_TASK_INFO_Info(const SC_TASK_INFO_Info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TASK_INFO.Info)
}

void SC_TASK_INFO_Info::SharedCtor() {
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&num4_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(num4_));
  _cached_size_ = 0;
}

SC_TASK_INFO_Info::~SC_TASK_INFO_Info() {
  // @@protoc_insertion_point(destructor:SC_TASK_INFO.Info)
  SharedDtor();
}

void SC_TASK_INFO_Info::SharedDtor() {
}

void SC_TASK_INFO_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TASK_INFO_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TASK_INFO_Info_descriptor_;
}

const SC_TASK_INFO_Info& SC_TASK_INFO_Info::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TASK_INFO_Info> SC_TASK_INFO_Info_default_instance_;

SC_TASK_INFO_Info* SC_TASK_INFO_Info::New(::google::protobuf::Arena* arena) const {
  SC_TASK_INFO_Info* n = new SC_TASK_INFO_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TASK_INFO_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_INFO.Info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TASK_INFO_Info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TASK_INFO_Info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, num1_);
  ZR_(num2_, num4_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_TASK_INFO_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TASK_INFO.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accept_time;
        break;
      }

      // optional uint32 accept_time = 2;
      case 2: {
        if (tag == 16) {
         parse_accept_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accept_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finish_time;
        break;
      }

      // optional uint32 finish_time = 3;
      case 3: {
        if (tag == 24) {
         parse_finish_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 4;
      case 4: {
        if (tag == 32) {
         parse_expire_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_daycount;
        break;
      }

      // optional uint32 daycount = 5;
      case 5: {
        if (tag == 40) {
         parse_daycount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_daycount_max;
        break;
      }

      // optional uint32 daycount_max = 6;
      case 6: {
        if (tag == 48) {
         parse_daycount_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional uint32 state = 7;
      case 7: {
        if (tag == 56) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num1;
        break;
      }

      // optional uint32 num1 = 10;
      case 10: {
        if (tag == 80) {
         parse_num1:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num2;
        break;
      }

      // optional uint32 num2 = 11;
      case 11: {
        if (tag == 88) {
         parse_num2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_num3;
        break;
      }

      // optional uint32 num3 = 12;
      case 12: {
        if (tag == 96) {
         parse_num3:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_num4;
        break;
      }

      // optional uint32 num4 = 13;
      case 13: {
        if (tag == 104) {
         parse_num4:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num4_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TASK_INFO.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TASK_INFO.Info)
  return false;
#undef DO_
}

void SC_TASK_INFO_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TASK_INFO.Info)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional uint32 accept_time = 2;
  if (this->accept_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accept_time(), output);
  }

  // optional uint32 finish_time = 3;
  if (this->finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finish_time(), output);
  }

  // optional uint32 expire_time = 4;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expire_time(), output);
  }

  // optional uint32 daycount = 5;
  if (this->daycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daycount(), output);
  }

  // optional uint32 daycount_max = 6;
  if (this->daycount_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->daycount_max(), output);
  }

  // optional uint32 state = 7;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state(), output);
  }

  // optional uint32 num1 = 10;
  if (this->num1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num1(), output);
  }

  // optional uint32 num2 = 11;
  if (this->num2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num2(), output);
  }

  // optional uint32 num3 = 12;
  if (this->num3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num3(), output);
  }

  // optional uint32 num4 = 13;
  if (this->num4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num4(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TASK_INFO.Info)
}

::google::protobuf::uint8* SC_TASK_INFO_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_INFO.Info)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional uint32 accept_time = 2;
  if (this->accept_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accept_time(), target);
  }

  // optional uint32 finish_time = 3;
  if (this->finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finish_time(), target);
  }

  // optional uint32 expire_time = 4;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expire_time(), target);
  }

  // optional uint32 daycount = 5;
  if (this->daycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daycount(), target);
  }

  // optional uint32 daycount_max = 6;
  if (this->daycount_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->daycount_max(), target);
  }

  // optional uint32 state = 7;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state(), target);
  }

  // optional uint32 num1 = 10;
  if (this->num1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num1(), target);
  }

  // optional uint32 num2 = 11;
  if (this->num2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num2(), target);
  }

  // optional uint32 num3 = 12;
  if (this->num3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->num3(), target);
  }

  // optional uint32 num4 = 13;
  if (this->num4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->num4(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_INFO.Info)
  return target;
}

size_t SC_TASK_INFO_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_INFO.Info)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional uint32 accept_time = 2;
  if (this->accept_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accept_time());
  }

  // optional uint32 finish_time = 3;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finish_time());
  }

  // optional uint32 expire_time = 4;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expire_time());
  }

  // optional uint32 daycount = 5;
  if (this->daycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->daycount());
  }

  // optional uint32 daycount_max = 6;
  if (this->daycount_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->daycount_max());
  }

  // optional uint32 state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // optional uint32 num1 = 10;
  if (this->num1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num1());
  }

  // optional uint32 num2 = 11;
  if (this->num2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num2());
  }

  // optional uint32 num3 = 12;
  if (this->num3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num3());
  }

  // optional uint32 num4 = 13;
  if (this->num4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num4());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TASK_INFO_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_INFO.Info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TASK_INFO_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TASK_INFO_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_INFO.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_INFO.Info)
    UnsafeMergeFrom(*source);
  }
}

void SC_TASK_INFO_Info::MergeFrom(const SC_TASK_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_INFO.Info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TASK_INFO_Info::UnsafeMergeFrom(const SC_TASK_INFO_Info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.accept_time() != 0) {
    set_accept_time(from.accept_time());
  }
  if (from.finish_time() != 0) {
    set_finish_time(from.finish_time());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
  if (from.daycount() != 0) {
    set_daycount(from.daycount());
  }
  if (from.daycount_max() != 0) {
    set_daycount_max(from.daycount_max());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.num1() != 0) {
    set_num1(from.num1());
  }
  if (from.num2() != 0) {
    set_num2(from.num2());
  }
  if (from.num3() != 0) {
    set_num3(from.num3());
  }
  if (from.num4() != 0) {
    set_num4(from.num4());
  }
}

void SC_TASK_INFO_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_INFO_Info::CopyFrom(const SC_TASK_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_INFO.Info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TASK_INFO_Info::IsInitialized() const {

  return true;
}

void SC_TASK_INFO_Info::Swap(SC_TASK_INFO_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TASK_INFO_Info::InternalSwap(SC_TASK_INFO_Info* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(accept_time_, other->accept_time_);
  std::swap(finish_time_, other->finish_time_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(daycount_, other->daycount_);
  std::swap(daycount_max_, other->daycount_max_);
  std::swap(state_, other->state_);
  std::swap(num1_, other->num1_);
  std::swap(num2_, other->num2_);
  std::swap(num3_, other->num3_);
  std::swap(num4_, other->num4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TASK_INFO_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TASK_INFO_Info_descriptor_;
  metadata.reflection = SC_TASK_INFO_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TASK_INFO::kTaskInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TASK_INFO::SC_TASK_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_INFO)
}

void SC_TASK_INFO::InitAsDefaultInstance() {
}

SC_TASK_INFO::SC_TASK_INFO(const SC_TASK_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TASK_INFO)
}

void SC_TASK_INFO::SharedCtor() {
  _cached_size_ = 0;
}

SC_TASK_INFO::~SC_TASK_INFO() {
  // @@protoc_insertion_point(destructor:SC_TASK_INFO)
  SharedDtor();
}

void SC_TASK_INFO::SharedDtor() {
}

void SC_TASK_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TASK_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TASK_INFO_descriptor_;
}

const SC_TASK_INFO& SC_TASK_INFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TASK_INFO> SC_TASK_INFO_default_instance_;

SC_TASK_INFO* SC_TASK_INFO::New(::google::protobuf::Arena* arena) const {
  SC_TASK_INFO* n = new SC_TASK_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TASK_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_INFO)
  task_info_list_.Clear();
}

bool SC_TASK_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TASK_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_TASK_INFO.Info task_info_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_task_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_task_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_task_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TASK_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TASK_INFO)
  return false;
#undef DO_
}

void SC_TASK_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TASK_INFO)
  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  for (unsigned int i = 0, n = this->task_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_info_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TASK_INFO)
}

::google::protobuf::uint8* SC_TASK_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_INFO)
  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  for (unsigned int i = 0, n = this->task_info_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->task_info_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_INFO)
  return target;
}

size_t SC_TASK_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_INFO)
  size_t total_size = 0;

  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  {
    unsigned int count = this->task_info_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TASK_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TASK_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TASK_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_TASK_INFO::MergeFrom(const SC_TASK_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TASK_INFO::UnsafeMergeFrom(const SC_TASK_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  task_info_list_.MergeFrom(from.task_info_list_);
}

void SC_TASK_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_INFO::CopyFrom(const SC_TASK_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TASK_INFO::IsInitialized() const {

  return true;
}

void SC_TASK_INFO::Swap(SC_TASK_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TASK_INFO::InternalSwap(SC_TASK_INFO* other) {
  task_info_list_.UnsafeArenaSwap(&other->task_info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TASK_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TASK_INFO_descriptor_;
  metadata.reflection = SC_TASK_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TASK_INFO_Info

// optional uint64 task_id = 1;
void SC_TASK_INFO_Info::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TASK_INFO_Info::task_id() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.task_id)
  return task_id_;
}
void SC_TASK_INFO_Info::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.task_id)
}

// optional uint32 accept_time = 2;
void SC_TASK_INFO_Info::clear_accept_time() {
  accept_time_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::accept_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.accept_time)
  return accept_time_;
}
void SC_TASK_INFO_Info::set_accept_time(::google::protobuf::uint32 value) {
  
  accept_time_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.accept_time)
}

// optional uint32 finish_time = 3;
void SC_TASK_INFO_Info::clear_finish_time() {
  finish_time_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::finish_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.finish_time)
  return finish_time_;
}
void SC_TASK_INFO_Info::set_finish_time(::google::protobuf::uint32 value) {
  
  finish_time_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.finish_time)
}

// optional uint32 expire_time = 4;
void SC_TASK_INFO_Info::clear_expire_time() {
  expire_time_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::expire_time() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.expire_time)
  return expire_time_;
}
void SC_TASK_INFO_Info::set_expire_time(::google::protobuf::uint32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.expire_time)
}

// optional uint32 daycount = 5;
void SC_TASK_INFO_Info::clear_daycount() {
  daycount_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::daycount() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.daycount)
  return daycount_;
}
void SC_TASK_INFO_Info::set_daycount(::google::protobuf::uint32 value) {
  
  daycount_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.daycount)
}

// optional uint32 daycount_max = 6;
void SC_TASK_INFO_Info::clear_daycount_max() {
  daycount_max_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::daycount_max() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.daycount_max)
  return daycount_max_;
}
void SC_TASK_INFO_Info::set_daycount_max(::google::protobuf::uint32 value) {
  
  daycount_max_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.daycount_max)
}

// optional uint32 state = 7;
void SC_TASK_INFO_Info::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::state() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.state)
  return state_;
}
void SC_TASK_INFO_Info::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.state)
}

// optional uint32 num1 = 10;
void SC_TASK_INFO_Info::clear_num1() {
  num1_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::num1() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num1)
  return num1_;
}
void SC_TASK_INFO_Info::set_num1(::google::protobuf::uint32 value) {
  
  num1_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num1)
}

// optional uint32 num2 = 11;
void SC_TASK_INFO_Info::clear_num2() {
  num2_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::num2() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num2)
  return num2_;
}
void SC_TASK_INFO_Info::set_num2(::google::protobuf::uint32 value) {
  
  num2_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num2)
}

// optional uint32 num3 = 12;
void SC_TASK_INFO_Info::clear_num3() {
  num3_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::num3() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num3)
  return num3_;
}
void SC_TASK_INFO_Info::set_num3(::google::protobuf::uint32 value) {
  
  num3_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num3)
}

// optional uint32 num4 = 13;
void SC_TASK_INFO_Info::clear_num4() {
  num4_ = 0u;
}
::google::protobuf::uint32 SC_TASK_INFO_Info::num4() const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.Info.num4)
  return num4_;
}
void SC_TASK_INFO_Info::set_num4(::google::protobuf::uint32 value) {
  
  num4_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_INFO.Info.num4)
}

inline const SC_TASK_INFO_Info* SC_TASK_INFO_Info::internal_default_instance() {
  return &SC_TASK_INFO_Info_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_TASK_INFO

// repeated .SC_TASK_INFO.Info task_info_list = 1;
int SC_TASK_INFO::task_info_list_size() const {
  return task_info_list_.size();
}
void SC_TASK_INFO::clear_task_info_list() {
  task_info_list_.Clear();
}
const ::SC_TASK_INFO_Info& SC_TASK_INFO::task_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TASK_INFO.task_info_list)
  return task_info_list_.Get(index);
}
::SC_TASK_INFO_Info* SC_TASK_INFO::mutable_task_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TASK_INFO.task_info_list)
  return task_info_list_.Mutable(index);
}
::SC_TASK_INFO_Info* SC_TASK_INFO::add_task_info_list() {
  // @@protoc_insertion_point(field_add:SC_TASK_INFO.task_info_list)
  return task_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_TASK_INFO_Info >*
SC_TASK_INFO::mutable_task_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TASK_INFO.task_info_list)
  return &task_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_TASK_INFO_Info >&
SC_TASK_INFO::task_info_list() const {
  // @@protoc_insertion_point(field_list:SC_TASK_INFO.task_info_list)
  return task_info_list_;
}

inline const SC_TASK_INFO* SC_TASK_INFO::internal_default_instance() {
  return &SC_TASK_INFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TASK_DATA::kTaskIdFieldNumber;
const int SC_TASK_DATA::kIdxFieldNumber;
const int SC_TASK_DATA::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TASK_DATA::SC_TASK_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_DATA)
}

void SC_TASK_DATA::InitAsDefaultInstance() {
}

SC_TASK_DATA::SC_TASK_DATA(const SC_TASK_DATA& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TASK_DATA)
}

void SC_TASK_DATA::SharedCtor() {
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(num_));
  _cached_size_ = 0;
}

SC_TASK_DATA::~SC_TASK_DATA() {
  // @@protoc_insertion_point(destructor:SC_TASK_DATA)
  SharedDtor();
}

void SC_TASK_DATA::SharedDtor() {
}

void SC_TASK_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TASK_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TASK_DATA_descriptor_;
}

const SC_TASK_DATA& SC_TASK_DATA::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TASK_DATA> SC_TASK_DATA_default_instance_;

SC_TASK_DATA* SC_TASK_DATA::New(::google::protobuf::Arena* arena) const {
  SC_TASK_DATA* n = new SC_TASK_DATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TASK_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_DATA)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TASK_DATA, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TASK_DATA*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, num_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_TASK_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TASK_DATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TASK_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TASK_DATA)
  return false;
#undef DO_
}

void SC_TASK_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TASK_DATA)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TASK_DATA)
}

::google::protobuf::uint8* SC_TASK_DATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_DATA)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_DATA)
  return target;
}

size_t SC_TASK_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_DATA)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  // optional uint32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TASK_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_DATA)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TASK_DATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TASK_DATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_DATA)
    UnsafeMergeFrom(*source);
  }
}

void SC_TASK_DATA::MergeFrom(const SC_TASK_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_DATA)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TASK_DATA::UnsafeMergeFrom(const SC_TASK_DATA& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void SC_TASK_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_DATA::CopyFrom(const SC_TASK_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_DATA)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TASK_DATA::IsInitialized() const {

  return true;
}

void SC_TASK_DATA::Swap(SC_TASK_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TASK_DATA::InternalSwap(SC_TASK_DATA* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(idx_, other->idx_);
  std::swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TASK_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TASK_DATA_descriptor_;
  metadata.reflection = SC_TASK_DATA_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TASK_DATA

// optional uint64 task_id = 1;
void SC_TASK_DATA::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TASK_DATA::task_id() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.task_id)
  return task_id_;
}
void SC_TASK_DATA::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.task_id)
}

// optional uint32 idx = 2;
void SC_TASK_DATA::clear_idx() {
  idx_ = 0u;
}
::google::protobuf::uint32 SC_TASK_DATA::idx() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.idx)
  return idx_;
}
void SC_TASK_DATA::set_idx(::google::protobuf::uint32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.idx)
}

// optional uint32 num = 3;
void SC_TASK_DATA::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 SC_TASK_DATA::num() const {
  // @@protoc_insertion_point(field_get:SC_TASK_DATA.num)
  return num_;
}
void SC_TASK_DATA::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:SC_TASK_DATA.num)
}

inline const SC_TASK_DATA* SC_TASK_DATA::internal_default_instance() {
  return &SC_TASK_DATA_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TASK_SUBMIT::kTaskIdFieldNumber;
const int CS_TASK_SUBMIT::kSubmitMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TASK_SUBMIT::CS_TASK_SUBMIT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TASK_SUBMIT)
}

void CS_TASK_SUBMIT::InitAsDefaultInstance() {
}

CS_TASK_SUBMIT::CS_TASK_SUBMIT(const CS_TASK_SUBMIT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TASK_SUBMIT)
}

void CS_TASK_SUBMIT::SharedCtor() {
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&submit_multiple_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(submit_multiple_));
  _cached_size_ = 0;
}

CS_TASK_SUBMIT::~CS_TASK_SUBMIT() {
  // @@protoc_insertion_point(destructor:CS_TASK_SUBMIT)
  SharedDtor();
}

void CS_TASK_SUBMIT::SharedDtor() {
}

void CS_TASK_SUBMIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TASK_SUBMIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TASK_SUBMIT_descriptor_;
}

const CS_TASK_SUBMIT& CS_TASK_SUBMIT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TASK_SUBMIT> CS_TASK_SUBMIT_default_instance_;

CS_TASK_SUBMIT* CS_TASK_SUBMIT::New(::google::protobuf::Arena* arena) const {
  CS_TASK_SUBMIT* n = new CS_TASK_SUBMIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TASK_SUBMIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TASK_SUBMIT)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_TASK_SUBMIT, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_TASK_SUBMIT*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, submit_multiple_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_TASK_SUBMIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TASK_SUBMIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submit_multiple;
        break;
      }

      // optional uint32 submit_multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_submit_multiple:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submit_multiple_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TASK_SUBMIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TASK_SUBMIT)
  return false;
#undef DO_
}

void CS_TASK_SUBMIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TASK_SUBMIT)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional uint32 submit_multiple = 2;
  if (this->submit_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->submit_multiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TASK_SUBMIT)
}

::google::protobuf::uint8* CS_TASK_SUBMIT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TASK_SUBMIT)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional uint32 submit_multiple = 2;
  if (this->submit_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->submit_multiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TASK_SUBMIT)
  return target;
}

size_t CS_TASK_SUBMIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TASK_SUBMIT)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional uint32 submit_multiple = 2;
  if (this->submit_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submit_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TASK_SUBMIT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TASK_SUBMIT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TASK_SUBMIT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TASK_SUBMIT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TASK_SUBMIT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TASK_SUBMIT)
    UnsafeMergeFrom(*source);
  }
}

void CS_TASK_SUBMIT::MergeFrom(const CS_TASK_SUBMIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TASK_SUBMIT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TASK_SUBMIT::UnsafeMergeFrom(const CS_TASK_SUBMIT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.submit_multiple() != 0) {
    set_submit_multiple(from.submit_multiple());
  }
}

void CS_TASK_SUBMIT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TASK_SUBMIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TASK_SUBMIT::CopyFrom(const CS_TASK_SUBMIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TASK_SUBMIT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TASK_SUBMIT::IsInitialized() const {

  return true;
}

void CS_TASK_SUBMIT::Swap(CS_TASK_SUBMIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TASK_SUBMIT::InternalSwap(CS_TASK_SUBMIT* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(submit_multiple_, other->submit_multiple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TASK_SUBMIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TASK_SUBMIT_descriptor_;
  metadata.reflection = CS_TASK_SUBMIT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TASK_SUBMIT

// optional uint64 task_id = 1;
void CS_TASK_SUBMIT::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TASK_SUBMIT::task_id() const {
  // @@protoc_insertion_point(field_get:CS_TASK_SUBMIT.task_id)
  return task_id_;
}
void CS_TASK_SUBMIT::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TASK_SUBMIT.task_id)
}

// optional uint32 submit_multiple = 2;
void CS_TASK_SUBMIT::clear_submit_multiple() {
  submit_multiple_ = 0u;
}
::google::protobuf::uint32 CS_TASK_SUBMIT::submit_multiple() const {
  // @@protoc_insertion_point(field_get:CS_TASK_SUBMIT.submit_multiple)
  return submit_multiple_;
}
void CS_TASK_SUBMIT::set_submit_multiple(::google::protobuf::uint32 value) {
  
  submit_multiple_ = value;
  // @@protoc_insertion_point(field_set:CS_TASK_SUBMIT.submit_multiple)
}

inline const CS_TASK_SUBMIT* CS_TASK_SUBMIT::internal_default_instance() {
  return &CS_TASK_SUBMIT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ACTIVE_NPC::kNpcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ACTIVE_NPC::CS_ACTIVE_NPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ACTIVE_NPC)
}

void CS_ACTIVE_NPC::InitAsDefaultInstance() {
}

CS_ACTIVE_NPC::CS_ACTIVE_NPC(const CS_ACTIVE_NPC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ACTIVE_NPC)
}

void CS_ACTIVE_NPC::SharedCtor() {
  npc_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_ACTIVE_NPC::~CS_ACTIVE_NPC() {
  // @@protoc_insertion_point(destructor:CS_ACTIVE_NPC)
  SharedDtor();
}

void CS_ACTIVE_NPC::SharedDtor() {
}

void CS_ACTIVE_NPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ACTIVE_NPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ACTIVE_NPC_descriptor_;
}

const CS_ACTIVE_NPC& CS_ACTIVE_NPC::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ACTIVE_NPC> CS_ACTIVE_NPC_default_instance_;

CS_ACTIVE_NPC* CS_ACTIVE_NPC::New(::google::protobuf::Arena* arena) const {
  CS_ACTIVE_NPC* n = new CS_ACTIVE_NPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ACTIVE_NPC::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ACTIVE_NPC)
  npc_id_ = GOOGLE_ULONGLONG(0);
}

bool CS_ACTIVE_NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ACTIVE_NPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 npc_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npc_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ACTIVE_NPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ACTIVE_NPC)
  return false;
#undef DO_
}

void CS_ACTIVE_NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ACTIVE_NPC)
  // optional uint64 npc_id = 1;
  if (this->npc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->npc_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ACTIVE_NPC)
}

::google::protobuf::uint8* CS_ACTIVE_NPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ACTIVE_NPC)
  // optional uint64 npc_id = 1;
  if (this->npc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->npc_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ACTIVE_NPC)
  return target;
}

size_t CS_ACTIVE_NPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ACTIVE_NPC)
  size_t total_size = 0;

  // optional uint64 npc_id = 1;
  if (this->npc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->npc_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ACTIVE_NPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ACTIVE_NPC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ACTIVE_NPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ACTIVE_NPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ACTIVE_NPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ACTIVE_NPC)
    UnsafeMergeFrom(*source);
  }
}

void CS_ACTIVE_NPC::MergeFrom(const CS_ACTIVE_NPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ACTIVE_NPC)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ACTIVE_NPC::UnsafeMergeFrom(const CS_ACTIVE_NPC& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.npc_id() != 0) {
    set_npc_id(from.npc_id());
  }
}

void CS_ACTIVE_NPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ACTIVE_NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ACTIVE_NPC::CopyFrom(const CS_ACTIVE_NPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ACTIVE_NPC)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ACTIVE_NPC::IsInitialized() const {

  return true;
}

void CS_ACTIVE_NPC::Swap(CS_ACTIVE_NPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ACTIVE_NPC::InternalSwap(CS_ACTIVE_NPC* other) {
  std::swap(npc_id_, other->npc_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ACTIVE_NPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ACTIVE_NPC_descriptor_;
  metadata.reflection = CS_ACTIVE_NPC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ACTIVE_NPC

// optional uint64 npc_id = 1;
void CS_ACTIVE_NPC::clear_npc_id() {
  npc_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_ACTIVE_NPC::npc_id() const {
  // @@protoc_insertion_point(field_get:CS_ACTIVE_NPC.npc_id)
  return npc_id_;
}
void CS_ACTIVE_NPC::set_npc_id(::google::protobuf::uint64 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ACTIVE_NPC.npc_id)
}

inline const CS_ACTIVE_NPC* CS_ACTIVE_NPC::internal_default_instance() {
  return &CS_ACTIVE_NPC_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DIALOG_dialog_link::kStyleFieldNumber;
const int SC_DIALOG_dialog_link::kTxtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DIALOG_dialog_link::SC_DIALOG_dialog_link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DIALOG.dialog_link)
}

void SC_DIALOG_dialog_link::InitAsDefaultInstance() {
}

SC_DIALOG_dialog_link::SC_DIALOG_dialog_link(const SC_DIALOG_dialog_link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DIALOG.dialog_link)
}

void SC_DIALOG_dialog_link::SharedCtor() {
  txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  style_ = 0u;
  _cached_size_ = 0;
}

SC_DIALOG_dialog_link::~SC_DIALOG_dialog_link() {
  // @@protoc_insertion_point(destructor:SC_DIALOG.dialog_link)
  SharedDtor();
}

void SC_DIALOG_dialog_link::SharedDtor() {
  txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_DIALOG_dialog_link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DIALOG_dialog_link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DIALOG_dialog_link_descriptor_;
}

const SC_DIALOG_dialog_link& SC_DIALOG_dialog_link::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DIALOG_dialog_link> SC_DIALOG_dialog_link_default_instance_;

SC_DIALOG_dialog_link* SC_DIALOG_dialog_link::New(::google::protobuf::Arena* arena) const {
  SC_DIALOG_dialog_link* n = new SC_DIALOG_dialog_link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DIALOG_dialog_link::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DIALOG.dialog_link)
  style_ = 0u;
  txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SC_DIALOG_dialog_link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DIALOG.dialog_link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 style = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        break;
      }

      // optional string txt = 2;
      case 2: {
        if (tag == 18) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_DIALOG.dialog_link.txt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DIALOG.dialog_link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DIALOG.dialog_link)
  return false;
#undef DO_
}

void SC_DIALOG_dialog_link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DIALOG.dialog_link)
  // optional uint32 style = 1;
  if (this->style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->style(), output);
  }

  // optional string txt = 2;
  if (this->txt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_link.txt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txt(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DIALOG.dialog_link)
}

::google::protobuf::uint8* SC_DIALOG_dialog_link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DIALOG.dialog_link)
  // optional uint32 style = 1;
  if (this->style() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->style(), target);
  }

  // optional string txt = 2;
  if (this->txt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_link.txt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txt(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DIALOG.dialog_link)
  return target;
}

size_t SC_DIALOG_dialog_link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DIALOG.dialog_link)
  size_t total_size = 0;

  // optional uint32 style = 1;
  if (this->style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());
  }

  // optional string txt = 2;
  if (this->txt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DIALOG_dialog_link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DIALOG.dialog_link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DIALOG_dialog_link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DIALOG_dialog_link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DIALOG.dialog_link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DIALOG.dialog_link)
    UnsafeMergeFrom(*source);
  }
}

void SC_DIALOG_dialog_link::MergeFrom(const SC_DIALOG_dialog_link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DIALOG.dialog_link)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DIALOG_dialog_link::UnsafeMergeFrom(const SC_DIALOG_dialog_link& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.style() != 0) {
    set_style(from.style());
  }
  if (from.txt().size() > 0) {

    txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txt_);
  }
}

void SC_DIALOG_dialog_link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DIALOG.dialog_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DIALOG_dialog_link::CopyFrom(const SC_DIALOG_dialog_link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DIALOG.dialog_link)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DIALOG_dialog_link::IsInitialized() const {

  return true;
}

void SC_DIALOG_dialog_link::Swap(SC_DIALOG_dialog_link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DIALOG_dialog_link::InternalSwap(SC_DIALOG_dialog_link* other) {
  std::swap(style_, other->style_);
  txt_.Swap(&other->txt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DIALOG_dialog_link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DIALOG_dialog_link_descriptor_;
  metadata.reflection = SC_DIALOG_dialog_link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DIALOG::kDialogIdFieldNumber;
const int SC_DIALOG::kDialogTypeFieldNumber;
const int SC_DIALOG::kDialogTitleFieldNumber;
const int SC_DIALOG::kDialogTxtFieldNumber;
const int SC_DIALOG::kDialogLinkListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DIALOG::SC_DIALOG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DIALOG)
}

void SC_DIALOG::InitAsDefaultInstance() {
}

SC_DIALOG::SC_DIALOG(const SC_DIALOG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DIALOG)
}

void SC_DIALOG::SharedCtor() {
  dialog_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dialog_id_, 0, reinterpret_cast<char*>(&dialog_type_) -
    reinterpret_cast<char*>(&dialog_id_) + sizeof(dialog_type_));
  _cached_size_ = 0;
}

SC_DIALOG::~SC_DIALOG() {
  // @@protoc_insertion_point(destructor:SC_DIALOG)
  SharedDtor();
}

void SC_DIALOG::SharedDtor() {
  dialog_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_DIALOG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DIALOG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DIALOG_descriptor_;
}

const SC_DIALOG& SC_DIALOG::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DIALOG> SC_DIALOG_default_instance_;

SC_DIALOG* SC_DIALOG::New(::google::protobuf::Arena* arena) const {
  SC_DIALOG* n = new SC_DIALOG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DIALOG::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DIALOG)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_DIALOG, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_DIALOG*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dialog_id_, dialog_type_);
  dialog_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  dialog_txt_.Clear();
  dialog_link_list_.Clear();
}

bool SC_DIALOG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DIALOG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dialog_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dialog_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dialog_type;
        break;
      }

      // optional uint32 dialog_type = 2;
      case 2: {
        if (tag == 16) {
         parse_dialog_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialog_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dialog_title;
        break;
      }

      // optional string dialog_title = 3;
      case 3: {
        if (tag == 26) {
         parse_dialog_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dialog_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dialog_title().data(), this->dialog_title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_DIALOG.dialog_title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dialog_txt;
        break;
      }

      // repeated string dialog_txt = 4;
      case 4: {
        if (tag == 34) {
         parse_dialog_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dialog_txt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dialog_txt(this->dialog_txt_size() - 1).data(),
            this->dialog_txt(this->dialog_txt_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_DIALOG.dialog_txt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dialog_txt;
        if (input->ExpectTag(42)) goto parse_dialog_link_list;
        break;
      }

      // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
      case 5: {
        if (tag == 42) {
         parse_dialog_link_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_dialog_link_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dialog_link_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_dialog_link_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DIALOG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DIALOG)
  return false;
#undef DO_
}

void SC_DIALOG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DIALOG)
  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dialog_id(), output);
  }

  // optional uint32 dialog_type = 2;
  if (this->dialog_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dialog_type(), output);
  }

  // optional string dialog_title = 3;
  if (this->dialog_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dialog_title().data(), this->dialog_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dialog_title(), output);
  }

  // repeated string dialog_txt = 4;
  for (int i = 0; i < this->dialog_txt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dialog_txt(i).data(), this->dialog_txt(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_txt");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dialog_txt(i), output);
  }

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  for (unsigned int i = 0, n = this->dialog_link_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dialog_link_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_DIALOG)
}

::google::protobuf::uint8* SC_DIALOG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DIALOG)
  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dialog_id(), target);
  }

  // optional uint32 dialog_type = 2;
  if (this->dialog_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dialog_type(), target);
  }

  // optional string dialog_title = 3;
  if (this->dialog_title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dialog_title().data(), this->dialog_title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dialog_title(), target);
  }

  // repeated string dialog_txt = 4;
  for (int i = 0; i < this->dialog_txt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dialog_txt(i).data(), this->dialog_txt(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_txt");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->dialog_txt(i), target);
  }

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  for (unsigned int i = 0, n = this->dialog_link_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->dialog_link_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_DIALOG)
  return target;
}

size_t SC_DIALOG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DIALOG)
  size_t total_size = 0;

  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dialog_id());
  }

  // optional uint32 dialog_type = 2;
  if (this->dialog_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dialog_type());
  }

  // optional string dialog_title = 3;
  if (this->dialog_title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dialog_title());
  }

  // repeated string dialog_txt = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dialog_txt_size());
  for (int i = 0; i < this->dialog_txt_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dialog_txt(i));
  }

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  {
    unsigned int count = this->dialog_link_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dialog_link_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DIALOG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DIALOG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DIALOG* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DIALOG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DIALOG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DIALOG)
    UnsafeMergeFrom(*source);
  }
}

void SC_DIALOG::MergeFrom(const SC_DIALOG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DIALOG)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DIALOG::UnsafeMergeFrom(const SC_DIALOG& from) {
  GOOGLE_DCHECK(&from != this);
  dialog_txt_.UnsafeMergeFrom(from.dialog_txt_);
  dialog_link_list_.MergeFrom(from.dialog_link_list_);
  if (from.dialog_id() != 0) {
    set_dialog_id(from.dialog_id());
  }
  if (from.dialog_type() != 0) {
    set_dialog_type(from.dialog_type());
  }
  if (from.dialog_title().size() > 0) {

    dialog_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dialog_title_);
  }
}

void SC_DIALOG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DIALOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DIALOG::CopyFrom(const SC_DIALOG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DIALOG)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DIALOG::IsInitialized() const {

  return true;
}

void SC_DIALOG::Swap(SC_DIALOG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DIALOG::InternalSwap(SC_DIALOG* other) {
  std::swap(dialog_id_, other->dialog_id_);
  std::swap(dialog_type_, other->dialog_type_);
  dialog_title_.Swap(&other->dialog_title_);
  dialog_txt_.UnsafeArenaSwap(&other->dialog_txt_);
  dialog_link_list_.UnsafeArenaSwap(&other->dialog_link_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DIALOG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DIALOG_descriptor_;
  metadata.reflection = SC_DIALOG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_DIALOG_dialog_link

// optional uint32 style = 1;
void SC_DIALOG_dialog_link::clear_style() {
  style_ = 0u;
}
::google::protobuf::uint32 SC_DIALOG_dialog_link::style() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link.style)
  return style_;
}
void SC_DIALOG_dialog_link::set_style(::google::protobuf::uint32 value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_link.style)
}

// optional string txt = 2;
void SC_DIALOG_dialog_link::clear_txt() {
  txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_DIALOG_dialog_link::txt() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link.txt)
  return txt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_DIALOG_dialog_link::set_txt(const ::std::string& value) {
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_link.txt)
}
void SC_DIALOG_dialog_link::set_txt(const char* value) {
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_link.txt)
}
void SC_DIALOG_dialog_link::set_txt(const char* value, size_t size) {
  
  txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_link.txt)
}
::std::string* SC_DIALOG_dialog_link::mutable_txt() {
  
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_link.txt)
  return txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_DIALOG_dialog_link::release_txt() {
  // @@protoc_insertion_point(field_release:SC_DIALOG.dialog_link.txt)
  
  return txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_DIALOG_dialog_link::set_allocated_txt(::std::string* txt) {
  if (txt != NULL) {
    
  } else {
    
  }
  txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txt);
  // @@protoc_insertion_point(field_set_allocated:SC_DIALOG.dialog_link.txt)
}

inline const SC_DIALOG_dialog_link* SC_DIALOG_dialog_link::internal_default_instance() {
  return &SC_DIALOG_dialog_link_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_DIALOG

// optional uint64 dialog_id = 1;
void SC_DIALOG::clear_dialog_id() {
  dialog_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_DIALOG::dialog_id() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_id)
  return dialog_id_;
}
void SC_DIALOG::set_dialog_id(::google::protobuf::uint64 value) {
  
  dialog_id_ = value;
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_id)
}

// optional uint32 dialog_type = 2;
void SC_DIALOG::clear_dialog_type() {
  dialog_type_ = 0u;
}
::google::protobuf::uint32 SC_DIALOG::dialog_type() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_type)
  return dialog_type_;
}
void SC_DIALOG::set_dialog_type(::google::protobuf::uint32 value) {
  
  dialog_type_ = value;
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_type)
}

// optional string dialog_title = 3;
void SC_DIALOG::clear_dialog_title() {
  dialog_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_DIALOG::dialog_title() const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_title)
  return dialog_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_DIALOG::set_dialog_title(const ::std::string& value) {
  
  dialog_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_title)
}
void SC_DIALOG::set_dialog_title(const char* value) {
  
  dialog_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_title)
}
void SC_DIALOG::set_dialog_title(const char* value, size_t size) {
  
  dialog_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_title)
}
::std::string* SC_DIALOG::mutable_dialog_title() {
  
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_title)
  return dialog_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_DIALOG::release_dialog_title() {
  // @@protoc_insertion_point(field_release:SC_DIALOG.dialog_title)
  
  return dialog_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_DIALOG::set_allocated_dialog_title(::std::string* dialog_title) {
  if (dialog_title != NULL) {
    
  } else {
    
  }
  dialog_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dialog_title);
  // @@protoc_insertion_point(field_set_allocated:SC_DIALOG.dialog_title)
}

// repeated string dialog_txt = 4;
int SC_DIALOG::dialog_txt_size() const {
  return dialog_txt_.size();
}
void SC_DIALOG::clear_dialog_txt() {
  dialog_txt_.Clear();
}
const ::std::string& SC_DIALOG::dialog_txt(int index) const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_txt)
  return dialog_txt_.Get(index);
}
::std::string* SC_DIALOG::mutable_dialog_txt(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_txt)
  return dialog_txt_.Mutable(index);
}
void SC_DIALOG::set_dialog_txt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC_DIALOG.dialog_txt)
  dialog_txt_.Mutable(index)->assign(value);
}
void SC_DIALOG::set_dialog_txt(int index, const char* value) {
  dialog_txt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC_DIALOG.dialog_txt)
}
void SC_DIALOG::set_dialog_txt(int index, const char* value, size_t size) {
  dialog_txt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC_DIALOG.dialog_txt)
}
::std::string* SC_DIALOG::add_dialog_txt() {
  // @@protoc_insertion_point(field_add_mutable:SC_DIALOG.dialog_txt)
  return dialog_txt_.Add();
}
void SC_DIALOG::add_dialog_txt(const ::std::string& value) {
  dialog_txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC_DIALOG.dialog_txt)
}
void SC_DIALOG::add_dialog_txt(const char* value) {
  dialog_txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC_DIALOG.dialog_txt)
}
void SC_DIALOG::add_dialog_txt(const char* value, size_t size) {
  dialog_txt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC_DIALOG.dialog_txt)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SC_DIALOG::dialog_txt() const {
  // @@protoc_insertion_point(field_list:SC_DIALOG.dialog_txt)
  return dialog_txt_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SC_DIALOG::mutable_dialog_txt() {
  // @@protoc_insertion_point(field_mutable_list:SC_DIALOG.dialog_txt)
  return &dialog_txt_;
}

// repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
int SC_DIALOG::dialog_link_list_size() const {
  return dialog_link_list_.size();
}
void SC_DIALOG::clear_dialog_link_list() {
  dialog_link_list_.Clear();
}
const ::SC_DIALOG_dialog_link& SC_DIALOG::dialog_link_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_DIALOG.dialog_link_list)
  return dialog_link_list_.Get(index);
}
::SC_DIALOG_dialog_link* SC_DIALOG::mutable_dialog_link_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DIALOG.dialog_link_list)
  return dialog_link_list_.Mutable(index);
}
::SC_DIALOG_dialog_link* SC_DIALOG::add_dialog_link_list() {
  // @@protoc_insertion_point(field_add:SC_DIALOG.dialog_link_list)
  return dialog_link_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_DIALOG_dialog_link >*
SC_DIALOG::mutable_dialog_link_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_DIALOG.dialog_link_list)
  return &dialog_link_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_DIALOG_dialog_link >&
SC_DIALOG::dialog_link_list() const {
  // @@protoc_insertion_point(field_list:SC_DIALOG.dialog_link_list)
  return dialog_link_list_;
}

inline const SC_DIALOG* SC_DIALOG::internal_default_instance() {
  return &SC_DIALOG_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_DIALOG_CLICK::kDialogIdFieldNumber;
const int CS_DIALOG_CLICK::kDialogButtonIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_DIALOG_CLICK::CS_DIALOG_CLICK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_DIALOG_CLICK)
}

void CS_DIALOG_CLICK::InitAsDefaultInstance() {
}

CS_DIALOG_CLICK::CS_DIALOG_CLICK(const CS_DIALOG_CLICK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_DIALOG_CLICK)
}

void CS_DIALOG_CLICK::SharedCtor() {
  ::memset(&dialog_id_, 0, reinterpret_cast<char*>(&dialog_button_idx_) -
    reinterpret_cast<char*>(&dialog_id_) + sizeof(dialog_button_idx_));
  _cached_size_ = 0;
}

CS_DIALOG_CLICK::~CS_DIALOG_CLICK() {
  // @@protoc_insertion_point(destructor:CS_DIALOG_CLICK)
  SharedDtor();
}

void CS_DIALOG_CLICK::SharedDtor() {
}

void CS_DIALOG_CLICK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_DIALOG_CLICK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_DIALOG_CLICK_descriptor_;
}

const CS_DIALOG_CLICK& CS_DIALOG_CLICK::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_DIALOG_CLICK> CS_DIALOG_CLICK_default_instance_;

CS_DIALOG_CLICK* CS_DIALOG_CLICK::New(::google::protobuf::Arena* arena) const {
  CS_DIALOG_CLICK* n = new CS_DIALOG_CLICK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_DIALOG_CLICK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_DIALOG_CLICK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_DIALOG_CLICK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_DIALOG_CLICK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dialog_id_, dialog_button_idx_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_DIALOG_CLICK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_DIALOG_CLICK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dialog_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dialog_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dialog_button_idx;
        break;
      }

      // optional uint32 dialog_button_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_dialog_button_idx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialog_button_idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_DIALOG_CLICK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_DIALOG_CLICK)
  return false;
#undef DO_
}

void CS_DIALOG_CLICK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_DIALOG_CLICK)
  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dialog_id(), output);
  }

  // optional uint32 dialog_button_idx = 2;
  if (this->dialog_button_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dialog_button_idx(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_DIALOG_CLICK)
}

::google::protobuf::uint8* CS_DIALOG_CLICK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_DIALOG_CLICK)
  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dialog_id(), target);
  }

  // optional uint32 dialog_button_idx = 2;
  if (this->dialog_button_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dialog_button_idx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_DIALOG_CLICK)
  return target;
}

size_t CS_DIALOG_CLICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_DIALOG_CLICK)
  size_t total_size = 0;

  // optional uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dialog_id());
  }

  // optional uint32 dialog_button_idx = 2;
  if (this->dialog_button_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dialog_button_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_DIALOG_CLICK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_DIALOG_CLICK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_DIALOG_CLICK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_DIALOG_CLICK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_DIALOG_CLICK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_DIALOG_CLICK)
    UnsafeMergeFrom(*source);
  }
}

void CS_DIALOG_CLICK::MergeFrom(const CS_DIALOG_CLICK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_DIALOG_CLICK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_DIALOG_CLICK::UnsafeMergeFrom(const CS_DIALOG_CLICK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dialog_id() != 0) {
    set_dialog_id(from.dialog_id());
  }
  if (from.dialog_button_idx() != 0) {
    set_dialog_button_idx(from.dialog_button_idx());
  }
}

void CS_DIALOG_CLICK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_DIALOG_CLICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_DIALOG_CLICK::CopyFrom(const CS_DIALOG_CLICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_DIALOG_CLICK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_DIALOG_CLICK::IsInitialized() const {

  return true;
}

void CS_DIALOG_CLICK::Swap(CS_DIALOG_CLICK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_DIALOG_CLICK::InternalSwap(CS_DIALOG_CLICK* other) {
  std::swap(dialog_id_, other->dialog_id_);
  std::swap(dialog_button_idx_, other->dialog_button_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_DIALOG_CLICK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_DIALOG_CLICK_descriptor_;
  metadata.reflection = CS_DIALOG_CLICK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_DIALOG_CLICK

// optional uint64 dialog_id = 1;
void CS_DIALOG_CLICK::clear_dialog_id() {
  dialog_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_DIALOG_CLICK::dialog_id() const {
  // @@protoc_insertion_point(field_get:CS_DIALOG_CLICK.dialog_id)
  return dialog_id_;
}
void CS_DIALOG_CLICK::set_dialog_id(::google::protobuf::uint64 value) {
  
  dialog_id_ = value;
  // @@protoc_insertion_point(field_set:CS_DIALOG_CLICK.dialog_id)
}

// optional uint32 dialog_button_idx = 2;
void CS_DIALOG_CLICK::clear_dialog_button_idx() {
  dialog_button_idx_ = 0u;
}
::google::protobuf::uint32 CS_DIALOG_CLICK::dialog_button_idx() const {
  // @@protoc_insertion_point(field_get:CS_DIALOG_CLICK.dialog_button_idx)
  return dialog_button_idx_;
}
void CS_DIALOG_CLICK::set_dialog_button_idx(::google::protobuf::uint32 value) {
  
  dialog_button_idx_ = value;
  // @@protoc_insertion_point(field_set:CS_DIALOG_CLICK.dialog_button_idx)
}

inline const CS_DIALOG_CLICK* CS_DIALOG_CLICK::internal_default_instance() {
  return &CS_DIALOG_CLICK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ACHI_INFO_Info::kAchiIdFieldNumber;
const int SC_ACHI_INFO_Info::kTakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ACHI_INFO_Info::SC_ACHI_INFO_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACHI_INFO.Info)
}

void SC_ACHI_INFO_Info::InitAsDefaultInstance() {
}

SC_ACHI_INFO_Info::SC_ACHI_INFO_Info(const SC_ACHI_INFO_Info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ACHI_INFO.Info)
}

void SC_ACHI_INFO_Info::SharedCtor() {
  ::memset(&achi_id_, 0, reinterpret_cast<char*>(&take_) -
    reinterpret_cast<char*>(&achi_id_) + sizeof(take_));
  _cached_size_ = 0;
}

SC_ACHI_INFO_Info::~SC_ACHI_INFO_Info() {
  // @@protoc_insertion_point(destructor:SC_ACHI_INFO.Info)
  SharedDtor();
}

void SC_ACHI_INFO_Info::SharedDtor() {
}

void SC_ACHI_INFO_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ACHI_INFO_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ACHI_INFO_Info_descriptor_;
}

const SC_ACHI_INFO_Info& SC_ACHI_INFO_Info::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ACHI_INFO_Info> SC_ACHI_INFO_Info_default_instance_;

SC_ACHI_INFO_Info* SC_ACHI_INFO_Info::New(::google::protobuf::Arena* arena) const {
  SC_ACHI_INFO_Info* n = new SC_ACHI_INFO_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ACHI_INFO_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACHI_INFO.Info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ACHI_INFO_Info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ACHI_INFO_Info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(achi_id_, take_);

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ACHI_INFO_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ACHI_INFO.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achi_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achi_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_take;
        break;
      }

      // optional uint32 take = 2;
      case 2: {
        if (tag == 16) {
         parse_take:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ACHI_INFO.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ACHI_INFO.Info)
  return false;
#undef DO_
}

void SC_ACHI_INFO_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ACHI_INFO.Info)
  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achi_id(), output);
  }

  // optional uint32 take = 2;
  if (this->take() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->take(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ACHI_INFO.Info)
}

::google::protobuf::uint8* SC_ACHI_INFO_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACHI_INFO.Info)
  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achi_id(), target);
  }

  // optional uint32 take = 2;
  if (this->take() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->take(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ACHI_INFO.Info)
  return target;
}

size_t SC_ACHI_INFO_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACHI_INFO.Info)
  size_t total_size = 0;

  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achi_id());
  }

  // optional uint32 take = 2;
  if (this->take() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->take());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ACHI_INFO_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACHI_INFO.Info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ACHI_INFO_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ACHI_INFO_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACHI_INFO.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACHI_INFO.Info)
    UnsafeMergeFrom(*source);
  }
}

void SC_ACHI_INFO_Info::MergeFrom(const SC_ACHI_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACHI_INFO.Info)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ACHI_INFO_Info::UnsafeMergeFrom(const SC_ACHI_INFO_Info& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.achi_id() != 0) {
    set_achi_id(from.achi_id());
  }
  if (from.take() != 0) {
    set_take(from.take());
  }
}

void SC_ACHI_INFO_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACHI_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACHI_INFO_Info::CopyFrom(const SC_ACHI_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACHI_INFO.Info)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ACHI_INFO_Info::IsInitialized() const {

  return true;
}

void SC_ACHI_INFO_Info::Swap(SC_ACHI_INFO_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ACHI_INFO_Info::InternalSwap(SC_ACHI_INFO_Info* other) {
  std::swap(achi_id_, other->achi_id_);
  std::swap(take_, other->take_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ACHI_INFO_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ACHI_INFO_Info_descriptor_;
  metadata.reflection = SC_ACHI_INFO_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ACHI_INFO::kFinishListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ACHI_INFO::SC_ACHI_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACHI_INFO)
}

void SC_ACHI_INFO::InitAsDefaultInstance() {
}

SC_ACHI_INFO::SC_ACHI_INFO(const SC_ACHI_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ACHI_INFO)
}

void SC_ACHI_INFO::SharedCtor() {
  _cached_size_ = 0;
}

SC_ACHI_INFO::~SC_ACHI_INFO() {
  // @@protoc_insertion_point(destructor:SC_ACHI_INFO)
  SharedDtor();
}

void SC_ACHI_INFO::SharedDtor() {
}

void SC_ACHI_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ACHI_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ACHI_INFO_descriptor_;
}

const SC_ACHI_INFO& SC_ACHI_INFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ACHI_INFO> SC_ACHI_INFO_default_instance_;

SC_ACHI_INFO* SC_ACHI_INFO::New(::google::protobuf::Arena* arena) const {
  SC_ACHI_INFO* n = new SC_ACHI_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ACHI_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACHI_INFO)
  finish_list_.Clear();
}

bool SC_ACHI_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ACHI_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_ACHI_INFO.Info finish_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_finish_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_finish_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_finish_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ACHI_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ACHI_INFO)
  return false;
#undef DO_
}

void SC_ACHI_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ACHI_INFO)
  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  for (unsigned int i = 0, n = this->finish_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->finish_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ACHI_INFO)
}

::google::protobuf::uint8* SC_ACHI_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACHI_INFO)
  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  for (unsigned int i = 0, n = this->finish_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->finish_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ACHI_INFO)
  return target;
}

size_t SC_ACHI_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACHI_INFO)
  size_t total_size = 0;

  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  {
    unsigned int count = this->finish_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ACHI_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACHI_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ACHI_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ACHI_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACHI_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACHI_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_ACHI_INFO::MergeFrom(const SC_ACHI_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACHI_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ACHI_INFO::UnsafeMergeFrom(const SC_ACHI_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  finish_list_.MergeFrom(from.finish_list_);
}

void SC_ACHI_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACHI_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACHI_INFO::CopyFrom(const SC_ACHI_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACHI_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ACHI_INFO::IsInitialized() const {

  return true;
}

void SC_ACHI_INFO::Swap(SC_ACHI_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ACHI_INFO::InternalSwap(SC_ACHI_INFO* other) {
  finish_list_.UnsafeArenaSwap(&other->finish_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ACHI_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ACHI_INFO_descriptor_;
  metadata.reflection = SC_ACHI_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ACHI_INFO_Info

// optional uint32 achi_id = 1;
void SC_ACHI_INFO_Info::clear_achi_id() {
  achi_id_ = 0u;
}
::google::protobuf::uint32 SC_ACHI_INFO_Info::achi_id() const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.Info.achi_id)
  return achi_id_;
}
void SC_ACHI_INFO_Info::set_achi_id(::google::protobuf::uint32 value) {
  
  achi_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ACHI_INFO.Info.achi_id)
}

// optional uint32 take = 2;
void SC_ACHI_INFO_Info::clear_take() {
  take_ = 0u;
}
::google::protobuf::uint32 SC_ACHI_INFO_Info::take() const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.Info.take)
  return take_;
}
void SC_ACHI_INFO_Info::set_take(::google::protobuf::uint32 value) {
  
  take_ = value;
  // @@protoc_insertion_point(field_set:SC_ACHI_INFO.Info.take)
}

inline const SC_ACHI_INFO_Info* SC_ACHI_INFO_Info::internal_default_instance() {
  return &SC_ACHI_INFO_Info_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_ACHI_INFO

// repeated .SC_ACHI_INFO.Info finish_list = 1;
int SC_ACHI_INFO::finish_list_size() const {
  return finish_list_.size();
}
void SC_ACHI_INFO::clear_finish_list() {
  finish_list_.Clear();
}
const ::SC_ACHI_INFO_Info& SC_ACHI_INFO::finish_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACHI_INFO.finish_list)
  return finish_list_.Get(index);
}
::SC_ACHI_INFO_Info* SC_ACHI_INFO::mutable_finish_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ACHI_INFO.finish_list)
  return finish_list_.Mutable(index);
}
::SC_ACHI_INFO_Info* SC_ACHI_INFO::add_finish_list() {
  // @@protoc_insertion_point(field_add:SC_ACHI_INFO.finish_list)
  return finish_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_ACHI_INFO_Info >*
SC_ACHI_INFO::mutable_finish_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACHI_INFO.finish_list)
  return &finish_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_ACHI_INFO_Info >&
SC_ACHI_INFO::finish_list() const {
  // @@protoc_insertion_point(field_list:SC_ACHI_INFO.finish_list)
  return finish_list_;
}

inline const SC_ACHI_INFO* SC_ACHI_INFO::internal_default_instance() {
  return &SC_ACHI_INFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ACHI_TAKE::kAchiIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ACHI_TAKE::CS_ACHI_TAKE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ACHI_TAKE)
}

void CS_ACHI_TAKE::InitAsDefaultInstance() {
}

CS_ACHI_TAKE::CS_ACHI_TAKE(const CS_ACHI_TAKE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ACHI_TAKE)
}

void CS_ACHI_TAKE::SharedCtor() {
  achi_id_ = 0u;
  _cached_size_ = 0;
}

CS_ACHI_TAKE::~CS_ACHI_TAKE() {
  // @@protoc_insertion_point(destructor:CS_ACHI_TAKE)
  SharedDtor();
}

void CS_ACHI_TAKE::SharedDtor() {
}

void CS_ACHI_TAKE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ACHI_TAKE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ACHI_TAKE_descriptor_;
}

const CS_ACHI_TAKE& CS_ACHI_TAKE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ACHI_TAKE> CS_ACHI_TAKE_default_instance_;

CS_ACHI_TAKE* CS_ACHI_TAKE::New(::google::protobuf::Arena* arena) const {
  CS_ACHI_TAKE* n = new CS_ACHI_TAKE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ACHI_TAKE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ACHI_TAKE)
  achi_id_ = 0u;
}

bool CS_ACHI_TAKE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ACHI_TAKE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achi_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achi_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ACHI_TAKE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ACHI_TAKE)
  return false;
#undef DO_
}

void CS_ACHI_TAKE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ACHI_TAKE)
  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achi_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_ACHI_TAKE)
}

::google::protobuf::uint8* CS_ACHI_TAKE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ACHI_TAKE)
  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achi_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_ACHI_TAKE)
  return target;
}

size_t CS_ACHI_TAKE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ACHI_TAKE)
  size_t total_size = 0;

  // optional uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achi_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ACHI_TAKE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ACHI_TAKE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ACHI_TAKE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ACHI_TAKE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ACHI_TAKE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ACHI_TAKE)
    UnsafeMergeFrom(*source);
  }
}

void CS_ACHI_TAKE::MergeFrom(const CS_ACHI_TAKE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ACHI_TAKE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ACHI_TAKE::UnsafeMergeFrom(const CS_ACHI_TAKE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.achi_id() != 0) {
    set_achi_id(from.achi_id());
  }
}

void CS_ACHI_TAKE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ACHI_TAKE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ACHI_TAKE::CopyFrom(const CS_ACHI_TAKE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ACHI_TAKE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ACHI_TAKE::IsInitialized() const {

  return true;
}

void CS_ACHI_TAKE::Swap(CS_ACHI_TAKE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ACHI_TAKE::InternalSwap(CS_ACHI_TAKE* other) {
  std::swap(achi_id_, other->achi_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ACHI_TAKE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ACHI_TAKE_descriptor_;
  metadata.reflection = CS_ACHI_TAKE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ACHI_TAKE

// optional uint32 achi_id = 1;
void CS_ACHI_TAKE::clear_achi_id() {
  achi_id_ = 0u;
}
::google::protobuf::uint32 CS_ACHI_TAKE::achi_id() const {
  // @@protoc_insertion_point(field_get:CS_ACHI_TAKE.achi_id)
  return achi_id_;
}
void CS_ACHI_TAKE::set_achi_id(::google::protobuf::uint32 value) {
  
  achi_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ACHI_TAKE.achi_id)
}

inline const CS_ACHI_TAKE* CS_ACHI_TAKE::internal_default_instance() {
  return &CS_ACHI_TAKE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMCREATE::CS_TEAMCREATE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMCREATE)
}

void CS_TEAMCREATE::InitAsDefaultInstance() {
}

CS_TEAMCREATE::CS_TEAMCREATE(const CS_TEAMCREATE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMCREATE)
}

void CS_TEAMCREATE::SharedCtor() {
  _cached_size_ = 0;
}

CS_TEAMCREATE::~CS_TEAMCREATE() {
  // @@protoc_insertion_point(destructor:CS_TEAMCREATE)
  SharedDtor();
}

void CS_TEAMCREATE::SharedDtor() {
}

void CS_TEAMCREATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMCREATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMCREATE_descriptor_;
}

const CS_TEAMCREATE& CS_TEAMCREATE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMCREATE> CS_TEAMCREATE_default_instance_;

CS_TEAMCREATE* CS_TEAMCREATE::New(::google::protobuf::Arena* arena) const {
  CS_TEAMCREATE* n = new CS_TEAMCREATE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMCREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMCREATE)
}

bool CS_TEAMCREATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMCREATE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMCREATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMCREATE)
  return false;
#undef DO_
}

void CS_TEAMCREATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMCREATE)
  // @@protoc_insertion_point(serialize_end:CS_TEAMCREATE)
}

::google::protobuf::uint8* CS_TEAMCREATE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMCREATE)
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMCREATE)
  return target;
}

size_t CS_TEAMCREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMCREATE)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMCREATE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMCREATE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMCREATE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMCREATE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMCREATE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMCREATE)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMCREATE::MergeFrom(const CS_TEAMCREATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMCREATE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMCREATE::UnsafeMergeFrom(const CS_TEAMCREATE& from) {
  GOOGLE_DCHECK(&from != this);
}

void CS_TEAMCREATE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMCREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMCREATE::CopyFrom(const CS_TEAMCREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMCREATE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMCREATE::IsInitialized() const {

  return true;
}

void CS_TEAMCREATE::Swap(CS_TEAMCREATE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMCREATE::InternalSwap(CS_TEAMCREATE* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMCREATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMCREATE_descriptor_;
  metadata.reflection = CS_TEAMCREATE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMCREATE

inline const CS_TEAMCREATE* CS_TEAMCREATE::internal_default_instance() {
  return &CS_TEAMCREATE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMQUIT::CS_TEAMQUIT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMQUIT)
}

void CS_TEAMQUIT::InitAsDefaultInstance() {
}

CS_TEAMQUIT::CS_TEAMQUIT(const CS_TEAMQUIT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMQUIT)
}

void CS_TEAMQUIT::SharedCtor() {
  _cached_size_ = 0;
}

CS_TEAMQUIT::~CS_TEAMQUIT() {
  // @@protoc_insertion_point(destructor:CS_TEAMQUIT)
  SharedDtor();
}

void CS_TEAMQUIT::SharedDtor() {
}

void CS_TEAMQUIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMQUIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMQUIT_descriptor_;
}

const CS_TEAMQUIT& CS_TEAMQUIT::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMQUIT> CS_TEAMQUIT_default_instance_;

CS_TEAMQUIT* CS_TEAMQUIT::New(::google::protobuf::Arena* arena) const {
  CS_TEAMQUIT* n = new CS_TEAMQUIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMQUIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMQUIT)
}

bool CS_TEAMQUIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMQUIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMQUIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMQUIT)
  return false;
#undef DO_
}

void CS_TEAMQUIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMQUIT)
  // @@protoc_insertion_point(serialize_end:CS_TEAMQUIT)
}

::google::protobuf::uint8* CS_TEAMQUIT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMQUIT)
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMQUIT)
  return target;
}

size_t CS_TEAMQUIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMQUIT)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMQUIT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMQUIT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMQUIT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMQUIT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMQUIT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMQUIT)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMQUIT::MergeFrom(const CS_TEAMQUIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMQUIT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMQUIT::UnsafeMergeFrom(const CS_TEAMQUIT& from) {
  GOOGLE_DCHECK(&from != this);
}

void CS_TEAMQUIT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMQUIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMQUIT::CopyFrom(const CS_TEAMQUIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMQUIT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMQUIT::IsInitialized() const {

  return true;
}

void CS_TEAMQUIT::Swap(CS_TEAMQUIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMQUIT::InternalSwap(CS_TEAMQUIT* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMQUIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMQUIT_descriptor_;
  metadata.reflection = CS_TEAMQUIT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMQUIT

inline const CS_TEAMQUIT* CS_TEAMQUIT::internal_default_instance() {
  return &CS_TEAMQUIT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMKICKMEMBER::kMemberIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMKICKMEMBER::CS_TEAMKICKMEMBER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMKICKMEMBER)
}

void CS_TEAMKICKMEMBER::InitAsDefaultInstance() {
}

CS_TEAMKICKMEMBER::CS_TEAMKICKMEMBER(const CS_TEAMKICKMEMBER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMKICKMEMBER)
}

void CS_TEAMKICKMEMBER::SharedCtor() {
  member_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_TEAMKICKMEMBER::~CS_TEAMKICKMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMKICKMEMBER)
  SharedDtor();
}

void CS_TEAMKICKMEMBER::SharedDtor() {
}

void CS_TEAMKICKMEMBER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMKICKMEMBER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMKICKMEMBER_descriptor_;
}

const CS_TEAMKICKMEMBER& CS_TEAMKICKMEMBER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMKICKMEMBER> CS_TEAMKICKMEMBER_default_instance_;

CS_TEAMKICKMEMBER* CS_TEAMKICKMEMBER::New(::google::protobuf::Arena* arena) const {
  CS_TEAMKICKMEMBER* n = new CS_TEAMKICKMEMBER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMKICKMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMKICKMEMBER)
  member_id_ = GOOGLE_ULONGLONG(0);
}

bool CS_TEAMKICKMEMBER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMKICKMEMBER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 member_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMKICKMEMBER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMKICKMEMBER)
  return false;
#undef DO_
}

void CS_TEAMKICKMEMBER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMKICKMEMBER)
  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->member_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMKICKMEMBER)
}

::google::protobuf::uint8* CS_TEAMKICKMEMBER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMKICKMEMBER)
  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->member_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMKICKMEMBER)
  return target;
}

size_t CS_TEAMKICKMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMKICKMEMBER)
  size_t total_size = 0;

  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMKICKMEMBER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMKICKMEMBER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMKICKMEMBER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMKICKMEMBER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMKICKMEMBER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMKICKMEMBER)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMKICKMEMBER::MergeFrom(const CS_TEAMKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMKICKMEMBER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMKICKMEMBER::UnsafeMergeFrom(const CS_TEAMKICKMEMBER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
}

void CS_TEAMKICKMEMBER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMKICKMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMKICKMEMBER::CopyFrom(const CS_TEAMKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMKICKMEMBER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMKICKMEMBER::IsInitialized() const {

  return true;
}

void CS_TEAMKICKMEMBER::Swap(CS_TEAMKICKMEMBER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMKICKMEMBER::InternalSwap(CS_TEAMKICKMEMBER* other) {
  std::swap(member_id_, other->member_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMKICKMEMBER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMKICKMEMBER_descriptor_;
  metadata.reflection = CS_TEAMKICKMEMBER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMKICKMEMBER

// optional uint64 member_id = 1;
void CS_TEAMKICKMEMBER::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMKICKMEMBER::member_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMKICKMEMBER.member_id)
  return member_id_;
}
void CS_TEAMKICKMEMBER::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMKICKMEMBER.member_id)
}

inline const CS_TEAMKICKMEMBER* CS_TEAMKICKMEMBER::internal_default_instance() {
  return &CS_TEAMKICKMEMBER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMINVITEMEMBER::kInviteeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMINVITEMEMBER::CS_TEAMINVITEMEMBER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMINVITEMEMBER)
}

void CS_TEAMINVITEMEMBER::InitAsDefaultInstance() {
}

CS_TEAMINVITEMEMBER::CS_TEAMINVITEMEMBER(const CS_TEAMINVITEMEMBER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMINVITEMEMBER)
}

void CS_TEAMINVITEMEMBER::SharedCtor() {
  invitee_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_TEAMINVITEMEMBER::~CS_TEAMINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMINVITEMEMBER)
  SharedDtor();
}

void CS_TEAMINVITEMEMBER::SharedDtor() {
}

void CS_TEAMINVITEMEMBER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMINVITEMEMBER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMINVITEMEMBER_descriptor_;
}

const CS_TEAMINVITEMEMBER& CS_TEAMINVITEMEMBER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMINVITEMEMBER> CS_TEAMINVITEMEMBER_default_instance_;

CS_TEAMINVITEMEMBER* CS_TEAMINVITEMEMBER::New(::google::protobuf::Arena* arena) const {
  CS_TEAMINVITEMEMBER* n = new CS_TEAMINVITEMEMBER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMINVITEMEMBER)
  invitee_id_ = GOOGLE_ULONGLONG(0);
}

bool CS_TEAMINVITEMEMBER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMINVITEMEMBER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invitee_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invitee_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMINVITEMEMBER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMINVITEMEMBER)
  return false;
#undef DO_
}

void CS_TEAMINVITEMEMBER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMINVITEMEMBER)
  // optional uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invitee_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMINVITEMEMBER)
}

::google::protobuf::uint8* CS_TEAMINVITEMEMBER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMINVITEMEMBER)
  // optional uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invitee_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMINVITEMEMBER)
  return target;
}

size_t CS_TEAMINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMINVITEMEMBER)
  size_t total_size = 0;

  // optional uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->invitee_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMINVITEMEMBER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMINVITEMEMBER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMINVITEMEMBER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMINVITEMEMBER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMINVITEMEMBER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMINVITEMEMBER)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMINVITEMEMBER::MergeFrom(const CS_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMINVITEMEMBER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMINVITEMEMBER::UnsafeMergeFrom(const CS_TEAMINVITEMEMBER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.invitee_id() != 0) {
    set_invitee_id(from.invitee_id());
  }
}

void CS_TEAMINVITEMEMBER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMINVITEMEMBER::CopyFrom(const CS_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMINVITEMEMBER::IsInitialized() const {

  return true;
}

void CS_TEAMINVITEMEMBER::Swap(CS_TEAMINVITEMEMBER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMINVITEMEMBER::InternalSwap(CS_TEAMINVITEMEMBER* other) {
  std::swap(invitee_id_, other->invitee_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMINVITEMEMBER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMINVITEMEMBER_descriptor_;
  metadata.reflection = CS_TEAMINVITEMEMBER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMINVITEMEMBER

// optional uint64 invitee_id = 1;
void CS_TEAMINVITEMEMBER::clear_invitee_id() {
  invitee_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMINVITEMEMBER::invitee_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMINVITEMEMBER.invitee_id)
  return invitee_id_;
}
void CS_TEAMINVITEMEMBER::set_invitee_id(::google::protobuf::uint64 value) {
  
  invitee_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMINVITEMEMBER.invitee_id)
}

inline const CS_TEAMINVITEMEMBER* CS_TEAMINVITEMEMBER::internal_default_instance() {
  return &CS_TEAMINVITEMEMBER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TEAMINVITEMEMBER::kTeamIdFieldNumber;
const int SC_TEAMINVITEMEMBER::kInviterIdFieldNumber;
const int SC_TEAMINVITEMEMBER::kInviterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TEAMINVITEMEMBER::SC_TEAMINVITEMEMBER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMINVITEMEMBER)
}

void SC_TEAMINVITEMEMBER::InitAsDefaultInstance() {
}

SC_TEAMINVITEMEMBER::SC_TEAMINVITEMEMBER(const SC_TEAMINVITEMEMBER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMINVITEMEMBER)
}

void SC_TEAMINVITEMEMBER::SharedCtor() {
  inviter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&inviter_id_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(inviter_id_));
  _cached_size_ = 0;
}

SC_TEAMINVITEMEMBER::~SC_TEAMINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:SC_TEAMINVITEMEMBER)
  SharedDtor();
}

void SC_TEAMINVITEMEMBER::SharedDtor() {
  inviter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMINVITEMEMBER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TEAMINVITEMEMBER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMINVITEMEMBER_descriptor_;
}

const SC_TEAMINVITEMEMBER& SC_TEAMINVITEMEMBER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TEAMINVITEMEMBER> SC_TEAMINVITEMEMBER_default_instance_;

SC_TEAMINVITEMEMBER* SC_TEAMINVITEMEMBER::New(::google::protobuf::Arena* arena) const {
  SC_TEAMINVITEMEMBER* n = new SC_TEAMINVITEMEMBER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TEAMINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMINVITEMEMBER)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TEAMINVITEMEMBER, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TEAMINVITEMEMBER*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(team_id_, inviter_id_);
  inviter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_TEAMINVITEMEMBER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TEAMINVITEMEMBER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inviter_id;
        break;
      }

      // optional uint64 inviter_id = 2;
      case 2: {
        if (tag == 16) {
         parse_inviter_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_inviter_name;
        break;
      }

      // optional string inviter_name = 3;
      case 3: {
        if (tag == 26) {
         parse_inviter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TEAMINVITEMEMBER.inviter_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TEAMINVITEMEMBER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TEAMINVITEMEMBER)
  return false;
#undef DO_
}

void SC_TEAMINVITEMEMBER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TEAMINVITEMEMBER)
  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviter_id(), output);
  }

  // optional string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMINVITEMEMBER.inviter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->inviter_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TEAMINVITEMEMBER)
}

::google::protobuf::uint8* SC_TEAMINVITEMEMBER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMINVITEMEMBER)
  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviter_id(), target);
  }

  // optional string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMINVITEMEMBER.inviter_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inviter_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMINVITEMEMBER)
  return target;
}

size_t SC_TEAMINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMINVITEMEMBER)
  size_t total_size = 0;

  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->team_id());
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inviter_id());
  }

  // optional string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviter_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TEAMINVITEMEMBER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMINVITEMEMBER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TEAMINVITEMEMBER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TEAMINVITEMEMBER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMINVITEMEMBER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMINVITEMEMBER)
    UnsafeMergeFrom(*source);
  }
}

void SC_TEAMINVITEMEMBER::MergeFrom(const SC_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMINVITEMEMBER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TEAMINVITEMEMBER::UnsafeMergeFrom(const SC_TEAMINVITEMEMBER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.inviter_id() != 0) {
    set_inviter_id(from.inviter_id());
  }
  if (from.inviter_name().size() > 0) {

    inviter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
}

void SC_TEAMINVITEMEMBER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMINVITEMEMBER::CopyFrom(const SC_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TEAMINVITEMEMBER::IsInitialized() const {

  return true;
}

void SC_TEAMINVITEMEMBER::Swap(SC_TEAMINVITEMEMBER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TEAMINVITEMEMBER::InternalSwap(SC_TEAMINVITEMEMBER* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(inviter_id_, other->inviter_id_);
  inviter_name_.Swap(&other->inviter_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TEAMINVITEMEMBER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TEAMINVITEMEMBER_descriptor_;
  metadata.reflection = SC_TEAMINVITEMEMBER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TEAMINVITEMEMBER

// optional uint64 team_id = 1;
void SC_TEAMINVITEMEMBER::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMINVITEMEMBER::team_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.team_id)
  return team_id_;
}
void SC_TEAMINVITEMEMBER::set_team_id(::google::protobuf::uint64 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.team_id)
}

// optional uint64 inviter_id = 2;
void SC_TEAMINVITEMEMBER::clear_inviter_id() {
  inviter_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMINVITEMEMBER::inviter_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.inviter_id)
  return inviter_id_;
}
void SC_TEAMINVITEMEMBER::set_inviter_id(::google::protobuf::uint64 value) {
  
  inviter_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.inviter_id)
}

// optional string inviter_name = 3;
void SC_TEAMINVITEMEMBER::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TEAMINVITEMEMBER::inviter_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMINVITEMEMBER.inviter_name)
  return inviter_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMINVITEMEMBER::set_inviter_name(const ::std::string& value) {
  
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TEAMINVITEMEMBER.inviter_name)
}
void SC_TEAMINVITEMEMBER::set_inviter_name(const char* value) {
  
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMINVITEMEMBER.inviter_name)
}
void SC_TEAMINVITEMEMBER::set_inviter_name(const char* value, size_t size) {
  
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMINVITEMEMBER.inviter_name)
}
::std::string* SC_TEAMINVITEMEMBER::mutable_inviter_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_TEAMINVITEMEMBER.inviter_name)
  return inviter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TEAMINVITEMEMBER::release_inviter_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMINVITEMEMBER.inviter_name)
  
  return inviter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMINVITEMEMBER::set_allocated_inviter_name(::std::string* inviter_name) {
  if (inviter_name != NULL) {
    
  } else {
    
  }
  inviter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMINVITEMEMBER.inviter_name)
}

inline const SC_TEAMINVITEMEMBER* SC_TEAMINVITEMEMBER::internal_default_instance() {
  return &SC_TEAMINVITEMEMBER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMACCEPTINVITE::kTeamIdFieldNumber;
const int CS_TEAMACCEPTINVITE::kInviterIdFieldNumber;
const int CS_TEAMACCEPTINVITE::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMACCEPTINVITE::CS_TEAMACCEPTINVITE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMACCEPTINVITE)
}

void CS_TEAMACCEPTINVITE::InitAsDefaultInstance() {
}

CS_TEAMACCEPTINVITE::CS_TEAMACCEPTINVITE(const CS_TEAMACCEPTINVITE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMACCEPTINVITE)
}

void CS_TEAMACCEPTINVITE::SharedCtor() {
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(result_));
  _cached_size_ = 0;
}

CS_TEAMACCEPTINVITE::~CS_TEAMACCEPTINVITE() {
  // @@protoc_insertion_point(destructor:CS_TEAMACCEPTINVITE)
  SharedDtor();
}

void CS_TEAMACCEPTINVITE::SharedDtor() {
}

void CS_TEAMACCEPTINVITE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMACCEPTINVITE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMACCEPTINVITE_descriptor_;
}

const CS_TEAMACCEPTINVITE& CS_TEAMACCEPTINVITE::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMACCEPTINVITE> CS_TEAMACCEPTINVITE_default_instance_;

CS_TEAMACCEPTINVITE* CS_TEAMACCEPTINVITE::New(::google::protobuf::Arena* arena) const {
  CS_TEAMACCEPTINVITE* n = new CS_TEAMACCEPTINVITE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMACCEPTINVITE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMACCEPTINVITE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_TEAMACCEPTINVITE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_TEAMACCEPTINVITE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(team_id_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_TEAMACCEPTINVITE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMACCEPTINVITE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inviter_id;
        break;
      }

      // optional uint64 inviter_id = 2;
      case 2: {
        if (tag == 16) {
         parse_inviter_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMACCEPTINVITE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMACCEPTINVITE)
  return false;
#undef DO_
}

void CS_TEAMACCEPTINVITE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMACCEPTINVITE)
  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviter_id(), output);
  }

  // optional bool result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMACCEPTINVITE)
}

::google::protobuf::uint8* CS_TEAMACCEPTINVITE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMACCEPTINVITE)
  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviter_id(), target);
  }

  // optional bool result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMACCEPTINVITE)
  return target;
}

size_t CS_TEAMACCEPTINVITE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMACCEPTINVITE)
  size_t total_size = 0;

  // optional uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->team_id());
  }

  // optional uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inviter_id());
  }

  // optional bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMACCEPTINVITE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMACCEPTINVITE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMACCEPTINVITE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMACCEPTINVITE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMACCEPTINVITE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMACCEPTINVITE)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMACCEPTINVITE::MergeFrom(const CS_TEAMACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMACCEPTINVITE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMACCEPTINVITE::UnsafeMergeFrom(const CS_TEAMACCEPTINVITE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.inviter_id() != 0) {
    set_inviter_id(from.inviter_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CS_TEAMACCEPTINVITE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMACCEPTINVITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMACCEPTINVITE::CopyFrom(const CS_TEAMACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMACCEPTINVITE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMACCEPTINVITE::IsInitialized() const {

  return true;
}

void CS_TEAMACCEPTINVITE::Swap(CS_TEAMACCEPTINVITE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMACCEPTINVITE::InternalSwap(CS_TEAMACCEPTINVITE* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(inviter_id_, other->inviter_id_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMACCEPTINVITE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMACCEPTINVITE_descriptor_;
  metadata.reflection = CS_TEAMACCEPTINVITE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMACCEPTINVITE

// optional uint64 team_id = 1;
void CS_TEAMACCEPTINVITE::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMACCEPTINVITE::team_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.team_id)
  return team_id_;
}
void CS_TEAMACCEPTINVITE::set_team_id(::google::protobuf::uint64 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.team_id)
}

// optional uint64 inviter_id = 2;
void CS_TEAMACCEPTINVITE::clear_inviter_id() {
  inviter_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMACCEPTINVITE::inviter_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.inviter_id)
  return inviter_id_;
}
void CS_TEAMACCEPTINVITE::set_inviter_id(::google::protobuf::uint64 value) {
  
  inviter_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.inviter_id)
}

// optional bool result = 3;
void CS_TEAMACCEPTINVITE::clear_result() {
  result_ = false;
}
bool CS_TEAMACCEPTINVITE::result() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTINVITE.result)
  return result_;
}
void CS_TEAMACCEPTINVITE::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTINVITE.result)
}

inline const CS_TEAMACCEPTINVITE* CS_TEAMACCEPTINVITE::internal_default_instance() {
  return &CS_TEAMACCEPTINVITE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMNEWLEADER::kNewLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMNEWLEADER::CS_TEAMNEWLEADER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMNEWLEADER)
}

void CS_TEAMNEWLEADER::InitAsDefaultInstance() {
}

CS_TEAMNEWLEADER::CS_TEAMNEWLEADER(const CS_TEAMNEWLEADER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMNEWLEADER)
}

void CS_TEAMNEWLEADER::SharedCtor() {
  new_leader_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_TEAMNEWLEADER::~CS_TEAMNEWLEADER() {
  // @@protoc_insertion_point(destructor:CS_TEAMNEWLEADER)
  SharedDtor();
}

void CS_TEAMNEWLEADER::SharedDtor() {
}

void CS_TEAMNEWLEADER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMNEWLEADER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMNEWLEADER_descriptor_;
}

const CS_TEAMNEWLEADER& CS_TEAMNEWLEADER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMNEWLEADER> CS_TEAMNEWLEADER_default_instance_;

CS_TEAMNEWLEADER* CS_TEAMNEWLEADER::New(::google::protobuf::Arena* arena) const {
  CS_TEAMNEWLEADER* n = new CS_TEAMNEWLEADER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMNEWLEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMNEWLEADER)
  new_leader_id_ = GOOGLE_ULONGLONG(0);
}

bool CS_TEAMNEWLEADER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMNEWLEADER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_leader_id = 2;
      case 2: {
        if (tag == 16) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_leader_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMNEWLEADER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMNEWLEADER)
  return false;
#undef DO_
}

void CS_TEAMNEWLEADER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMNEWLEADER)
  // optional uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_leader_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMNEWLEADER)
}

::google::protobuf::uint8* CS_TEAMNEWLEADER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMNEWLEADER)
  // optional uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_leader_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMNEWLEADER)
  return target;
}

size_t CS_TEAMNEWLEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMNEWLEADER)
  size_t total_size = 0;

  // optional uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_leader_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMNEWLEADER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMNEWLEADER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMNEWLEADER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMNEWLEADER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMNEWLEADER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMNEWLEADER)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMNEWLEADER::MergeFrom(const CS_TEAMNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMNEWLEADER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMNEWLEADER::UnsafeMergeFrom(const CS_TEAMNEWLEADER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.new_leader_id() != 0) {
    set_new_leader_id(from.new_leader_id());
  }
}

void CS_TEAMNEWLEADER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMNEWLEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMNEWLEADER::CopyFrom(const CS_TEAMNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMNEWLEADER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMNEWLEADER::IsInitialized() const {

  return true;
}

void CS_TEAMNEWLEADER::Swap(CS_TEAMNEWLEADER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMNEWLEADER::InternalSwap(CS_TEAMNEWLEADER* other) {
  std::swap(new_leader_id_, other->new_leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMNEWLEADER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMNEWLEADER_descriptor_;
  metadata.reflection = CS_TEAMNEWLEADER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMNEWLEADER

// optional uint64 new_leader_id = 2;
void CS_TEAMNEWLEADER::clear_new_leader_id() {
  new_leader_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMNEWLEADER::new_leader_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMNEWLEADER.new_leader_id)
  return new_leader_id_;
}
void CS_TEAMNEWLEADER::set_new_leader_id(::google::protobuf::uint64 value) {
  
  new_leader_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMNEWLEADER.new_leader_id)
}

inline const CS_TEAMNEWLEADER* CS_TEAMNEWLEADER::internal_default_instance() {
  return &CS_TEAMNEWLEADER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TEAMMEMBER_INFO_MemberInfo::kMemberIdFieldNumber;
const int SC_TEAMMEMBER_INFO_MemberInfo::kMemberLevFieldNumber;
const int SC_TEAMMEMBER_INFO_MemberInfo::kMemberOnlineFieldNumber;
const int SC_TEAMMEMBER_INFO_MemberInfo::kMemberNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TEAMMEMBER_INFO_MemberInfo::SC_TEAMMEMBER_INFO_MemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMMEMBER_INFO.MemberInfo)
}

void SC_TEAMMEMBER_INFO_MemberInfo::InitAsDefaultInstance() {
}

SC_TEAMMEMBER_INFO_MemberInfo::SC_TEAMMEMBER_INFO_MemberInfo(const SC_TEAMMEMBER_INFO_MemberInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMMEMBER_INFO.MemberInfo)
}

void SC_TEAMMEMBER_INFO_MemberInfo::SharedCtor() {
  member_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, reinterpret_cast<char*>(&member_online_) -
    reinterpret_cast<char*>(&member_id_) + sizeof(member_online_));
  _cached_size_ = 0;
}

SC_TEAMMEMBER_INFO_MemberInfo::~SC_TEAMMEMBER_INFO_MemberInfo() {
  // @@protoc_insertion_point(destructor:SC_TEAMMEMBER_INFO.MemberInfo)
  SharedDtor();
}

void SC_TEAMMEMBER_INFO_MemberInfo::SharedDtor() {
  member_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMMEMBER_INFO_MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_INFO_MemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMMEMBER_INFO_MemberInfo_descriptor_;
}

const SC_TEAMMEMBER_INFO_MemberInfo& SC_TEAMMEMBER_INFO_MemberInfo::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TEAMMEMBER_INFO_MemberInfo> SC_TEAMMEMBER_INFO_MemberInfo_default_instance_;

SC_TEAMMEMBER_INFO_MemberInfo* SC_TEAMMEMBER_INFO_MemberInfo::New(::google::protobuf::Arena* arena) const {
  SC_TEAMMEMBER_INFO_MemberInfo* n = new SC_TEAMMEMBER_INFO_MemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TEAMMEMBER_INFO_MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMMEMBER_INFO.MemberInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TEAMMEMBER_INFO_MemberInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TEAMMEMBER_INFO_MemberInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(member_id_, member_online_);
  member_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_TEAMMEMBER_INFO_MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TEAMMEMBER_INFO.MemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 member_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_lev;
        break;
      }

      // optional uint32 member_lev = 2;
      case 2: {
        if (tag == 16) {
         parse_member_lev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_lev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_online;
        break;
      }

      // optional bool member_online = 3;
      case 3: {
        if (tag == 24) {
         parse_member_online:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &member_online_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_name;
        break;
      }

      // optional string member_name = 4;
      case 4: {
        if (tag == 34) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member_name().data(), this->member_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TEAMMEMBER_INFO.MemberInfo.member_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TEAMMEMBER_INFO.MemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TEAMMEMBER_INFO.MemberInfo)
  return false;
#undef DO_
}

void SC_TEAMMEMBER_INFO_MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TEAMMEMBER_INFO.MemberInfo)
  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->member_id(), output);
  }

  // optional uint32 member_lev = 2;
  if (this->member_lev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_lev(), output);
  }

  // optional bool member_online = 3;
  if (this->member_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->member_online(), output);
  }

  // optional string member_name = 4;
  if (this->member_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMMEMBER_INFO.MemberInfo.member_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->member_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TEAMMEMBER_INFO.MemberInfo)
}

::google::protobuf::uint8* SC_TEAMMEMBER_INFO_MemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMMEMBER_INFO.MemberInfo)
  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->member_id(), target);
  }

  // optional uint32 member_lev = 2;
  if (this->member_lev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_lev(), target);
  }

  // optional bool member_online = 3;
  if (this->member_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->member_online(), target);
  }

  // optional string member_name = 4;
  if (this->member_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMMEMBER_INFO.MemberInfo.member_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->member_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMMEMBER_INFO.MemberInfo)
  return target;
}

size_t SC_TEAMMEMBER_INFO_MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMMEMBER_INFO.MemberInfo)
  size_t total_size = 0;

  // optional uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // optional uint32 member_lev = 2;
  if (this->member_lev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_lev());
  }

  // optional bool member_online = 3;
  if (this->member_online() != 0) {
    total_size += 1 + 1;
  }

  // optional string member_name = 4;
  if (this->member_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->member_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TEAMMEMBER_INFO_MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMMEMBER_INFO.MemberInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TEAMMEMBER_INFO_MemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TEAMMEMBER_INFO_MemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMMEMBER_INFO.MemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMMEMBER_INFO.MemberInfo)
    UnsafeMergeFrom(*source);
  }
}

void SC_TEAMMEMBER_INFO_MemberInfo::MergeFrom(const SC_TEAMMEMBER_INFO_MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMMEMBER_INFO.MemberInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TEAMMEMBER_INFO_MemberInfo::UnsafeMergeFrom(const SC_TEAMMEMBER_INFO_MemberInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.member_lev() != 0) {
    set_member_lev(from.member_lev());
  }
  if (from.member_online() != 0) {
    set_member_online(from.member_online());
  }
  if (from.member_name().size() > 0) {

    member_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
}

void SC_TEAMMEMBER_INFO_MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMMEMBER_INFO.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMMEMBER_INFO_MemberInfo::CopyFrom(const SC_TEAMMEMBER_INFO_MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMMEMBER_INFO.MemberInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TEAMMEMBER_INFO_MemberInfo::IsInitialized() const {

  return true;
}

void SC_TEAMMEMBER_INFO_MemberInfo::Swap(SC_TEAMMEMBER_INFO_MemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TEAMMEMBER_INFO_MemberInfo::InternalSwap(SC_TEAMMEMBER_INFO_MemberInfo* other) {
  std::swap(member_id_, other->member_id_);
  std::swap(member_lev_, other->member_lev_);
  std::swap(member_online_, other->member_online_);
  member_name_.Swap(&other->member_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TEAMMEMBER_INFO_MemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TEAMMEMBER_INFO_MemberInfo_descriptor_;
  metadata.reflection = SC_TEAMMEMBER_INFO_MemberInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TEAMMEMBER_INFO::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TEAMMEMBER_INFO::SC_TEAMMEMBER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMMEMBER_INFO)
}

void SC_TEAMMEMBER_INFO::InitAsDefaultInstance() {
}

SC_TEAMMEMBER_INFO::SC_TEAMMEMBER_INFO(const SC_TEAMMEMBER_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMMEMBER_INFO)
}

void SC_TEAMMEMBER_INFO::SharedCtor() {
  _cached_size_ = 0;
}

SC_TEAMMEMBER_INFO::~SC_TEAMMEMBER_INFO() {
  // @@protoc_insertion_point(destructor:SC_TEAMMEMBER_INFO)
  SharedDtor();
}

void SC_TEAMMEMBER_INFO::SharedDtor() {
}

void SC_TEAMMEMBER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMMEMBER_INFO_descriptor_;
}

const SC_TEAMMEMBER_INFO& SC_TEAMMEMBER_INFO::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TEAMMEMBER_INFO> SC_TEAMMEMBER_INFO_default_instance_;

SC_TEAMMEMBER_INFO* SC_TEAMMEMBER_INFO::New(::google::protobuf::Arena* arena) const {
  SC_TEAMMEMBER_INFO* n = new SC_TEAMMEMBER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TEAMMEMBER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMMEMBER_INFO)
  member_list_.Clear();
}

bool SC_TEAMMEMBER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TEAMMEMBER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_TEAMMEMBER_INFO.MemberInfo member_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_member_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TEAMMEMBER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TEAMMEMBER_INFO)
  return false;
#undef DO_
}

void SC_TEAMMEMBER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TEAMMEMBER_INFO)
  // repeated .SC_TEAMMEMBER_INFO.MemberInfo member_list = 1;
  for (unsigned int i = 0, n = this->member_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TEAMMEMBER_INFO)
}

::google::protobuf::uint8* SC_TEAMMEMBER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMMEMBER_INFO)
  // repeated .SC_TEAMMEMBER_INFO.MemberInfo member_list = 1;
  for (unsigned int i = 0, n = this->member_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->member_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMMEMBER_INFO)
  return target;
}

size_t SC_TEAMMEMBER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMMEMBER_INFO)
  size_t total_size = 0;

  // repeated .SC_TEAMMEMBER_INFO.MemberInfo member_list = 1;
  {
    unsigned int count = this->member_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TEAMMEMBER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMMEMBER_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TEAMMEMBER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TEAMMEMBER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMMEMBER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMMEMBER_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_TEAMMEMBER_INFO::MergeFrom(const SC_TEAMMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMMEMBER_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TEAMMEMBER_INFO::UnsafeMergeFrom(const SC_TEAMMEMBER_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  member_list_.MergeFrom(from.member_list_);
}

void SC_TEAMMEMBER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMMEMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMMEMBER_INFO::CopyFrom(const SC_TEAMMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMMEMBER_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TEAMMEMBER_INFO::IsInitialized() const {

  return true;
}

void SC_TEAMMEMBER_INFO::Swap(SC_TEAMMEMBER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TEAMMEMBER_INFO::InternalSwap(SC_TEAMMEMBER_INFO* other) {
  member_list_.UnsafeArenaSwap(&other->member_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TEAMMEMBER_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TEAMMEMBER_INFO_descriptor_;
  metadata.reflection = SC_TEAMMEMBER_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TEAMMEMBER_INFO_MemberInfo

// optional uint64 member_id = 1;
void SC_TEAMMEMBER_INFO_MemberInfo::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMMEMBER_INFO_MemberInfo::member_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.MemberInfo.member_id)
  return member_id_;
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_INFO.MemberInfo.member_id)
}

// optional uint32 member_lev = 2;
void SC_TEAMMEMBER_INFO_MemberInfo::clear_member_lev() {
  member_lev_ = 0u;
}
::google::protobuf::uint32 SC_TEAMMEMBER_INFO_MemberInfo::member_lev() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.MemberInfo.member_lev)
  return member_lev_;
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_lev(::google::protobuf::uint32 value) {
  
  member_lev_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_INFO.MemberInfo.member_lev)
}

// optional bool member_online = 3;
void SC_TEAMMEMBER_INFO_MemberInfo::clear_member_online() {
  member_online_ = false;
}
bool SC_TEAMMEMBER_INFO_MemberInfo::member_online() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.MemberInfo.member_online)
  return member_online_;
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_online(bool value) {
  
  member_online_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_INFO.MemberInfo.member_online)
}

// optional string member_name = 4;
void SC_TEAMMEMBER_INFO_MemberInfo::clear_member_name() {
  member_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TEAMMEMBER_INFO_MemberInfo::member_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
  return member_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_name(const ::std::string& value) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_name(const char* value) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_member_name(const char* value, size_t size) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
}
::std::string* SC_TEAMMEMBER_INFO_MemberInfo::mutable_member_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
  return member_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TEAMMEMBER_INFO_MemberInfo::release_member_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
  
  return member_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMMEMBER_INFO_MemberInfo::set_allocated_member_name(::std::string* member_name) {
  if (member_name != NULL) {
    
  } else {
    
  }
  member_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), member_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMMEMBER_INFO.MemberInfo.member_name)
}

inline const SC_TEAMMEMBER_INFO_MemberInfo* SC_TEAMMEMBER_INFO_MemberInfo::internal_default_instance() {
  return &SC_TEAMMEMBER_INFO_MemberInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_TEAMMEMBER_INFO

// repeated .SC_TEAMMEMBER_INFO.MemberInfo member_list = 1;
int SC_TEAMMEMBER_INFO::member_list_size() const {
  return member_list_.size();
}
void SC_TEAMMEMBER_INFO::clear_member_list() {
  member_list_.Clear();
}
const ::SC_TEAMMEMBER_INFO_MemberInfo& SC_TEAMMEMBER_INFO::member_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_INFO.member_list)
  return member_list_.Get(index);
}
::SC_TEAMMEMBER_INFO_MemberInfo* SC_TEAMMEMBER_INFO::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TEAMMEMBER_INFO.member_list)
  return member_list_.Mutable(index);
}
::SC_TEAMMEMBER_INFO_MemberInfo* SC_TEAMMEMBER_INFO::add_member_list() {
  // @@protoc_insertion_point(field_add:SC_TEAMMEMBER_INFO.member_list)
  return member_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_TEAMMEMBER_INFO_MemberInfo >*
SC_TEAMMEMBER_INFO::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_TEAMMEMBER_INFO.member_list)
  return &member_list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_TEAMMEMBER_INFO_MemberInfo >&
SC_TEAMMEMBER_INFO::member_list() const {
  // @@protoc_insertion_point(field_list:SC_TEAMMEMBER_INFO.member_list)
  return member_list_;
}

inline const SC_TEAMMEMBER_INFO* SC_TEAMMEMBER_INFO::internal_default_instance() {
  return &SC_TEAMMEMBER_INFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_TEAMMEMBER_ACTION_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMMEMBER_ACTION_Action_descriptor_;
}
bool SC_TEAMMEMBER_ACTION_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_CREATE;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_DESTORY;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_ADDMEBER;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_CHANGE_LEADER;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_QUIT;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_KICKMEMBER;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_LEV_CHG;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_NAME_CHG;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_ONLINE_CHG;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::Action_MIN;
const SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::Action_MAX;
const int SC_TEAMMEMBER_ACTION::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TEAMMEMBER_ACTION::kActionFieldNumber;
const int SC_TEAMMEMBER_ACTION::kOperatorIdFieldNumber;
const int SC_TEAMMEMBER_ACTION::kMemberIdFieldNumber;
const int SC_TEAMMEMBER_ACTION::kMemberLevFieldNumber;
const int SC_TEAMMEMBER_ACTION::kMemberNameFieldNumber;
const int SC_TEAMMEMBER_ACTION::kMemberOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TEAMMEMBER_ACTION::SC_TEAMMEMBER_ACTION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMMEMBER_ACTION)
}

void SC_TEAMMEMBER_ACTION::InitAsDefaultInstance() {
}

SC_TEAMMEMBER_ACTION::SC_TEAMMEMBER_ACTION(const SC_TEAMMEMBER_ACTION& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMMEMBER_ACTION)
}

void SC_TEAMMEMBER_ACTION::SharedCtor() {
  member_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator_id_, 0, reinterpret_cast<char*>(&member_online_) -
    reinterpret_cast<char*>(&operator_id_) + sizeof(member_online_));
  _cached_size_ = 0;
}

SC_TEAMMEMBER_ACTION::~SC_TEAMMEMBER_ACTION() {
  // @@protoc_insertion_point(destructor:SC_TEAMMEMBER_ACTION)
  SharedDtor();
}

void SC_TEAMMEMBER_ACTION::SharedDtor() {
  member_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMMEMBER_ACTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TEAMMEMBER_ACTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMMEMBER_ACTION_descriptor_;
}

const SC_TEAMMEMBER_ACTION& SC_TEAMMEMBER_ACTION::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TEAMMEMBER_ACTION> SC_TEAMMEMBER_ACTION_default_instance_;

SC_TEAMMEMBER_ACTION* SC_TEAMMEMBER_ACTION::New(::google::protobuf::Arena* arena) const {
  SC_TEAMMEMBER_ACTION* n = new SC_TEAMMEMBER_ACTION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TEAMMEMBER_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMMEMBER_ACTION)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TEAMMEMBER_ACTION, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TEAMMEMBER_ACTION*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operator_id_, member_online_);
  member_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_TEAMMEMBER_ACTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TEAMMEMBER_ACTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC_TEAMMEMBER_ACTION.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::SC_TEAMMEMBER_ACTION_Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operator_id;
        break;
      }

      // optional uint64 operator_id = 2;
      case 2: {
        if (tag == 16) {
         parse_operator_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &operator_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // optional uint64 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_lev;
        break;
      }

      // optional uint32 member_lev = 4;
      case 4: {
        if (tag == 32) {
         parse_member_lev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_lev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_name;
        break;
      }

      // optional string member_name = 5;
      case 5: {
        if (tag == 42) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member_name().data(), this->member_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TEAMMEMBER_ACTION.member_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_online;
        break;
      }

      // optional bool member_online = 6;
      case 6: {
        if (tag == 48) {
         parse_member_online:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &member_online_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TEAMMEMBER_ACTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TEAMMEMBER_ACTION)
  return false;
#undef DO_
}

void SC_TEAMMEMBER_ACTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TEAMMEMBER_ACTION)
  // optional .SC_TEAMMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->operator_id(), output);
  }

  // optional uint64 member_id = 3;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->member_id(), output);
  }

  // optional uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_lev(), output);
  }

  // optional string member_name = 5;
  if (this->member_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMMEMBER_ACTION.member_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->member_name(), output);
  }

  // optional bool member_online = 6;
  if (this->member_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->member_online(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TEAMMEMBER_ACTION)
}

::google::protobuf::uint8* SC_TEAMMEMBER_ACTION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMMEMBER_ACTION)
  // optional .SC_TEAMMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->operator_id(), target);
  }

  // optional uint64 member_id = 3;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->member_id(), target);
  }

  // optional uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->member_lev(), target);
  }

  // optional string member_name = 5;
  if (this->member_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMMEMBER_ACTION.member_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->member_name(), target);
  }

  // optional bool member_online = 6;
  if (this->member_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->member_online(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMMEMBER_ACTION)
  return target;
}

size_t SC_TEAMMEMBER_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMMEMBER_ACTION)
  size_t total_size = 0;

  // optional .SC_TEAMMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->operator_id());
  }

  // optional uint64 member_id = 3;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // optional uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_lev());
  }

  // optional string member_name = 5;
  if (this->member_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->member_name());
  }

  // optional bool member_online = 6;
  if (this->member_online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TEAMMEMBER_ACTION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMMEMBER_ACTION)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TEAMMEMBER_ACTION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TEAMMEMBER_ACTION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMMEMBER_ACTION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMMEMBER_ACTION)
    UnsafeMergeFrom(*source);
  }
}

void SC_TEAMMEMBER_ACTION::MergeFrom(const SC_TEAMMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMMEMBER_ACTION)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TEAMMEMBER_ACTION::UnsafeMergeFrom(const SC_TEAMMEMBER_ACTION& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.operator_id() != 0) {
    set_operator_id(from.operator_id());
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.member_lev() != 0) {
    set_member_lev(from.member_lev());
  }
  if (from.member_name().size() > 0) {

    member_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  if (from.member_online() != 0) {
    set_member_online(from.member_online());
  }
}

void SC_TEAMMEMBER_ACTION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMMEMBER_ACTION::CopyFrom(const SC_TEAMMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TEAMMEMBER_ACTION::IsInitialized() const {

  return true;
}

void SC_TEAMMEMBER_ACTION::Swap(SC_TEAMMEMBER_ACTION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TEAMMEMBER_ACTION::InternalSwap(SC_TEAMMEMBER_ACTION* other) {
  std::swap(action_, other->action_);
  std::swap(operator_id_, other->operator_id_);
  std::swap(member_id_, other->member_id_);
  std::swap(member_lev_, other->member_lev_);
  member_name_.Swap(&other->member_name_);
  std::swap(member_online_, other->member_online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TEAMMEMBER_ACTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TEAMMEMBER_ACTION_descriptor_;
  metadata.reflection = SC_TEAMMEMBER_ACTION_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TEAMMEMBER_ACTION

// optional .SC_TEAMMEMBER_ACTION.Action action = 1;
void SC_TEAMMEMBER_ACTION::clear_action() {
  action_ = 0;
}
::SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::action() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.action)
  return static_cast< ::SC_TEAMMEMBER_ACTION_Action >(action_);
}
void SC_TEAMMEMBER_ACTION::set_action(::SC_TEAMMEMBER_ACTION_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.action)
}

// optional uint64 operator_id = 2;
void SC_TEAMMEMBER_ACTION::clear_operator_id() {
  operator_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMMEMBER_ACTION::operator_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.operator_id)
  return operator_id_;
}
void SC_TEAMMEMBER_ACTION::set_operator_id(::google::protobuf::uint64 value) {
  
  operator_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.operator_id)
}

// optional uint64 member_id = 3;
void SC_TEAMMEMBER_ACTION::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMMEMBER_ACTION::member_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_id)
  return member_id_;
}
void SC_TEAMMEMBER_ACTION::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_id)
}

// optional uint32 member_lev = 4;
void SC_TEAMMEMBER_ACTION::clear_member_lev() {
  member_lev_ = 0u;
}
::google::protobuf::uint32 SC_TEAMMEMBER_ACTION::member_lev() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_lev)
  return member_lev_;
}
void SC_TEAMMEMBER_ACTION::set_member_lev(::google::protobuf::uint32 value) {
  
  member_lev_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_lev)
}

// optional string member_name = 5;
void SC_TEAMMEMBER_ACTION::clear_member_name() {
  member_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TEAMMEMBER_ACTION::member_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_name)
  return member_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMMEMBER_ACTION::set_member_name(const ::std::string& value) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_name)
}
void SC_TEAMMEMBER_ACTION::set_member_name(const char* value) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMMEMBER_ACTION.member_name)
}
void SC_TEAMMEMBER_ACTION::set_member_name(const char* value, size_t size) {
  
  member_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMMEMBER_ACTION.member_name)
}
::std::string* SC_TEAMMEMBER_ACTION::mutable_member_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_TEAMMEMBER_ACTION.member_name)
  return member_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TEAMMEMBER_ACTION::release_member_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMMEMBER_ACTION.member_name)
  
  return member_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMMEMBER_ACTION::set_allocated_member_name(::std::string* member_name) {
  if (member_name != NULL) {
    
  } else {
    
  }
  member_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), member_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMMEMBER_ACTION.member_name)
}

// optional bool member_online = 6;
void SC_TEAMMEMBER_ACTION::clear_member_online() {
  member_online_ = false;
}
bool SC_TEAMMEMBER_ACTION::member_online() const {
  // @@protoc_insertion_point(field_get:SC_TEAMMEMBER_ACTION.member_online)
  return member_online_;
}
void SC_TEAMMEMBER_ACTION::set_member_online(bool value) {
  
  member_online_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMMEMBER_ACTION.member_online)
}

inline const SC_TEAMMEMBER_ACTION* SC_TEAMMEMBER_ACTION::internal_default_instance() {
  return &SC_TEAMMEMBER_ACTION_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMAPPLYMEMBER::kRespondentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMAPPLYMEMBER::CS_TEAMAPPLYMEMBER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMAPPLYMEMBER)
}

void CS_TEAMAPPLYMEMBER::InitAsDefaultInstance() {
}

CS_TEAMAPPLYMEMBER::CS_TEAMAPPLYMEMBER(const CS_TEAMAPPLYMEMBER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMAPPLYMEMBER)
}

void CS_TEAMAPPLYMEMBER::SharedCtor() {
  respondent_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CS_TEAMAPPLYMEMBER::~CS_TEAMAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMAPPLYMEMBER)
  SharedDtor();
}

void CS_TEAMAPPLYMEMBER::SharedDtor() {
}

void CS_TEAMAPPLYMEMBER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMAPPLYMEMBER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMAPPLYMEMBER_descriptor_;
}

const CS_TEAMAPPLYMEMBER& CS_TEAMAPPLYMEMBER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMAPPLYMEMBER> CS_TEAMAPPLYMEMBER_default_instance_;

CS_TEAMAPPLYMEMBER* CS_TEAMAPPLYMEMBER::New(::google::protobuf::Arena* arena) const {
  CS_TEAMAPPLYMEMBER* n = new CS_TEAMAPPLYMEMBER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMAPPLYMEMBER)
  respondent_id_ = GOOGLE_ULONGLONG(0);
}

bool CS_TEAMAPPLYMEMBER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMAPPLYMEMBER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 respondent_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &respondent_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMAPPLYMEMBER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMAPPLYMEMBER)
  return false;
#undef DO_
}

void CS_TEAMAPPLYMEMBER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMAPPLYMEMBER)
  // optional uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->respondent_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMAPPLYMEMBER)
}

::google::protobuf::uint8* CS_TEAMAPPLYMEMBER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMAPPLYMEMBER)
  // optional uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->respondent_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMAPPLYMEMBER)
  return target;
}

size_t CS_TEAMAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMAPPLYMEMBER)
  size_t total_size = 0;

  // optional uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->respondent_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMAPPLYMEMBER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMAPPLYMEMBER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMAPPLYMEMBER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMAPPLYMEMBER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMAPPLYMEMBER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMAPPLYMEMBER)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMAPPLYMEMBER::MergeFrom(const CS_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMAPPLYMEMBER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMAPPLYMEMBER::UnsafeMergeFrom(const CS_TEAMAPPLYMEMBER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.respondent_id() != 0) {
    set_respondent_id(from.respondent_id());
  }
}

void CS_TEAMAPPLYMEMBER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMAPPLYMEMBER::CopyFrom(const CS_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMAPPLYMEMBER::IsInitialized() const {

  return true;
}

void CS_TEAMAPPLYMEMBER::Swap(CS_TEAMAPPLYMEMBER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMAPPLYMEMBER::InternalSwap(CS_TEAMAPPLYMEMBER* other) {
  std::swap(respondent_id_, other->respondent_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMAPPLYMEMBER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMAPPLYMEMBER_descriptor_;
  metadata.reflection = CS_TEAMAPPLYMEMBER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMAPPLYMEMBER

// optional uint64 respondent_id = 1;
void CS_TEAMAPPLYMEMBER::clear_respondent_id() {
  respondent_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMAPPLYMEMBER::respondent_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMAPPLYMEMBER.respondent_id)
  return respondent_id_;
}
void CS_TEAMAPPLYMEMBER::set_respondent_id(::google::protobuf::uint64 value) {
  
  respondent_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMAPPLYMEMBER.respondent_id)
}

inline const CS_TEAMAPPLYMEMBER* CS_TEAMAPPLYMEMBER::internal_default_instance() {
  return &CS_TEAMAPPLYMEMBER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TEAMAPPLYMEMBER::kApplicantIdFieldNumber;
const int SC_TEAMAPPLYMEMBER::kApplicantNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TEAMAPPLYMEMBER::SC_TEAMAPPLYMEMBER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMAPPLYMEMBER)
}

void SC_TEAMAPPLYMEMBER::InitAsDefaultInstance() {
}

SC_TEAMAPPLYMEMBER::SC_TEAMAPPLYMEMBER(const SC_TEAMAPPLYMEMBER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMAPPLYMEMBER)
}

void SC_TEAMAPPLYMEMBER::SharedCtor() {
  applicant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SC_TEAMAPPLYMEMBER::~SC_TEAMAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:SC_TEAMAPPLYMEMBER)
  SharedDtor();
}

void SC_TEAMAPPLYMEMBER::SharedDtor() {
  applicant_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMAPPLYMEMBER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TEAMAPPLYMEMBER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TEAMAPPLYMEMBER_descriptor_;
}

const SC_TEAMAPPLYMEMBER& SC_TEAMAPPLYMEMBER::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TEAMAPPLYMEMBER> SC_TEAMAPPLYMEMBER_default_instance_;

SC_TEAMAPPLYMEMBER* SC_TEAMAPPLYMEMBER::New(::google::protobuf::Arena* arena) const {
  SC_TEAMAPPLYMEMBER* n = new SC_TEAMAPPLYMEMBER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TEAMAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMAPPLYMEMBER)
  applicant_id_ = GOOGLE_ULONGLONG(0);
  applicant_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SC_TEAMAPPLYMEMBER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TEAMAPPLYMEMBER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 applicant_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_applicant_name;
        break;
      }

      // optional string applicant_name = 2;
      case 2: {
        if (tag == 18) {
         parse_applicant_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicant_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->applicant_name().data(), this->applicant_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_TEAMAPPLYMEMBER.applicant_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TEAMAPPLYMEMBER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TEAMAPPLYMEMBER)
  return false;
#undef DO_
}

void SC_TEAMAPPLYMEMBER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TEAMAPPLYMEMBER)
  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->applicant_id(), output);
  }

  // optional string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->applicant_name().data(), this->applicant_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMAPPLYMEMBER.applicant_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->applicant_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_TEAMAPPLYMEMBER)
}

::google::protobuf::uint8* SC_TEAMAPPLYMEMBER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMAPPLYMEMBER)
  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->applicant_id(), target);
  }

  // optional string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->applicant_name().data(), this->applicant_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMAPPLYMEMBER.applicant_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->applicant_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMAPPLYMEMBER)
  return target;
}

size_t SC_TEAMAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMAPPLYMEMBER)
  size_t total_size = 0;

  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applicant_id());
  }

  // optional string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->applicant_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TEAMAPPLYMEMBER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMAPPLYMEMBER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TEAMAPPLYMEMBER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TEAMAPPLYMEMBER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMAPPLYMEMBER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMAPPLYMEMBER)
    UnsafeMergeFrom(*source);
  }
}

void SC_TEAMAPPLYMEMBER::MergeFrom(const SC_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMAPPLYMEMBER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TEAMAPPLYMEMBER::UnsafeMergeFrom(const SC_TEAMAPPLYMEMBER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.applicant_id() != 0) {
    set_applicant_id(from.applicant_id());
  }
  if (from.applicant_name().size() > 0) {

    applicant_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applicant_name_);
  }
}

void SC_TEAMAPPLYMEMBER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMAPPLYMEMBER::CopyFrom(const SC_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TEAMAPPLYMEMBER::IsInitialized() const {

  return true;
}

void SC_TEAMAPPLYMEMBER::Swap(SC_TEAMAPPLYMEMBER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TEAMAPPLYMEMBER::InternalSwap(SC_TEAMAPPLYMEMBER* other) {
  std::swap(applicant_id_, other->applicant_id_);
  applicant_name_.Swap(&other->applicant_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TEAMAPPLYMEMBER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TEAMAPPLYMEMBER_descriptor_;
  metadata.reflection = SC_TEAMAPPLYMEMBER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TEAMAPPLYMEMBER

// optional uint64 applicant_id = 1;
void SC_TEAMAPPLYMEMBER::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SC_TEAMAPPLYMEMBER::applicant_id() const {
  // @@protoc_insertion_point(field_get:SC_TEAMAPPLYMEMBER.applicant_id)
  return applicant_id_;
}
void SC_TEAMAPPLYMEMBER::set_applicant_id(::google::protobuf::uint64 value) {
  
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TEAMAPPLYMEMBER.applicant_id)
}

// optional string applicant_name = 2;
void SC_TEAMAPPLYMEMBER::clear_applicant_name() {
  applicant_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_TEAMAPPLYMEMBER::applicant_name() const {
  // @@protoc_insertion_point(field_get:SC_TEAMAPPLYMEMBER.applicant_name)
  return applicant_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMAPPLYMEMBER::set_applicant_name(const ::std::string& value) {
  
  applicant_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TEAMAPPLYMEMBER.applicant_name)
}
void SC_TEAMAPPLYMEMBER::set_applicant_name(const char* value) {
  
  applicant_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TEAMAPPLYMEMBER.applicant_name)
}
void SC_TEAMAPPLYMEMBER::set_applicant_name(const char* value, size_t size) {
  
  applicant_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TEAMAPPLYMEMBER.applicant_name)
}
::std::string* SC_TEAMAPPLYMEMBER::mutable_applicant_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_TEAMAPPLYMEMBER.applicant_name)
  return applicant_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TEAMAPPLYMEMBER::release_applicant_name() {
  // @@protoc_insertion_point(field_release:SC_TEAMAPPLYMEMBER.applicant_name)
  
  return applicant_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TEAMAPPLYMEMBER::set_allocated_applicant_name(::std::string* applicant_name) {
  if (applicant_name != NULL) {
    
  } else {
    
  }
  applicant_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicant_name);
  // @@protoc_insertion_point(field_set_allocated:SC_TEAMAPPLYMEMBER.applicant_name)
}

inline const SC_TEAMAPPLYMEMBER* SC_TEAMAPPLYMEMBER::internal_default_instance() {
  return &SC_TEAMAPPLYMEMBER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TEAMACCEPTAPPLY::kApplicantIdFieldNumber;
const int CS_TEAMACCEPTAPPLY::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TEAMACCEPTAPPLY::CS_TEAMACCEPTAPPLY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zone_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMACCEPTAPPLY)
}

void CS_TEAMACCEPTAPPLY::InitAsDefaultInstance() {
}

CS_TEAMACCEPTAPPLY::CS_TEAMACCEPTAPPLY(const CS_TEAMACCEPTAPPLY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMACCEPTAPPLY)
}

void CS_TEAMACCEPTAPPLY::SharedCtor() {
  ::memset(&applicant_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_) + sizeof(result_));
  _cached_size_ = 0;
}

CS_TEAMACCEPTAPPLY::~CS_TEAMACCEPTAPPLY() {
  // @@protoc_insertion_point(destructor:CS_TEAMACCEPTAPPLY)
  SharedDtor();
}

void CS_TEAMACCEPTAPPLY::SharedDtor() {
}

void CS_TEAMACCEPTAPPLY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TEAMACCEPTAPPLY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TEAMACCEPTAPPLY_descriptor_;
}

const CS_TEAMACCEPTAPPLY& CS_TEAMACCEPTAPPLY::default_instance() {
  protobuf_InitDefaults_zone_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TEAMACCEPTAPPLY> CS_TEAMACCEPTAPPLY_default_instance_;

CS_TEAMACCEPTAPPLY* CS_TEAMACCEPTAPPLY::New(::google::protobuf::Arena* arena) const {
  CS_TEAMACCEPTAPPLY* n = new CS_TEAMACCEPTAPPLY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TEAMACCEPTAPPLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMACCEPTAPPLY)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_TEAMACCEPTAPPLY, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_TEAMACCEPTAPPLY*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(applicant_id_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool CS_TEAMACCEPTAPPLY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TEAMACCEPTAPPLY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 applicant_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TEAMACCEPTAPPLY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TEAMACCEPTAPPLY)
  return false;
#undef DO_
}

void CS_TEAMACCEPTAPPLY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TEAMACCEPTAPPLY)
  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->applicant_id(), output);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_TEAMACCEPTAPPLY)
}

::google::protobuf::uint8* CS_TEAMACCEPTAPPLY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMACCEPTAPPLY)
  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->applicant_id(), target);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMACCEPTAPPLY)
  return target;
}

size_t CS_TEAMACCEPTAPPLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMACCEPTAPPLY)
  size_t total_size = 0;

  // optional uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applicant_id());
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TEAMACCEPTAPPLY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMACCEPTAPPLY)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TEAMACCEPTAPPLY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TEAMACCEPTAPPLY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMACCEPTAPPLY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMACCEPTAPPLY)
    UnsafeMergeFrom(*source);
  }
}

void CS_TEAMACCEPTAPPLY::MergeFrom(const CS_TEAMACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMACCEPTAPPLY)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TEAMACCEPTAPPLY::UnsafeMergeFrom(const CS_TEAMACCEPTAPPLY& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.applicant_id() != 0) {
    set_applicant_id(from.applicant_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CS_TEAMACCEPTAPPLY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMACCEPTAPPLY::CopyFrom(const CS_TEAMACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TEAMACCEPTAPPLY::IsInitialized() const {

  return true;
}

void CS_TEAMACCEPTAPPLY::Swap(CS_TEAMACCEPTAPPLY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TEAMACCEPTAPPLY::InternalSwap(CS_TEAMACCEPTAPPLY* other) {
  std::swap(applicant_id_, other->applicant_id_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TEAMACCEPTAPPLY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TEAMACCEPTAPPLY_descriptor_;
  metadata.reflection = CS_TEAMACCEPTAPPLY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TEAMACCEPTAPPLY

// optional uint64 applicant_id = 1;
void CS_TEAMACCEPTAPPLY::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CS_TEAMACCEPTAPPLY::applicant_id() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTAPPLY.applicant_id)
  return applicant_id_;
}
void CS_TEAMACCEPTAPPLY::set_applicant_id(::google::protobuf::uint64 value) {
  
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTAPPLY.applicant_id)
}

// optional bool result = 2;
void CS_TEAMACCEPTAPPLY::clear_result() {
  result_ = false;
}
bool CS_TEAMACCEPTAPPLY::result() const {
  // @@protoc_insertion_point(field_get:CS_TEAMACCEPTAPPLY.result)
  return result_;
}
void CS_TEAMACCEPTAPPLY::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CS_TEAMACCEPTAPPLY.result)
}

inline const CS_TEAMACCEPTAPPLY* CS_TEAMACCEPTAPPLY::internal_default_instance() {
  return &CS_TEAMACCEPTAPPLY_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
