// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SC_KEY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_KEY_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LOGIN_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LOGIN_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_LOGIN_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SC_WAITINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_WAITINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ACTORINFOLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ACTORINFOLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ACTORINFOLIST_SC_ACTOR_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_CREATEACTOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_CREATEACTOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_CREATEACTOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_CREATEACTOR_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_CREATEACTOR_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CS_SELECTACTOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_SELECTACTOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_SELECTACTOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_SELECTACTOR_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SC_SELECTACTOR_ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_world_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_world_5fservice_2eproto() {
  protobuf_AddDesc_world_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world_service.proto");
  GOOGLE_CHECK(file != NULL);
  SC_KEY_descriptor_ = file->message_type(0);
  static const int SC_KEY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KEY, key_),
  };
  SC_KEY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_KEY_descriptor_,
      SC_KEY::internal_default_instance(),
      SC_KEY_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_KEY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KEY, _internal_metadata_));
  CS_LOGIN_descriptor_ = file->message_type(1);
  static const int CS_LOGIN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN, last_succ_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN, prog_ver_),
  };
  CS_LOGIN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_LOGIN_descriptor_,
      CS_LOGIN::internal_default_instance(),
      CS_LOGIN_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_LOGIN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN, _internal_metadata_));
  SC_LOGIN_descriptor_ = file->message_type(2);
  static const int SC_LOGIN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN, last_succ_key_),
  };
  SC_LOGIN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_LOGIN_descriptor_,
      SC_LOGIN::internal_default_instance(),
      SC_LOGIN_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_LOGIN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN, _internal_metadata_));
  SC_LOGIN_ErrorCode_descriptor_ = SC_LOGIN_descriptor_->enum_type(0);
  SC_WAITINFO_descriptor_ = file->message_type(3);
  static const int SC_WAITINFO_offsets_[1] = {
  };
  SC_WAITINFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_WAITINFO_descriptor_,
      SC_WAITINFO::internal_default_instance(),
      SC_WAITINFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_WAITINFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_WAITINFO, _internal_metadata_));
  SC_ACTORINFOLIST_descriptor_ = file->message_type(4);
  static const int SC_ACTORINFOLIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST, list_),
  };
  SC_ACTORINFOLIST_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ACTORINFOLIST_descriptor_,
      SC_ACTORINFOLIST::internal_default_instance(),
      SC_ACTORINFOLIST_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ACTORINFOLIST),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST, _internal_metadata_));
  SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_ = SC_ACTORINFOLIST_descriptor_->nested_type(0);
  static const int SC_ACTORINFOLIST_SC_ACTOR_INFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST_SC_ACTOR_INFO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST_SC_ACTOR_INFO, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST_SC_ACTOR_INFO, baselook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST_SC_ACTOR_INFO, lev_),
  };
  SC_ACTORINFOLIST_SC_ACTOR_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_,
      SC_ACTORINFOLIST_SC_ACTOR_INFO::internal_default_instance(),
      SC_ACTORINFOLIST_SC_ACTOR_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_ACTORINFOLIST_SC_ACTOR_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ACTORINFOLIST_SC_ACTOR_INFO, _internal_metadata_));
  CS_CREATEACTOR_descriptor_ = file->message_type(5);
  static const int CS_CREATEACTOR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CREATEACTOR, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CREATEACTOR, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CREATEACTOR, baselook_),
  };
  CS_CREATEACTOR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_CREATEACTOR_descriptor_,
      CS_CREATEACTOR::internal_default_instance(),
      CS_CREATEACTOR_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_CREATEACTOR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CREATEACTOR, _internal_metadata_));
  SC_CREATEACTOR_descriptor_ = file->message_type(6);
  static const int SC_CREATEACTOR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATEACTOR, result_code_),
  };
  SC_CREATEACTOR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_CREATEACTOR_descriptor_,
      SC_CREATEACTOR::internal_default_instance(),
      SC_CREATEACTOR_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_CREATEACTOR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATEACTOR, _internal_metadata_));
  SC_CREATEACTOR_ErrorCode_descriptor_ = SC_CREATEACTOR_descriptor_->enum_type(0);
  CS_SELECTACTOR_descriptor_ = file->message_type(7);
  static const int CS_SELECTACTOR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SELECTACTOR, actor_idx_),
  };
  CS_SELECTACTOR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_SELECTACTOR_descriptor_,
      CS_SELECTACTOR::internal_default_instance(),
      CS_SELECTACTOR_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_SELECTACTOR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SELECTACTOR, _internal_metadata_));
  SC_SELECTACTOR_descriptor_ = file->message_type(8);
  static const int SC_SELECTACTOR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SELECTACTOR, result_code_),
  };
  SC_SELECTACTOR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_SELECTACTOR_descriptor_,
      SC_SELECTACTOR::internal_default_instance(),
      SC_SELECTACTOR_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_SELECTACTOR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SELECTACTOR, _internal_metadata_));
  SC_SELECTACTOR_ErrorCode_descriptor_ = SC_SELECTACTOR_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_KEY_descriptor_, SC_KEY::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_LOGIN_descriptor_, CS_LOGIN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_LOGIN_descriptor_, SC_LOGIN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_WAITINFO_descriptor_, SC_WAITINFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ACTORINFOLIST_descriptor_, SC_ACTORINFOLIST::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_, SC_ACTORINFOLIST_SC_ACTOR_INFO::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_CREATEACTOR_descriptor_, CS_CREATEACTOR::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_CREATEACTOR_descriptor_, SC_CREATEACTOR::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_SELECTACTOR_descriptor_, CS_SELECTACTOR::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_SELECTACTOR_descriptor_, SC_SELECTACTOR::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world_5fservice_2eproto() {
  SC_KEY_default_instance_.Shutdown();
  delete SC_KEY_reflection_;
  CS_LOGIN_default_instance_.Shutdown();
  delete CS_LOGIN_reflection_;
  SC_LOGIN_default_instance_.Shutdown();
  delete SC_LOGIN_reflection_;
  SC_WAITINFO_default_instance_.Shutdown();
  delete SC_WAITINFO_reflection_;
  SC_ACTORINFOLIST_default_instance_.Shutdown();
  delete SC_ACTORINFOLIST_reflection_;
  SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_.Shutdown();
  delete SC_ACTORINFOLIST_SC_ACTOR_INFO_reflection_;
  CS_CREATEACTOR_default_instance_.Shutdown();
  delete CS_CREATEACTOR_reflection_;
  SC_CREATEACTOR_default_instance_.Shutdown();
  delete SC_CREATEACTOR_reflection_;
  CS_SELECTACTOR_default_instance_.Shutdown();
  delete CS_SELECTACTOR_reflection_;
  SC_SELECTACTOR_default_instance_.Shutdown();
  delete SC_SELECTACTOR_reflection_;
}

void protobuf_InitDefaults_world_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SC_KEY_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_LOGIN_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_LOGIN_default_instance_.DefaultConstruct();
  SC_WAITINFO_default_instance_.DefaultConstruct();
  SC_ACTORINFOLIST_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_CREATEACTOR_default_instance_.DefaultConstruct();
  SC_CREATEACTOR_default_instance_.DefaultConstruct();
  CS_SELECTACTOR_default_instance_.DefaultConstruct();
  SC_SELECTACTOR_default_instance_.DefaultConstruct();
  SC_KEY_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_LOGIN_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_LOGIN_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_WAITINFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ACTORINFOLIST_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_CREATEACTOR_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_CREATEACTOR_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_SELECTACTOR_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_SELECTACTOR_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_world_5fservice_2eproto_once_);
void protobuf_InitDefaults_world_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_world_5fservice_2eproto_once_,
                 &protobuf_InitDefaults_world_5fservice_2eproto_impl);
}
void protobuf_AddDesc_world_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_world_5fservice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023world_service.proto\"\025\n\006SC_KEY\022\013\n\003key\030\001"
    " \001(\r\"Q\n\010CS_LOGIN\022\016\n\006openid\030\001 \001(\t\022\014\n\004auth"
    "\030\002 \001(\t\022\025\n\rlast_succ_key\030\003 \001(\t\022\020\n\010prog_ve"
    "r\030\004 \001(\t\"\266\001\n\010SC_LOGIN\022(\n\013result_code\030\001 \001("
    "\0162\023.SC_LOGIN.ErrorCode\022\016\n\006detail\030\002 \001(\t\022\025"
    "\n\rlast_succ_key\030\003 \001(\t\"Y\n\tErrorCode\022\013\n\007EC"
    "_SUCC\020\000\022\017\n\013EC_PROG_VER\020\001\022\017\n\013EC_LAST_KEY\020"
    "\002\022\013\n\007EC_AUTH\020\003\022\020\n\014EC_WAIT_AUTH\020\004\"\r\n\013SC_W"
    "AITINFO\"\215\001\n\020SC_ACTORINFOLIST\022-\n\004list\030\001 \003"
    "(\0132\037.SC_ACTORINFOLIST.SC_ACTOR_INFO\032J\n\rS"
    "C_ACTOR_INFO\022\014\n\004name\030\001 \001(\t\022\014\n\004prof\030\002 \001(\r"
    "\022\020\n\010baselook\030\003 \001(\r\022\013\n\003lev\030\004 \001(\r\">\n\016CS_CR"
    "EATEACTOR\022\014\n\004name\030\001 \001(\t\022\014\n\004prof\030\002 \001(\r\022\020\n"
    "\010baselook\030\003 \001(\r\"\300\001\n\016SC_CREATEACTOR\022.\n\013re"
    "sult_code\030\001 \001(\0162\031.SC_CREATEACTOR.ErrorCo"
    "de\"~\n\tErrorCode\022\013\n\007EC_SUCC\020\000\022\020\n\014EC_SAME_"
    "NAME\020\001\022\024\n\020EC_NAME_TOO_LONG\020\002\022\025\n\021EC_NAME_"
    "TOO_SHORT\020\003\022\023\n\017EC_NAME_ILLEGAL\020\004\022\020\n\014EC_M"
    "AX_ACTOR\020\005\"#\n\016CS_SELECTACTOR\022\021\n\tactor_id"
    "x\030\001 \001(\r\"Z\n\016SC_SELECTACTOR\022.\n\013result_code"
    "\030\001 \001(\0162\031.SC_SELECTACTOR.ErrorCode\"\030\n\tErr"
    "orCode\022\013\n\007EC_SUCC\020\000b\006proto3", 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_5fservice_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_world_5fservice_2eproto_once_);
void protobuf_AddDesc_world_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_world_5fservice_2eproto_once_,
                 &protobuf_AddDesc_world_5fservice_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_5fservice_2eproto {
  StaticDescriptorInitializer_world_5fservice_2eproto() {
    protobuf_AddDesc_world_5fservice_2eproto();
  }
} static_descriptor_initializer_world_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_KEY::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_KEY::SC_KEY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_KEY)
}

void SC_KEY::InitAsDefaultInstance() {
}

SC_KEY::SC_KEY(const SC_KEY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_KEY)
}

void SC_KEY::SharedCtor() {
  key_ = 0u;
  _cached_size_ = 0;
}

SC_KEY::~SC_KEY() {
  // @@protoc_insertion_point(destructor:SC_KEY)
  SharedDtor();
}

void SC_KEY::SharedDtor() {
}

void SC_KEY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_KEY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_KEY_descriptor_;
}

const SC_KEY& SC_KEY::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_KEY> SC_KEY_default_instance_;

SC_KEY* SC_KEY::New(::google::protobuf::Arena* arena) const {
  SC_KEY* n = new SC_KEY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_KEY::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_KEY)
  key_ = 0u;
}

bool SC_KEY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_KEY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_KEY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_KEY)
  return false;
#undef DO_
}

void SC_KEY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_KEY)
  // optional uint32 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_KEY)
}

::google::protobuf::uint8* SC_KEY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_KEY)
  // optional uint32 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_KEY)
  return target;
}

size_t SC_KEY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_KEY)
  size_t total_size = 0;

  // optional uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_KEY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_KEY)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_KEY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_KEY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_KEY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_KEY)
    UnsafeMergeFrom(*source);
  }
}

void SC_KEY::MergeFrom(const SC_KEY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_KEY)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_KEY::UnsafeMergeFrom(const SC_KEY& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void SC_KEY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_KEY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_KEY::CopyFrom(const SC_KEY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_KEY)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_KEY::IsInitialized() const {

  return true;
}

void SC_KEY::Swap(SC_KEY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_KEY::InternalSwap(SC_KEY* other) {
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_KEY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_KEY_descriptor_;
  metadata.reflection = SC_KEY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_KEY

// optional uint32 key = 1;
void SC_KEY::clear_key() {
  key_ = 0u;
}
::google::protobuf::uint32 SC_KEY::key() const {
  // @@protoc_insertion_point(field_get:SC_KEY.key)
  return key_;
}
void SC_KEY::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:SC_KEY.key)
}

inline const SC_KEY* SC_KEY::internal_default_instance() {
  return &SC_KEY_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LOGIN::kOpenidFieldNumber;
const int CS_LOGIN::kAuthFieldNumber;
const int CS_LOGIN::kLastSuccKeyFieldNumber;
const int CS_LOGIN::kProgVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LOGIN::CS_LOGIN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LOGIN)
}

void CS_LOGIN::InitAsDefaultInstance() {
}

CS_LOGIN::CS_LOGIN(const CS_LOGIN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_LOGIN)
}

void CS_LOGIN::SharedCtor() {
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prog_ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CS_LOGIN::~CS_LOGIN() {
  // @@protoc_insertion_point(destructor:CS_LOGIN)
  SharedDtor();
}

void CS_LOGIN::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prog_ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LOGIN_descriptor_;
}

const CS_LOGIN& CS_LOGIN::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_LOGIN> CS_LOGIN_default_instance_;

CS_LOGIN* CS_LOGIN::New(::google::protobuf::Arena* arena) const {
  CS_LOGIN* n = new CS_LOGIN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOGIN)
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prog_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CS_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LOGIN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_LOGIN.openid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        break;
      }

      // optional string auth = 2;
      case 2: {
        if (tag == 18) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_LOGIN.auth"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_succ_key;
        break;
      }

      // optional string last_succ_key = 3;
      case 3: {
        if (tag == 26) {
         parse_last_succ_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_succ_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_succ_key().data(), this->last_succ_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_LOGIN.last_succ_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_prog_ver;
        break;
      }

      // optional string prog_ver = 4;
      case 4: {
        if (tag == 34) {
         parse_prog_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prog_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prog_ver().data(), this->prog_ver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_LOGIN.prog_ver"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LOGIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LOGIN)
  return false;
#undef DO_
}

void CS_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LOGIN)
  // optional string openid = 1;
  if (this->openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // optional string auth = 2;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.auth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->auth(), output);
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_succ_key().data(), this->last_succ_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.last_succ_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_succ_key(), output);
  }

  // optional string prog_ver = 4;
  if (this->prog_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prog_ver().data(), this->prog_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.prog_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prog_ver(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_LOGIN)
}

::google::protobuf::uint8* CS_LOGIN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOGIN)
  // optional string openid = 1;
  if (this->openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string auth = 2;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.auth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth(), target);
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_succ_key().data(), this->last_succ_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.last_succ_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_succ_key(), target);
  }

  // optional string prog_ver = 4;
  if (this->prog_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prog_ver().data(), this->prog_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.prog_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prog_ver(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_LOGIN)
  return target;
}

size_t CS_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOGIN)
  size_t total_size = 0;

  // optional string openid = 1;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  // optional string auth = 2;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth());
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_succ_key());
  }

  // optional string prog_ver = 4;
  if (this->prog_ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prog_ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LOGIN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_LOGIN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LOGIN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LOGIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LOGIN)
    UnsafeMergeFrom(*source);
  }
}

void CS_LOGIN::MergeFrom(const CS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LOGIN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_LOGIN::UnsafeMergeFrom(const CS_LOGIN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.last_succ_key().size() > 0) {

    last_succ_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
  if (from.prog_ver().size() > 0) {

    prog_ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prog_ver_);
  }
}

void CS_LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOGIN::CopyFrom(const CS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOGIN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_LOGIN::IsInitialized() const {

  return true;
}

void CS_LOGIN::Swap(CS_LOGIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LOGIN::InternalSwap(CS_LOGIN* other) {
  openid_.Swap(&other->openid_);
  auth_.Swap(&other->auth_);
  last_succ_key_.Swap(&other->last_succ_key_);
  prog_ver_.Swap(&other->prog_ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LOGIN_descriptor_;
  metadata.reflection = CS_LOGIN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LOGIN

// optional string openid = 1;
void CS_LOGIN::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOGIN::openid() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_openid(const ::std::string& value) {
  
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.openid)
}
void CS_LOGIN::set_openid(const char* value) {
  
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.openid)
}
void CS_LOGIN::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.openid)
}
::std::string* CS_LOGIN::mutable_openid() {
  
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOGIN::release_openid() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.openid)
  
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.openid)
}

// optional string auth = 2;
void CS_LOGIN::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOGIN::auth() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.auth)
  return auth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.auth)
}
void CS_LOGIN::set_auth(const char* value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.auth)
}
void CS_LOGIN::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.auth)
}
::std::string* CS_LOGIN::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOGIN::release_auth() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.auth)
}

// optional string last_succ_key = 3;
void CS_LOGIN::clear_last_succ_key() {
  last_succ_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOGIN::last_succ_key() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.last_succ_key)
  return last_succ_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_last_succ_key(const ::std::string& value) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.last_succ_key)
}
void CS_LOGIN::set_last_succ_key(const char* value) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.last_succ_key)
}
void CS_LOGIN::set_last_succ_key(const char* value, size_t size) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.last_succ_key)
}
::std::string* CS_LOGIN::mutable_last_succ_key() {
  
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.last_succ_key)
  return last_succ_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOGIN::release_last_succ_key() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.last_succ_key)
  
  return last_succ_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_allocated_last_succ_key(::std::string* last_succ_key) {
  if (last_succ_key != NULL) {
    
  } else {
    
  }
  last_succ_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_succ_key);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.last_succ_key)
}

// optional string prog_ver = 4;
void CS_LOGIN::clear_prog_ver() {
  prog_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOGIN::prog_ver() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.prog_ver)
  return prog_ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_prog_ver(const ::std::string& value) {
  
  prog_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.prog_ver)
}
void CS_LOGIN::set_prog_ver(const char* value) {
  
  prog_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_LOGIN.prog_ver)
}
void CS_LOGIN::set_prog_ver(const char* value, size_t size) {
  
  prog_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_LOGIN.prog_ver)
}
::std::string* CS_LOGIN::mutable_prog_ver() {
  
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.prog_ver)
  return prog_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOGIN::release_prog_ver() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.prog_ver)
  
  return prog_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOGIN::set_allocated_prog_ver(::std::string* prog_ver) {
  if (prog_ver != NULL) {
    
  } else {
    
  }
  prog_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prog_ver);
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.prog_ver)
}

inline const CS_LOGIN* CS_LOGIN::internal_default_instance() {
  return &CS_LOGIN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_LOGIN_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LOGIN_ErrorCode_descriptor_;
}
bool SC_LOGIN_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LOGIN_ErrorCode SC_LOGIN::EC_SUCC;
const SC_LOGIN_ErrorCode SC_LOGIN::EC_PROG_VER;
const SC_LOGIN_ErrorCode SC_LOGIN::EC_LAST_KEY;
const SC_LOGIN_ErrorCode SC_LOGIN::EC_AUTH;
const SC_LOGIN_ErrorCode SC_LOGIN::EC_WAIT_AUTH;
const SC_LOGIN_ErrorCode SC_LOGIN::ErrorCode_MIN;
const SC_LOGIN_ErrorCode SC_LOGIN::ErrorCode_MAX;
const int SC_LOGIN::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LOGIN::kResultCodeFieldNumber;
const int SC_LOGIN::kDetailFieldNumber;
const int SC_LOGIN::kLastSuccKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LOGIN::SC_LOGIN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LOGIN)
}

void SC_LOGIN::InitAsDefaultInstance() {
}

SC_LOGIN::SC_LOGIN(const SC_LOGIN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_LOGIN)
}

void SC_LOGIN::SharedCtor() {
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0;
  _cached_size_ = 0;
}

SC_LOGIN::~SC_LOGIN() {
  // @@protoc_insertion_point(destructor:SC_LOGIN)
  SharedDtor();
}

void SC_LOGIN::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LOGIN_descriptor_;
}

const SC_LOGIN& SC_LOGIN::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_LOGIN> SC_LOGIN_default_instance_;

SC_LOGIN* SC_LOGIN::New(::google::protobuf::Arena* arena) const {
  SC_LOGIN* n = new SC_LOGIN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LOGIN)
  result_code_ = 0;
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SC_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LOGIN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC_LOGIN.ErrorCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::SC_LOGIN_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional string detail = 2;
      case 2: {
        if (tag == 18) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_LOGIN.detail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_succ_key;
        break;
      }

      // optional string last_succ_key = 3;
      case 3: {
        if (tag == 26) {
         parse_last_succ_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_succ_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_succ_key().data(), this->last_succ_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_LOGIN.last_succ_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LOGIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LOGIN)
  return false;
#undef DO_
}

void SC_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LOGIN)
  // optional .SC_LOGIN.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // optional string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->detail(), output);
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_succ_key().data(), this->last_succ_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.last_succ_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_succ_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_LOGIN)
}

::google::protobuf::uint8* SC_LOGIN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_LOGIN)
  // optional .SC_LOGIN.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // optional string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detail(), target);
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_succ_key().data(), this->last_succ_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.last_succ_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_succ_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_LOGIN)
  return target;
}

size_t SC_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LOGIN)
  size_t total_size = 0;

  // optional .SC_LOGIN.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // optional string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  // optional string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_succ_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LOGIN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_LOGIN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LOGIN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LOGIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LOGIN)
    UnsafeMergeFrom(*source);
  }
}

void SC_LOGIN::MergeFrom(const SC_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LOGIN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_LOGIN::UnsafeMergeFrom(const SC_LOGIN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.last_succ_key().size() > 0) {

    last_succ_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
}

void SC_LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOGIN::CopyFrom(const SC_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LOGIN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_LOGIN::IsInitialized() const {

  return true;
}

void SC_LOGIN::Swap(SC_LOGIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LOGIN::InternalSwap(SC_LOGIN* other) {
  std::swap(result_code_, other->result_code_);
  detail_.Swap(&other->detail_);
  last_succ_key_.Swap(&other->last_succ_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LOGIN_descriptor_;
  metadata.reflection = SC_LOGIN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LOGIN

// optional .SC_LOGIN.ErrorCode result_code = 1;
void SC_LOGIN::clear_result_code() {
  result_code_ = 0;
}
::SC_LOGIN_ErrorCode SC_LOGIN::result_code() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.result_code)
  return static_cast< ::SC_LOGIN_ErrorCode >(result_code_);
}
void SC_LOGIN::set_result_code(::SC_LOGIN_ErrorCode value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:SC_LOGIN.result_code)
}

// optional string detail = 2;
void SC_LOGIN::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_LOGIN::detail() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.detail)
  return detail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_LOGIN::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_LOGIN.detail)
}
void SC_LOGIN::set_detail(const char* value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_LOGIN.detail)
}
void SC_LOGIN::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_LOGIN.detail)
}
::std::string* SC_LOGIN::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:SC_LOGIN.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_LOGIN::release_detail() {
  // @@protoc_insertion_point(field_release:SC_LOGIN.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_LOGIN::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:SC_LOGIN.detail)
}

// optional string last_succ_key = 3;
void SC_LOGIN::clear_last_succ_key() {
  last_succ_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_LOGIN::last_succ_key() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN.last_succ_key)
  return last_succ_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_LOGIN::set_last_succ_key(const ::std::string& value) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_LOGIN.last_succ_key)
}
void SC_LOGIN::set_last_succ_key(const char* value) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_LOGIN.last_succ_key)
}
void SC_LOGIN::set_last_succ_key(const char* value, size_t size) {
  
  last_succ_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_LOGIN.last_succ_key)
}
::std::string* SC_LOGIN::mutable_last_succ_key() {
  
  // @@protoc_insertion_point(field_mutable:SC_LOGIN.last_succ_key)
  return last_succ_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_LOGIN::release_last_succ_key() {
  // @@protoc_insertion_point(field_release:SC_LOGIN.last_succ_key)
  
  return last_succ_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_LOGIN::set_allocated_last_succ_key(::std::string* last_succ_key) {
  if (last_succ_key != NULL) {
    
  } else {
    
  }
  last_succ_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_succ_key);
  // @@protoc_insertion_point(field_set_allocated:SC_LOGIN.last_succ_key)
}

inline const SC_LOGIN* SC_LOGIN::internal_default_instance() {
  return &SC_LOGIN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_WAITINFO::SC_WAITINFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_WAITINFO)
}

void SC_WAITINFO::InitAsDefaultInstance() {
}

SC_WAITINFO::SC_WAITINFO(const SC_WAITINFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_WAITINFO)
}

void SC_WAITINFO::SharedCtor() {
  _cached_size_ = 0;
}

SC_WAITINFO::~SC_WAITINFO() {
  // @@protoc_insertion_point(destructor:SC_WAITINFO)
  SharedDtor();
}

void SC_WAITINFO::SharedDtor() {
}

void SC_WAITINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_WAITINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_WAITINFO_descriptor_;
}

const SC_WAITINFO& SC_WAITINFO::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_WAITINFO> SC_WAITINFO_default_instance_;

SC_WAITINFO* SC_WAITINFO::New(::google::protobuf::Arena* arena) const {
  SC_WAITINFO* n = new SC_WAITINFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_WAITINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_WAITINFO)
}

bool SC_WAITINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_WAITINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_WAITINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_WAITINFO)
  return false;
#undef DO_
}

void SC_WAITINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_WAITINFO)
  // @@protoc_insertion_point(serialize_end:SC_WAITINFO)
}

::google::protobuf::uint8* SC_WAITINFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_WAITINFO)
  // @@protoc_insertion_point(serialize_to_array_end:SC_WAITINFO)
  return target;
}

size_t SC_WAITINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_WAITINFO)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_WAITINFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_WAITINFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_WAITINFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_WAITINFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_WAITINFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_WAITINFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_WAITINFO::MergeFrom(const SC_WAITINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_WAITINFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_WAITINFO::UnsafeMergeFrom(const SC_WAITINFO& from) {
  GOOGLE_DCHECK(&from != this);
}

void SC_WAITINFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_WAITINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_WAITINFO::CopyFrom(const SC_WAITINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_WAITINFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_WAITINFO::IsInitialized() const {

  return true;
}

void SC_WAITINFO::Swap(SC_WAITINFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_WAITINFO::InternalSwap(SC_WAITINFO* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_WAITINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_WAITINFO_descriptor_;
  metadata.reflection = SC_WAITINFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_WAITINFO

inline const SC_WAITINFO* SC_WAITINFO::internal_default_instance() {
  return &SC_WAITINFO_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ACTORINFOLIST_SC_ACTOR_INFO::kNameFieldNumber;
const int SC_ACTORINFOLIST_SC_ACTOR_INFO::kProfFieldNumber;
const int SC_ACTORINFOLIST_SC_ACTOR_INFO::kBaselookFieldNumber;
const int SC_ACTORINFOLIST_SC_ACTOR_INFO::kLevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ACTORINFOLIST_SC_ACTOR_INFO::SC_ACTORINFOLIST_SC_ACTOR_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::InitAsDefaultInstance() {
}

SC_ACTORINFOLIST_SC_ACTOR_INFO::SC_ACTORINFOLIST_SC_ACTOR_INFO(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, reinterpret_cast<char*>(&lev_) -
    reinterpret_cast<char*>(&prof_) + sizeof(lev_));
  _cached_size_ = 0;
}

SC_ACTORINFOLIST_SC_ACTOR_INFO::~SC_ACTORINFOLIST_SC_ACTOR_INFO() {
  // @@protoc_insertion_point(destructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  SharedDtor();
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ACTORINFOLIST_SC_ACTOR_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_;
}

const SC_ACTORINFOLIST_SC_ACTOR_INFO& SC_ACTORINFOLIST_SC_ACTOR_INFO::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ACTORINFOLIST_SC_ACTOR_INFO> SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_;

SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST_SC_ACTOR_INFO::New(::google::protobuf::Arena* arena) const {
  SC_ACTORINFOLIST_SC_ACTOR_INFO* n = new SC_ACTORINFOLIST_SC_ACTOR_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_ACTORINFOLIST_SC_ACTOR_INFO, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_ACTORINFOLIST_SC_ACTOR_INFO*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(prof_, lev_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SC_ACTORINFOLIST_SC_ACTOR_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SC_ACTORINFOLIST.SC_ACTOR_INFO.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 2;
      case 2: {
        if (tag == 16) {
         parse_prof:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baselook;
        break;
      }

      // optional uint32 baselook = 3;
      case 3: {
        if (tag == 24) {
         parse_baselook:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselook_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lev;
        break;
      }

      // optional uint32 lev = 4;
      case 4: {
        if (tag == 32) {
         parse_lev:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  return false;
#undef DO_
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_ACTORINFOLIST.SC_ACTOR_INFO.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prof(), output);
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->baselook(), output);
  }

  // optional uint32 lev = 4;
  if (this->lev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lev(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ACTORINFOLIST.SC_ACTOR_INFO)
}

::google::protobuf::uint8* SC_ACTORINFOLIST_SC_ACTOR_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SC_ACTORINFOLIST.SC_ACTOR_INFO.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prof(), target);
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->baselook(), target);
  }

  // optional uint32 lev = 4;
  if (this->lev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lev(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  return target;
}

size_t SC_ACTORINFOLIST_SC_ACTOR_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prof());
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baselook());
  }

  // optional uint32 lev = 4;
  if (this->lev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lev());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ACTORINFOLIST_SC_ACTOR_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ACTORINFOLIST_SC_ACTOR_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORINFOLIST.SC_ACTOR_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORINFOLIST.SC_ACTOR_INFO)
    UnsafeMergeFrom(*source);
  }
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::MergeFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::UnsafeMergeFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prof() != 0) {
    set_prof(from.prof());
  }
  if (from.baselook() != 0) {
    set_baselook(from.baselook());
  }
  if (from.lev() != 0) {
    set_lev(from.lev());
  }
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::CopyFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ACTORINFOLIST_SC_ACTOR_INFO::IsInitialized() const {

  return true;
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::Swap(SC_ACTORINFOLIST_SC_ACTOR_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::InternalSwap(SC_ACTORINFOLIST_SC_ACTOR_INFO* other) {
  name_.Swap(&other->name_);
  std::swap(prof_, other->prof_);
  std::swap(baselook_, other->baselook_);
  std::swap(lev_, other->lev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ACTORINFOLIST_SC_ACTOR_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ACTORINFOLIST_SC_ACTOR_INFO_descriptor_;
  metadata.reflection = SC_ACTORINFOLIST_SC_ACTOR_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ACTORINFOLIST::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ACTORINFOLIST::SC_ACTORINFOLIST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORINFOLIST)
}

void SC_ACTORINFOLIST::InitAsDefaultInstance() {
}

SC_ACTORINFOLIST::SC_ACTORINFOLIST(const SC_ACTORINFOLIST& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ACTORINFOLIST)
}

void SC_ACTORINFOLIST::SharedCtor() {
  _cached_size_ = 0;
}

SC_ACTORINFOLIST::~SC_ACTORINFOLIST() {
  // @@protoc_insertion_point(destructor:SC_ACTORINFOLIST)
  SharedDtor();
}

void SC_ACTORINFOLIST::SharedDtor() {
}

void SC_ACTORINFOLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ACTORINFOLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ACTORINFOLIST_descriptor_;
}

const SC_ACTORINFOLIST& SC_ACTORINFOLIST::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ACTORINFOLIST> SC_ACTORINFOLIST_default_instance_;

SC_ACTORINFOLIST* SC_ACTORINFOLIST::New(::google::protobuf::Arena* arena) const {
  SC_ACTORINFOLIST* n = new SC_ACTORINFOLIST;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ACTORINFOLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORINFOLIST)
  list_.Clear();
}

bool SC_ACTORINFOLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ACTORINFOLIST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ACTORINFOLIST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ACTORINFOLIST)
  return false;
#undef DO_
}

void SC_ACTORINFOLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ACTORINFOLIST)
  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_ACTORINFOLIST)
}

::google::protobuf::uint8* SC_ACTORINFOLIST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORINFOLIST)
  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORINFOLIST)
  return target;
}

size_t SC_ACTORINFOLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORINFOLIST)
  size_t total_size = 0;

  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ACTORINFOLIST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORINFOLIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ACTORINFOLIST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ACTORINFOLIST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORINFOLIST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORINFOLIST)
    UnsafeMergeFrom(*source);
  }
}

void SC_ACTORINFOLIST::MergeFrom(const SC_ACTORINFOLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORINFOLIST)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ACTORINFOLIST::UnsafeMergeFrom(const SC_ACTORINFOLIST& from) {
  GOOGLE_DCHECK(&from != this);
  list_.MergeFrom(from.list_);
}

void SC_ACTORINFOLIST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORINFOLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORINFOLIST::CopyFrom(const SC_ACTORINFOLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORINFOLIST)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ACTORINFOLIST::IsInitialized() const {

  return true;
}

void SC_ACTORINFOLIST::Swap(SC_ACTORINFOLIST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ACTORINFOLIST::InternalSwap(SC_ACTORINFOLIST* other) {
  list_.UnsafeArenaSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ACTORINFOLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ACTORINFOLIST_descriptor_;
  metadata.reflection = SC_ACTORINFOLIST_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ACTORINFOLIST_SC_ACTOR_INFO

// optional string name = 1;
void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_ACTORINFOLIST_SC_ACTOR_INFO::name() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}
::std::string* SC_ACTORINFOLIST_SC_ACTOR_INFO::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_ACTORINFOLIST_SC_ACTOR_INFO::release_name() {
  // @@protoc_insertion_point(field_release:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC_ACTORINFOLIST.SC_ACTOR_INFO.name)
}

// optional uint32 prof = 2;
void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_prof() {
  prof_ = 0u;
}
::google::protobuf::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::prof() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.prof)
  return prof_;
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_prof(::google::protobuf::uint32 value) {
  
  prof_ = value;
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.prof)
}

// optional uint32 baselook = 3;
void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_baselook() {
  baselook_ = 0u;
}
::google::protobuf::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::baselook() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.baselook)
  return baselook_;
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_baselook(::google::protobuf::uint32 value) {
  
  baselook_ = value;
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.baselook)
}

// optional uint32 lev = 4;
void SC_ACTORINFOLIST_SC_ACTOR_INFO::clear_lev() {
  lev_ = 0u;
}
::google::protobuf::uint32 SC_ACTORINFOLIST_SC_ACTOR_INFO::lev() const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.SC_ACTOR_INFO.lev)
  return lev_;
}
void SC_ACTORINFOLIST_SC_ACTOR_INFO::set_lev(::google::protobuf::uint32 value) {
  
  lev_ = value;
  // @@protoc_insertion_point(field_set:SC_ACTORINFOLIST.SC_ACTOR_INFO.lev)
}

inline const SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST_SC_ACTOR_INFO::internal_default_instance() {
  return &SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_ACTORINFOLIST

// repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
int SC_ACTORINFOLIST::list_size() const {
  return list_.size();
}
void SC_ACTORINFOLIST::clear_list() {
  list_.Clear();
}
const ::SC_ACTORINFOLIST_SC_ACTOR_INFO& SC_ACTORINFOLIST::list(int index) const {
  // @@protoc_insertion_point(field_get:SC_ACTORINFOLIST.list)
  return list_.Get(index);
}
::SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ACTORINFOLIST.list)
  return list_.Mutable(index);
}
::SC_ACTORINFOLIST_SC_ACTOR_INFO* SC_ACTORINFOLIST::add_list() {
  // @@protoc_insertion_point(field_add:SC_ACTORINFOLIST.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >*
SC_ACTORINFOLIST::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_ACTORINFOLIST.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >&
SC_ACTORINFOLIST::list() const {
  // @@protoc_insertion_point(field_list:SC_ACTORINFOLIST.list)
  return list_;
}

inline const SC_ACTORINFOLIST* SC_ACTORINFOLIST::internal_default_instance() {
  return &SC_ACTORINFOLIST_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_CREATEACTOR::kNameFieldNumber;
const int CS_CREATEACTOR::kProfFieldNumber;
const int CS_CREATEACTOR::kBaselookFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_CREATEACTOR::CS_CREATEACTOR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CREATEACTOR)
}

void CS_CREATEACTOR::InitAsDefaultInstance() {
}

CS_CREATEACTOR::CS_CREATEACTOR(const CS_CREATEACTOR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_CREATEACTOR)
}

void CS_CREATEACTOR::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, reinterpret_cast<char*>(&baselook_) -
    reinterpret_cast<char*>(&prof_) + sizeof(baselook_));
  _cached_size_ = 0;
}

CS_CREATEACTOR::~CS_CREATEACTOR() {
  // @@protoc_insertion_point(destructor:CS_CREATEACTOR)
  SharedDtor();
}

void CS_CREATEACTOR::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_CREATEACTOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_CREATEACTOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_CREATEACTOR_descriptor_;
}

const CS_CREATEACTOR& CS_CREATEACTOR::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_CREATEACTOR> CS_CREATEACTOR_default_instance_;

CS_CREATEACTOR* CS_CREATEACTOR::New(::google::protobuf::Arena* arena) const {
  CS_CREATEACTOR* n = new CS_CREATEACTOR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_CREATEACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CREATEACTOR)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_CREATEACTOR, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_CREATEACTOR*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(prof_, baselook_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CS_CREATEACTOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_CREATEACTOR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CS_CREATEACTOR.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 2;
      case 2: {
        if (tag == 16) {
         parse_prof:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baselook;
        break;
      }

      // optional uint32 baselook = 3;
      case 3: {
        if (tag == 24) {
         parse_baselook:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselook_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_CREATEACTOR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_CREATEACTOR)
  return false;
#undef DO_
}

void CS_CREATEACTOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_CREATEACTOR)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_CREATEACTOR.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prof(), output);
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->baselook(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_CREATEACTOR)
}

::google::protobuf::uint8* CS_CREATEACTOR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_CREATEACTOR)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CS_CREATEACTOR.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prof(), target);
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->baselook(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_CREATEACTOR)
  return target;
}

size_t CS_CREATEACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CREATEACTOR)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 prof = 2;
  if (this->prof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prof());
  }

  // optional uint32 baselook = 3;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baselook());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_CREATEACTOR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CREATEACTOR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_CREATEACTOR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_CREATEACTOR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CREATEACTOR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CREATEACTOR)
    UnsafeMergeFrom(*source);
  }
}

void CS_CREATEACTOR::MergeFrom(const CS_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CREATEACTOR)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_CREATEACTOR::UnsafeMergeFrom(const CS_CREATEACTOR& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prof() != 0) {
    set_prof(from.prof());
  }
  if (from.baselook() != 0) {
    set_baselook(from.baselook());
  }
}

void CS_CREATEACTOR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CREATEACTOR::CopyFrom(const CS_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CREATEACTOR)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_CREATEACTOR::IsInitialized() const {

  return true;
}

void CS_CREATEACTOR::Swap(CS_CREATEACTOR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_CREATEACTOR::InternalSwap(CS_CREATEACTOR* other) {
  name_.Swap(&other->name_);
  std::swap(prof_, other->prof_);
  std::swap(baselook_, other->baselook_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_CREATEACTOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_CREATEACTOR_descriptor_;
  metadata.reflection = CS_CREATEACTOR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CREATEACTOR

// optional string name = 1;
void CS_CREATEACTOR::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_CREATEACTOR::name() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_CREATEACTOR::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.name)
}
void CS_CREATEACTOR::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_CREATEACTOR.name)
}
void CS_CREATEACTOR::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_CREATEACTOR.name)
}
::std::string* CS_CREATEACTOR::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CS_CREATEACTOR.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_CREATEACTOR::release_name() {
  // @@protoc_insertion_point(field_release:CS_CREATEACTOR.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_CREATEACTOR::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CS_CREATEACTOR.name)
}

// optional uint32 prof = 2;
void CS_CREATEACTOR::clear_prof() {
  prof_ = 0u;
}
::google::protobuf::uint32 CS_CREATEACTOR::prof() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.prof)
  return prof_;
}
void CS_CREATEACTOR::set_prof(::google::protobuf::uint32 value) {
  
  prof_ = value;
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.prof)
}

// optional uint32 baselook = 3;
void CS_CREATEACTOR::clear_baselook() {
  baselook_ = 0u;
}
::google::protobuf::uint32 CS_CREATEACTOR::baselook() const {
  // @@protoc_insertion_point(field_get:CS_CREATEACTOR.baselook)
  return baselook_;
}
void CS_CREATEACTOR::set_baselook(::google::protobuf::uint32 value) {
  
  baselook_ = value;
  // @@protoc_insertion_point(field_set:CS_CREATEACTOR.baselook)
}

inline const CS_CREATEACTOR* CS_CREATEACTOR::internal_default_instance() {
  return &CS_CREATEACTOR_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_CREATEACTOR_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CREATEACTOR_ErrorCode_descriptor_;
}
bool SC_CREATEACTOR_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_SUCC;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_SAME_NAME;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_TOO_LONG;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_TOO_SHORT;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_ILLEGAL;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_MAX_ACTOR;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::ErrorCode_MIN;
const SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::ErrorCode_MAX;
const int SC_CREATEACTOR::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CREATEACTOR::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CREATEACTOR::SC_CREATEACTOR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CREATEACTOR)
}

void SC_CREATEACTOR::InitAsDefaultInstance() {
}

SC_CREATEACTOR::SC_CREATEACTOR(const SC_CREATEACTOR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_CREATEACTOR)
}

void SC_CREATEACTOR::SharedCtor() {
  result_code_ = 0;
  _cached_size_ = 0;
}

SC_CREATEACTOR::~SC_CREATEACTOR() {
  // @@protoc_insertion_point(destructor:SC_CREATEACTOR)
  SharedDtor();
}

void SC_CREATEACTOR::SharedDtor() {
}

void SC_CREATEACTOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CREATEACTOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CREATEACTOR_descriptor_;
}

const SC_CREATEACTOR& SC_CREATEACTOR::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_CREATEACTOR> SC_CREATEACTOR_default_instance_;

SC_CREATEACTOR* SC_CREATEACTOR::New(::google::protobuf::Arena* arena) const {
  SC_CREATEACTOR* n = new SC_CREATEACTOR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CREATEACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CREATEACTOR)
  result_code_ = 0;
}

bool SC_CREATEACTOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CREATEACTOR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC_CREATEACTOR.ErrorCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::SC_CREATEACTOR_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CREATEACTOR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CREATEACTOR)
  return false;
#undef DO_
}

void SC_CREATEACTOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CREATEACTOR)
  // optional .SC_CREATEACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_CREATEACTOR)
}

::google::protobuf::uint8* SC_CREATEACTOR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_CREATEACTOR)
  // optional .SC_CREATEACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_CREATEACTOR)
  return target;
}

size_t SC_CREATEACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CREATEACTOR)
  size_t total_size = 0;

  // optional .SC_CREATEACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CREATEACTOR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CREATEACTOR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_CREATEACTOR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CREATEACTOR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CREATEACTOR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CREATEACTOR)
    UnsafeMergeFrom(*source);
  }
}

void SC_CREATEACTOR::MergeFrom(const SC_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CREATEACTOR)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_CREATEACTOR::UnsafeMergeFrom(const SC_CREATEACTOR& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void SC_CREATEACTOR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CREATEACTOR::CopyFrom(const SC_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CREATEACTOR)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_CREATEACTOR::IsInitialized() const {

  return true;
}

void SC_CREATEACTOR::Swap(SC_CREATEACTOR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CREATEACTOR::InternalSwap(SC_CREATEACTOR* other) {
  std::swap(result_code_, other->result_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CREATEACTOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_CREATEACTOR_descriptor_;
  metadata.reflection = SC_CREATEACTOR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CREATEACTOR

// optional .SC_CREATEACTOR.ErrorCode result_code = 1;
void SC_CREATEACTOR::clear_result_code() {
  result_code_ = 0;
}
::SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::result_code() const {
  // @@protoc_insertion_point(field_get:SC_CREATEACTOR.result_code)
  return static_cast< ::SC_CREATEACTOR_ErrorCode >(result_code_);
}
void SC_CREATEACTOR::set_result_code(::SC_CREATEACTOR_ErrorCode value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:SC_CREATEACTOR.result_code)
}

inline const SC_CREATEACTOR* SC_CREATEACTOR::internal_default_instance() {
  return &SC_CREATEACTOR_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SELECTACTOR::kActorIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SELECTACTOR::CS_SELECTACTOR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SELECTACTOR)
}

void CS_SELECTACTOR::InitAsDefaultInstance() {
}

CS_SELECTACTOR::CS_SELECTACTOR(const CS_SELECTACTOR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_SELECTACTOR)
}

void CS_SELECTACTOR::SharedCtor() {
  actor_idx_ = 0u;
  _cached_size_ = 0;
}

CS_SELECTACTOR::~CS_SELECTACTOR() {
  // @@protoc_insertion_point(destructor:CS_SELECTACTOR)
  SharedDtor();
}

void CS_SELECTACTOR::SharedDtor() {
}

void CS_SELECTACTOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SELECTACTOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_SELECTACTOR_descriptor_;
}

const CS_SELECTACTOR& CS_SELECTACTOR::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_SELECTACTOR> CS_SELECTACTOR_default_instance_;

CS_SELECTACTOR* CS_SELECTACTOR::New(::google::protobuf::Arena* arena) const {
  CS_SELECTACTOR* n = new CS_SELECTACTOR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SELECTACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SELECTACTOR)
  actor_idx_ = 0u;
}

bool CS_SELECTACTOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SELECTACTOR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actor_idx = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SELECTACTOR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SELECTACTOR)
  return false;
#undef DO_
}

void CS_SELECTACTOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SELECTACTOR)
  // optional uint32 actor_idx = 1;
  if (this->actor_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actor_idx(), output);
  }

  // @@protoc_insertion_point(serialize_end:CS_SELECTACTOR)
}

::google::protobuf::uint8* CS_SELECTACTOR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_SELECTACTOR)
  // optional uint32 actor_idx = 1;
  if (this->actor_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actor_idx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CS_SELECTACTOR)
  return target;
}

size_t CS_SELECTACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SELECTACTOR)
  size_t total_size = 0;

  // optional uint32 actor_idx = 1;
  if (this->actor_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SELECTACTOR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SELECTACTOR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_SELECTACTOR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SELECTACTOR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SELECTACTOR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SELECTACTOR)
    UnsafeMergeFrom(*source);
  }
}

void CS_SELECTACTOR::MergeFrom(const CS_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SELECTACTOR)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_SELECTACTOR::UnsafeMergeFrom(const CS_SELECTACTOR& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.actor_idx() != 0) {
    set_actor_idx(from.actor_idx());
  }
}

void CS_SELECTACTOR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SELECTACTOR::CopyFrom(const CS_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SELECTACTOR)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_SELECTACTOR::IsInitialized() const {

  return true;
}

void CS_SELECTACTOR::Swap(CS_SELECTACTOR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SELECTACTOR::InternalSwap(CS_SELECTACTOR* other) {
  std::swap(actor_idx_, other->actor_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SELECTACTOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_SELECTACTOR_descriptor_;
  metadata.reflection = CS_SELECTACTOR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SELECTACTOR

// optional uint32 actor_idx = 1;
void CS_SELECTACTOR::clear_actor_idx() {
  actor_idx_ = 0u;
}
::google::protobuf::uint32 CS_SELECTACTOR::actor_idx() const {
  // @@protoc_insertion_point(field_get:CS_SELECTACTOR.actor_idx)
  return actor_idx_;
}
void CS_SELECTACTOR::set_actor_idx(::google::protobuf::uint32 value) {
  
  actor_idx_ = value;
  // @@protoc_insertion_point(field_set:CS_SELECTACTOR.actor_idx)
}

inline const CS_SELECTACTOR* CS_SELECTACTOR::internal_default_instance() {
  return &CS_SELECTACTOR_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SC_SELECTACTOR_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SELECTACTOR_ErrorCode_descriptor_;
}
bool SC_SELECTACTOR_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::EC_SUCC;
const SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::ErrorCode_MIN;
const SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::ErrorCode_MAX;
const int SC_SELECTACTOR::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SELECTACTOR::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SELECTACTOR::SC_SELECTACTOR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_world_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SELECTACTOR)
}

void SC_SELECTACTOR::InitAsDefaultInstance() {
}

SC_SELECTACTOR::SC_SELECTACTOR(const SC_SELECTACTOR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_SELECTACTOR)
}

void SC_SELECTACTOR::SharedCtor() {
  result_code_ = 0;
  _cached_size_ = 0;
}

SC_SELECTACTOR::~SC_SELECTACTOR() {
  // @@protoc_insertion_point(destructor:SC_SELECTACTOR)
  SharedDtor();
}

void SC_SELECTACTOR::SharedDtor() {
}

void SC_SELECTACTOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SELECTACTOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_SELECTACTOR_descriptor_;
}

const SC_SELECTACTOR& SC_SELECTACTOR::default_instance() {
  protobuf_InitDefaults_world_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_SELECTACTOR> SC_SELECTACTOR_default_instance_;

SC_SELECTACTOR* SC_SELECTACTOR::New(::google::protobuf::Arena* arena) const {
  SC_SELECTACTOR* n = new SC_SELECTACTOR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SELECTACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SELECTACTOR)
  result_code_ = 0;
}

bool SC_SELECTACTOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SELECTACTOR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC_SELECTACTOR.ErrorCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::SC_SELECTACTOR_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SELECTACTOR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SELECTACTOR)
  return false;
#undef DO_
}

void SC_SELECTACTOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SELECTACTOR)
  // optional .SC_SELECTACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:SC_SELECTACTOR)
}

::google::protobuf::uint8* SC_SELECTACTOR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_SELECTACTOR)
  // optional .SC_SELECTACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SC_SELECTACTOR)
  return target;
}

size_t SC_SELECTACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SELECTACTOR)
  size_t total_size = 0;

  // optional .SC_SELECTACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SELECTACTOR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SELECTACTOR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_SELECTACTOR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SELECTACTOR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SELECTACTOR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SELECTACTOR)
    UnsafeMergeFrom(*source);
  }
}

void SC_SELECTACTOR::MergeFrom(const SC_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SELECTACTOR)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_SELECTACTOR::UnsafeMergeFrom(const SC_SELECTACTOR& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void SC_SELECTACTOR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SELECTACTOR::CopyFrom(const SC_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SELECTACTOR)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_SELECTACTOR::IsInitialized() const {

  return true;
}

void SC_SELECTACTOR::Swap(SC_SELECTACTOR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SELECTACTOR::InternalSwap(SC_SELECTACTOR* other) {
  std::swap(result_code_, other->result_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SELECTACTOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_SELECTACTOR_descriptor_;
  metadata.reflection = SC_SELECTACTOR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SELECTACTOR

// optional .SC_SELECTACTOR.ErrorCode result_code = 1;
void SC_SELECTACTOR::clear_result_code() {
  result_code_ = 0;
}
::SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::result_code() const {
  // @@protoc_insertion_point(field_get:SC_SELECTACTOR.result_code)
  return static_cast< ::SC_SELECTACTOR_ErrorCode >(result_code_);
}
void SC_SELECTACTOR::set_result_code(::SC_SELECTACTOR_ErrorCode value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:SC_SELECTACTOR.result_code)
}

inline const SC_SELECTACTOR* SC_SELECTACTOR::internal_default_instance() {
  return &SC_SELECTACTOR_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
